
All_cubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c30  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08004d60  08004d60  00014d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005020  08005020  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005020  08005020  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005020  08005020  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005020  08005020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000006c  08005094  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08005094  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000215d  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d61  00000000  00000000  000221f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000418  00000000  00000000  00022f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000330  00000000  00000000  00023370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035d0  00000000  00000000  000236a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d73  00000000  00000000  00026c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bade  00000000  00000000  000299e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000354c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f10  00000000  00000000  00035514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	08004d48 	.word	0x08004d48

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	08004d48 	.word	0x08004d48

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_frsub>:
 8000b0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b10:	e002      	b.n	8000b18 <__addsf3>
 8000b12:	bf00      	nop

08000b14 <__aeabi_fsub>:
 8000b14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b18 <__addsf3>:
 8000b18:	0042      	lsls	r2, r0, #1
 8000b1a:	bf1f      	itttt	ne
 8000b1c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b20:	ea92 0f03 	teqne	r2, r3
 8000b24:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b28:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2c:	d06a      	beq.n	8000c04 <__addsf3+0xec>
 8000b2e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b32:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b36:	bfc1      	itttt	gt
 8000b38:	18d2      	addgt	r2, r2, r3
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	4048      	eorgt	r0, r1
 8000b3e:	4041      	eorgt	r1, r0
 8000b40:	bfb8      	it	lt
 8000b42:	425b      	neglt	r3, r3
 8000b44:	2b19      	cmp	r3, #25
 8000b46:	bf88      	it	hi
 8000b48:	4770      	bxhi	lr
 8000b4a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b66:	bf18      	it	ne
 8000b68:	4249      	negne	r1, r1
 8000b6a:	ea92 0f03 	teq	r2, r3
 8000b6e:	d03f      	beq.n	8000bf0 <__addsf3+0xd8>
 8000b70:	f1a2 0201 	sub.w	r2, r2, #1
 8000b74:	fa41 fc03 	asr.w	ip, r1, r3
 8000b78:	eb10 000c 	adds.w	r0, r0, ip
 8000b7c:	f1c3 0320 	rsb	r3, r3, #32
 8000b80:	fa01 f103 	lsl.w	r1, r1, r3
 8000b84:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__addsf3+0x78>
 8000b8a:	4249      	negs	r1, r1
 8000b8c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b94:	d313      	bcc.n	8000bbe <__addsf3+0xa6>
 8000b96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b9a:	d306      	bcc.n	8000baa <__addsf3+0x92>
 8000b9c:	0840      	lsrs	r0, r0, #1
 8000b9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ba2:	f102 0201 	add.w	r2, r2, #1
 8000ba6:	2afe      	cmp	r2, #254	; 0xfe
 8000ba8:	d251      	bcs.n	8000c4e <__addsf3+0x136>
 8000baa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb2:	bf08      	it	eq
 8000bb4:	f020 0001 	biceq.w	r0, r0, #1
 8000bb8:	ea40 0003 	orr.w	r0, r0, r3
 8000bbc:	4770      	bx	lr
 8000bbe:	0049      	lsls	r1, r1, #1
 8000bc0:	eb40 0000 	adc.w	r0, r0, r0
 8000bc4:	3a01      	subs	r2, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bcc:	d2ed      	bcs.n	8000baa <__addsf3+0x92>
 8000bce:	fab0 fc80 	clz	ip, r0
 8000bd2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bda:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bde:	bfaa      	itet	ge
 8000be0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be4:	4252      	neglt	r2, r2
 8000be6:	4318      	orrge	r0, r3
 8000be8:	bfbc      	itt	lt
 8000bea:	40d0      	lsrlt	r0, r2
 8000bec:	4318      	orrlt	r0, r3
 8000bee:	4770      	bx	lr
 8000bf0:	f092 0f00 	teq	r2, #0
 8000bf4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf8:	bf06      	itte	eq
 8000bfa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfe:	3201      	addeq	r2, #1
 8000c00:	3b01      	subne	r3, #1
 8000c02:	e7b5      	b.n	8000b70 <__addsf3+0x58>
 8000c04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c0c:	bf18      	it	ne
 8000c0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c12:	d021      	beq.n	8000c58 <__addsf3+0x140>
 8000c14:	ea92 0f03 	teq	r2, r3
 8000c18:	d004      	beq.n	8000c24 <__addsf3+0x10c>
 8000c1a:	f092 0f00 	teq	r2, #0
 8000c1e:	bf08      	it	eq
 8000c20:	4608      	moveq	r0, r1
 8000c22:	4770      	bx	lr
 8000c24:	ea90 0f01 	teq	r0, r1
 8000c28:	bf1c      	itt	ne
 8000c2a:	2000      	movne	r0, #0
 8000c2c:	4770      	bxne	lr
 8000c2e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c32:	d104      	bne.n	8000c3e <__addsf3+0x126>
 8000c34:	0040      	lsls	r0, r0, #1
 8000c36:	bf28      	it	cs
 8000c38:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	4770      	bx	lr
 8000c3e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c42:	bf3c      	itt	cc
 8000c44:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bxcc	lr
 8000c4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c56:	4770      	bx	lr
 8000c58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c5c:	bf16      	itet	ne
 8000c5e:	4608      	movne	r0, r1
 8000c60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c64:	4601      	movne	r1, r0
 8000c66:	0242      	lsls	r2, r0, #9
 8000c68:	bf06      	itte	eq
 8000c6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6e:	ea90 0f01 	teqeq	r0, r1
 8000c72:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_ui2f>:
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	e004      	b.n	8000c88 <__aeabi_i2f+0x8>
 8000c7e:	bf00      	nop

08000c80 <__aeabi_i2f>:
 8000c80:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c84:	bf48      	it	mi
 8000c86:	4240      	negmi	r0, r0
 8000c88:	ea5f 0c00 	movs.w	ip, r0
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c94:	4601      	mov	r1, r0
 8000c96:	f04f 0000 	mov.w	r0, #0
 8000c9a:	e01c      	b.n	8000cd6 <__aeabi_l2f+0x2a>

08000c9c <__aeabi_ul2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e00a      	b.n	8000cc0 <__aeabi_l2f+0x14>
 8000caa:	bf00      	nop

08000cac <__aeabi_l2f>:
 8000cac:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb8:	d502      	bpl.n	8000cc0 <__aeabi_l2f+0x14>
 8000cba:	4240      	negs	r0, r0
 8000cbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc0:	ea5f 0c01 	movs.w	ip, r1
 8000cc4:	bf02      	ittt	eq
 8000cc6:	4684      	moveq	ip, r0
 8000cc8:	4601      	moveq	r1, r0
 8000cca:	2000      	moveq	r0, #0
 8000ccc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd0:	bf08      	it	eq
 8000cd2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cda:	fabc f28c 	clz	r2, ip
 8000cde:	3a08      	subs	r2, #8
 8000ce0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce4:	db10      	blt.n	8000d08 <__aeabi_l2f+0x5c>
 8000ce6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cea:	4463      	add	r3, ip
 8000cec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	f020 0001 	biceq.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	f102 0220 	add.w	r2, r2, #32
 8000d0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d18:	fa21 f202 	lsr.w	r2, r1, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_fmul>:
 8000d28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d30:	bf1e      	ittt	ne
 8000d32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d36:	ea92 0f0c 	teqne	r2, ip
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d06f      	beq.n	8000e20 <__aeabi_fmul+0xf8>
 8000d40:	441a      	add	r2, r3
 8000d42:	ea80 0c01 	eor.w	ip, r0, r1
 8000d46:	0240      	lsls	r0, r0, #9
 8000d48:	bf18      	it	ne
 8000d4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4e:	d01e      	beq.n	8000d8e <__aeabi_fmul+0x66>
 8000d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d64:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d68:	bf3e      	ittt	cc
 8000d6a:	0049      	lslcc	r1, r1, #1
 8000d6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d70:	005b      	lslcc	r3, r3, #1
 8000d72:	ea40 0001 	orr.w	r0, r0, r1
 8000d76:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d7a:	2afd      	cmp	r2, #253	; 0xfd
 8000d7c:	d81d      	bhi.n	8000dba <__aeabi_fmul+0x92>
 8000d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d86:	bf08      	it	eq
 8000d88:	f020 0001 	biceq.w	r0, r0, #1
 8000d8c:	4770      	bx	lr
 8000d8e:	f090 0f00 	teq	r0, #0
 8000d92:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d96:	bf08      	it	eq
 8000d98:	0249      	lsleq	r1, r1, #9
 8000d9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000da2:	3a7f      	subs	r2, #127	; 0x7f
 8000da4:	bfc2      	ittt	gt
 8000da6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000daa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dae:	4770      	bxgt	lr
 8000db0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	3a01      	subs	r2, #1
 8000dba:	dc5d      	bgt.n	8000e78 <__aeabi_fmul+0x150>
 8000dbc:	f112 0f19 	cmn.w	r2, #25
 8000dc0:	bfdc      	itt	le
 8000dc2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc6:	4770      	bxle	lr
 8000dc8:	f1c2 0200 	rsb	r2, r2, #0
 8000dcc:	0041      	lsls	r1, r0, #1
 8000dce:	fa21 f102 	lsr.w	r1, r1, r2
 8000dd2:	f1c2 0220 	rsb	r2, r2, #32
 8000dd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dde:	f140 0000 	adc.w	r0, r0, #0
 8000de2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de6:	bf08      	it	eq
 8000de8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dec:	4770      	bx	lr
 8000dee:	f092 0f00 	teq	r2, #0
 8000df2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df6:	bf02      	ittt	eq
 8000df8:	0040      	lsleq	r0, r0, #1
 8000dfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfe:	3a01      	subeq	r2, #1
 8000e00:	d0f9      	beq.n	8000df6 <__aeabi_fmul+0xce>
 8000e02:	ea40 000c 	orr.w	r0, r0, ip
 8000e06:	f093 0f00 	teq	r3, #0
 8000e0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0049      	lsleq	r1, r1, #1
 8000e12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e16:	3b01      	subeq	r3, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xe6>
 8000e1a:	ea41 010c 	orr.w	r1, r1, ip
 8000e1e:	e78f      	b.n	8000d40 <__aeabi_fmul+0x18>
 8000e20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e24:	ea92 0f0c 	teq	r2, ip
 8000e28:	bf18      	it	ne
 8000e2a:	ea93 0f0c 	teqne	r3, ip
 8000e2e:	d00a      	beq.n	8000e46 <__aeabi_fmul+0x11e>
 8000e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e34:	bf18      	it	ne
 8000e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	d1d8      	bne.n	8000dee <__aeabi_fmul+0xc6>
 8000e3c:	ea80 0001 	eor.w	r0, r0, r1
 8000e40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	bf17      	itett	ne
 8000e4c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e50:	4608      	moveq	r0, r1
 8000e52:	f091 0f00 	teqne	r1, #0
 8000e56:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e5a:	d014      	beq.n	8000e86 <__aeabi_fmul+0x15e>
 8000e5c:	ea92 0f0c 	teq	r2, ip
 8000e60:	d101      	bne.n	8000e66 <__aeabi_fmul+0x13e>
 8000e62:	0242      	lsls	r2, r0, #9
 8000e64:	d10f      	bne.n	8000e86 <__aeabi_fmul+0x15e>
 8000e66:	ea93 0f0c 	teq	r3, ip
 8000e6a:	d103      	bne.n	8000e74 <__aeabi_fmul+0x14c>
 8000e6c:	024b      	lsls	r3, r1, #9
 8000e6e:	bf18      	it	ne
 8000e70:	4608      	movne	r0, r1
 8000e72:	d108      	bne.n	8000e86 <__aeabi_fmul+0x15e>
 8000e74:	ea80 0001 	eor.w	r0, r0, r1
 8000e78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e84:	4770      	bx	lr
 8000e86:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8e:	4770      	bx	lr

08000e90 <__aeabi_fdiv>:
 8000e90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e98:	bf1e      	ittt	ne
 8000e9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9e:	ea92 0f0c 	teqne	r2, ip
 8000ea2:	ea93 0f0c 	teqne	r3, ip
 8000ea6:	d069      	beq.n	8000f7c <__aeabi_fdiv+0xec>
 8000ea8:	eba2 0203 	sub.w	r2, r2, r3
 8000eac:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb0:	0249      	lsls	r1, r1, #9
 8000eb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb6:	d037      	beq.n	8000f28 <__aeabi_fdiv+0x98>
 8000eb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ebc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	bf38      	it	cc
 8000ecc:	005b      	lslcc	r3, r3, #1
 8000ece:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ed2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	bf24      	itt	cs
 8000eda:	1a5b      	subcs	r3, r3, r1
 8000edc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee4:	bf24      	itt	cs
 8000ee6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ef2:	bf24      	itt	cs
 8000ef4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000efc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	bf18      	it	ne
 8000f0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f12:	d1e0      	bne.n	8000ed6 <__aeabi_fdiv+0x46>
 8000f14:	2afd      	cmp	r2, #253	; 0xfd
 8000f16:	f63f af50 	bhi.w	8000dba <__aeabi_fmul+0x92>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f20:	bf08      	it	eq
 8000f22:	f020 0001 	biceq.w	r0, r0, #1
 8000f26:	4770      	bx	lr
 8000f28:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f30:	327f      	adds	r2, #127	; 0x7f
 8000f32:	bfc2      	ittt	gt
 8000f34:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f3c:	4770      	bxgt	lr
 8000f3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	3a01      	subs	r2, #1
 8000f48:	e737      	b.n	8000dba <__aeabi_fmul+0x92>
 8000f4a:	f092 0f00 	teq	r2, #0
 8000f4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f52:	bf02      	ittt	eq
 8000f54:	0040      	lsleq	r0, r0, #1
 8000f56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f5a:	3a01      	subeq	r2, #1
 8000f5c:	d0f9      	beq.n	8000f52 <__aeabi_fdiv+0xc2>
 8000f5e:	ea40 000c 	orr.w	r0, r0, ip
 8000f62:	f093 0f00 	teq	r3, #0
 8000f66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0049      	lsleq	r1, r1, #1
 8000f6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f72:	3b01      	subeq	r3, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xda>
 8000f76:	ea41 010c 	orr.w	r1, r1, ip
 8000f7a:	e795      	b.n	8000ea8 <__aeabi_fdiv+0x18>
 8000f7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f80:	ea92 0f0c 	teq	r2, ip
 8000f84:	d108      	bne.n	8000f98 <__aeabi_fdiv+0x108>
 8000f86:	0242      	lsls	r2, r0, #9
 8000f88:	f47f af7d 	bne.w	8000e86 <__aeabi_fmul+0x15e>
 8000f8c:	ea93 0f0c 	teq	r3, ip
 8000f90:	f47f af70 	bne.w	8000e74 <__aeabi_fmul+0x14c>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e776      	b.n	8000e86 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	d104      	bne.n	8000fa8 <__aeabi_fdiv+0x118>
 8000f9e:	024b      	lsls	r3, r1, #9
 8000fa0:	f43f af4c 	beq.w	8000e3c <__aeabi_fmul+0x114>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e76e      	b.n	8000e86 <__aeabi_fmul+0x15e>
 8000fa8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fac:	bf18      	it	ne
 8000fae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fb2:	d1ca      	bne.n	8000f4a <__aeabi_fdiv+0xba>
 8000fb4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb8:	f47f af5c 	bne.w	8000e74 <__aeabi_fmul+0x14c>
 8000fbc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fc0:	f47f af3c 	bne.w	8000e3c <__aeabi_fmul+0x114>
 8000fc4:	e75f      	b.n	8000e86 <__aeabi_fmul+0x15e>
 8000fc6:	bf00      	nop

08000fc8 <__gesf2>:
 8000fc8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fcc:	e006      	b.n	8000fdc <__cmpsf2+0x4>
 8000fce:	bf00      	nop

08000fd0 <__lesf2>:
 8000fd0:	f04f 0c01 	mov.w	ip, #1
 8000fd4:	e002      	b.n	8000fdc <__cmpsf2+0x4>
 8000fd6:	bf00      	nop

08000fd8 <__cmpsf2>:
 8000fd8:	f04f 0c01 	mov.w	ip, #1
 8000fdc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fec:	bf18      	it	ne
 8000fee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ff2:	d011      	beq.n	8001018 <__cmpsf2+0x40>
 8000ff4:	b001      	add	sp, #4
 8000ff6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ffa:	bf18      	it	ne
 8000ffc:	ea90 0f01 	teqne	r0, r1
 8001000:	bf58      	it	pl
 8001002:	ebb2 0003 	subspl.w	r0, r2, r3
 8001006:	bf88      	it	hi
 8001008:	17c8      	asrhi	r0, r1, #31
 800100a:	bf38      	it	cc
 800100c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001010:	bf18      	it	ne
 8001012:	f040 0001 	orrne.w	r0, r0, #1
 8001016:	4770      	bx	lr
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	d102      	bne.n	8001024 <__cmpsf2+0x4c>
 800101e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001022:	d105      	bne.n	8001030 <__cmpsf2+0x58>
 8001024:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001028:	d1e4      	bne.n	8000ff4 <__cmpsf2+0x1c>
 800102a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102e:	d0e1      	beq.n	8000ff4 <__cmpsf2+0x1c>
 8001030:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <__aeabi_cfrcmple>:
 8001038:	4684      	mov	ip, r0
 800103a:	4608      	mov	r0, r1
 800103c:	4661      	mov	r1, ip
 800103e:	e7ff      	b.n	8001040 <__aeabi_cfcmpeq>

08001040 <__aeabi_cfcmpeq>:
 8001040:	b50f      	push	{r0, r1, r2, r3, lr}
 8001042:	f7ff ffc9 	bl	8000fd8 <__cmpsf2>
 8001046:	2800      	cmp	r0, #0
 8001048:	bf48      	it	mi
 800104a:	f110 0f00 	cmnmi.w	r0, #0
 800104e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001050 <__aeabi_fcmpeq>:
 8001050:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001054:	f7ff fff4 	bl	8001040 <__aeabi_cfcmpeq>
 8001058:	bf0c      	ite	eq
 800105a:	2001      	moveq	r0, #1
 800105c:	2000      	movne	r0, #0
 800105e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001062:	bf00      	nop

08001064 <__aeabi_fcmplt>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff ffea 	bl	8001040 <__aeabi_cfcmpeq>
 800106c:	bf34      	ite	cc
 800106e:	2001      	movcc	r0, #1
 8001070:	2000      	movcs	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmple>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffe0 	bl	8001040 <__aeabi_cfcmpeq>
 8001080:	bf94      	ite	ls
 8001082:	2001      	movls	r0, #1
 8001084:	2000      	movhi	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmpge>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffd2 	bl	8001038 <__aeabi_cfrcmple>
 8001094:	bf94      	ite	ls
 8001096:	2001      	movls	r0, #1
 8001098:	2000      	movhi	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpgt>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffc8 	bl	8001038 <__aeabi_cfrcmple>
 80010a8:	bf34      	ite	cc
 80010aa:	2001      	movcc	r0, #1
 80010ac:	2000      	movcs	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <MADC1_voidInit>:

//u16 arr[2] = {0,0};
//u16 arr[NumOfSequences] ;

void MADC1_voidInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	/* Enable interrupt at the end of conversion */
	//SET_BIT(ADC1 -> CR1 , 5);
	
	/* Enable scan mode */
	SET_BIT(ADC1 -> CR1 , 8);
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MADC1_voidInit+0x2c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <MADC1_voidInit+0x2c>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6053      	str	r3, [r2, #4]
	
	/* Regular channel sequence length (# of channels) */
	ADC1->SQR1 |= ((NumOfSequences - 1) << 20);
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MADC1_voidInit+0x2c>)
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <MADC1_voidInit+0x2c>)
 80010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ca:	62d3      	str	r3, [r2, #44]	; 0x2c
	
	/* Continous conversion mode */
	SET_BIT(ADC1 -> CR2 , 1);
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <MADC1_voidInit+0x2c>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	4a03      	ldr	r2, [pc, #12]	; (80010e0 <MADC1_voidInit+0x2c>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	6093      	str	r3, [r2, #8]
	
	/* Enable DMA mode */
	//SET_BIT(ADC1 -> CR2 , 8);
	
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40012400 	.word	0x40012400

080010e4 <MADC1_voidStartConversion>:


void MADC1_voidStartConversion(u8 Copy_u8ChannelID , u8 Copy_u8SeqID)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	460a      	mov	r2, r1
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	4613      	mov	r3, r2
 80010f2:	71bb      	strb	r3, [r7, #6]
	/* Sampling time */
	ADC1->SMPR2 |= ((SamplingTimeValue) << (Copy_u8ChannelID * 3));
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MADC1_voidStartConversion+0x90>)
 80010f6:	6919      	ldr	r1, [r3, #16]
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	2207      	movs	r2, #7
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <MADC1_voidStartConversion+0x90>)
 8001108:	430b      	orrs	r3, r1
 800110a:	6113      	str	r3, [r2, #16]
	/* order of channels conversions */
	ADC1->SQR3 |= ((Copy_u8ChannelID) << ((Copy_u8SeqID - 1) * 5));
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MADC1_voidStartConversion+0x90>)
 800110e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001110:	79f8      	ldrb	r0, [r7, #7]
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	1e5a      	subs	r2, r3, #1
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	fa00 f303 	lsl.w	r3, r0, r3
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <MADC1_voidStartConversion+0x90>)
 8001122:	430b      	orrs	r3, r1
 8001124:	6353      	str	r3, [r2, #52]	; 0x34
	
	//MDMA_voidChannel1Start(&(ADC1->DR), arr , NumOfSequences);
	
	/* Enable ADC1 */
	SET_BIT(ADC1 -> CR2 , 0);
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MADC1_voidStartConversion+0x90>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MADC1_voidStartConversion+0x90>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6093      	str	r3, [r2, #8]
	MSTK_voidSetBusyWait(1000);
 8001132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001136:	f000 fd29 	bl	8001b8c <MSTK_voidSetBusyWait>
	SET_BIT(ADC1 -> CR2 , 0);
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MADC1_voidStartConversion+0x90>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <MADC1_voidStartConversion+0x90>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6093      	str	r3, [r2, #8]
	MSTK_voidSetBusyWait(1000);
 8001146:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114a:	f000 fd1f 	bl	8001b8c <MSTK_voidSetBusyWait>
	/* Reset calibration */
	//SET_BIT(ADC1 -> CR2 , 3);
	//while((GET_BIT(ADC->CR2 , 3)) == 1);
	
	/* Enable calibration */
	SET_BIT(ADC1 -> CR2 , 2);
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MADC1_voidStartConversion+0x90>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <MADC1_voidStartConversion+0x90>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6093      	str	r3, [r2, #8]
	while((GET_BIT(ADC1->CR2 , 2)) == 1);
 800115a:	bf00      	nop
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <MADC1_voidStartConversion+0x90>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b01      	cmp	r3, #1
 8001168:	d0f8      	beq.n	800115c <MADC1_voidStartConversion+0x78>
	
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40012400 	.word	0x40012400

08001178 <MADC1_u16ReadValue>:
//{
//	ADC1_GlobalPtr = ptr;
//}

u16 MADC1_u16ReadValue(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
    return (ADC1 -> DR);
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <MADC1_u16ReadValue+0x14>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	b29b      	uxth	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40012400 	.word	0x40012400

08001190 <MAFIO_voidSetEXTIConfiguration>:
#include "AFIO/AFIO_config.h"
#include "AFIO/AFIO_private.h"


void	MAFIO_voidSetEXTIConfiguration(u8 Copy_u8EXTILine ,u8 Copy_u8PortMap)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8RegIndex = 0 ;		
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
	/* Assign to EXTICRX register									*/
	if(Copy_u8EXTILine <= 3 )
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d802      	bhi.n	80011b0 <MAFIO_voidSetEXTIConfiguration+0x20>
	{
			Local_u8RegIndex = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	e019      	b.n	80011e4 <MAFIO_voidSetEXTIConfiguration+0x54>
	}
	else if(Copy_u8EXTILine <= 7)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	d805      	bhi.n	80011c2 <MAFIO_voidSetEXTIConfiguration+0x32>
	{	
		Local_u8RegIndex = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	73fb      	strb	r3, [r7, #15]
		
		/*bit0 to bit3 not 4 to 7*/
		Copy_u8EXTILine -= 4;
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	3b04      	subs	r3, #4
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	e010      	b.n	80011e4 <MAFIO_voidSetEXTIConfiguration+0x54>
	}
	else if(Copy_u8EXTILine <= 11)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b0b      	cmp	r3, #11
 80011c6:	d805      	bhi.n	80011d4 <MAFIO_voidSetEXTIConfiguration+0x44>
	{
		Local_u8RegIndex = 2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	73fb      	strb	r3, [r7, #15]
		/*4bits from 0 to 3*/
		Copy_u8EXTILine -= 8;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	3b08      	subs	r3, #8
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	e007      	b.n	80011e4 <MAFIO_voidSetEXTIConfiguration+0x54>
	
	}
	else if(Copy_u8EXTILine <= 15)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	d804      	bhi.n	80011e4 <MAFIO_voidSetEXTIConfiguration+0x54>
	{
		Local_u8RegIndex = 3;
 80011da:	2303      	movs	r3, #3
 80011dc:	73fb      	strb	r3, [r7, #15]
		/*4bits from 0 to 3*/
		Copy_u8EXTILine -= 12;
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	3b0c      	subs	r3, #12
 80011e2:	71fb      	strb	r3, [r7, #7]
	}

	/*reset first --> (avoiding overwrite)*/
	AFIO->EXTICR[Local_u8RegIndex] &= ~((0b1111) << (Copy_u8EXTILine * 4));
 80011e4:	4a13      	ldr	r2, [pc, #76]	; (8001234 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	210f      	movs	r1, #15
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	490d      	ldr	r1, [pc, #52]	; (8001234 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	4002      	ands	r2, r0
 8001202:	3302      	adds	r3, #2
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	
	/*set*/
	AFIO->EXTICR[Local_u8RegIndex]  |= ((Copy_u8PortMap) << (Copy_u8EXTILine * 4));	
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	3302      	adds	r3, #2
 800120e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001212:	79b9      	ldrb	r1, [r7, #6]
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4618      	mov	r0, r3
 800121e:	4905      	ldr	r1, [pc, #20]	; (8001234 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	4302      	orrs	r2, r0
 8001224:	3302      	adds	r3, #2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40010000 	.word	0x40010000

08001238 <MGPIO_VoidSetPinDirection>:
#include "DIO/DIO_interface.h"
#include "DIO/DIO_private.h"
#include "DIO/DIO_config.h"

void MGPIO_VoidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	460b      	mov	r3, r1
 8001244:	71bb      	strb	r3, [r7, #6]
 8001246:	4613      	mov	r3, r2
 8001248:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d07a      	beq.n	8001346 <MGPIO_VoidSetPinDirection+0x10e>
 8001250:	2b02      	cmp	r3, #2
 8001252:	f300 80b6 	bgt.w	80013c2 <MGPIO_VoidSetPinDirection+0x18a>
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <MGPIO_VoidSetPinDirection+0x28>
 800125a:	2b01      	cmp	r3, #1
 800125c:	d03a      	beq.n	80012d4 <MGPIO_VoidSetPinDirection+0x9c>
		}
		
		break;

	}
}
 800125e:	e0b0      	b.n	80013c2 <MGPIO_VoidSetPinDirection+0x18a>
		if(Copy_u8Pin <= 7 )
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	2b07      	cmp	r3, #7
 8001264:	d817      	bhi.n	8001296 <MGPIO_VoidSetPinDirection+0x5e>
			GPIOA_CRL &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ));  /*Reset or clear pin (4bits)*/
 8001266:	4b59      	ldr	r3, [pc, #356]	; (80013cc <MGPIO_VoidSetPinDirection+0x194>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	79ba      	ldrb	r2, [r7, #6]
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	210f      	movs	r1, #15
 8001270:	fa01 f202 	lsl.w	r2, r1, r2
 8001274:	43d2      	mvns	r2, r2
 8001276:	4611      	mov	r1, r2
 8001278:	4a54      	ldr	r2, [pc, #336]	; (80013cc <MGPIO_VoidSetPinDirection+0x194>)
 800127a:	400b      	ands	r3, r1
 800127c:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 );   /*apply mode on pin (interface file)*/
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <MGPIO_VoidSetPinDirection+0x194>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	7979      	ldrb	r1, [r7, #5]
 8001284:	79ba      	ldrb	r2, [r7, #6]
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	4611      	mov	r1, r2
 800128e:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <MGPIO_VoidSetPinDirection+0x194>)
 8001290:	430b      	orrs	r3, r1
 8001292:	6013      	str	r3, [r2, #0]
		break;
 8001294:	e090      	b.n	80013b8 <MGPIO_VoidSetPinDirection+0x180>
		else if(Copy_u8Pin <= 15 )
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	f200 808d 	bhi.w	80013b8 <MGPIO_VoidSetPinDirection+0x180>
			Copy_u8Pin = Copy_u8Pin - 8;
 800129e:	79bb      	ldrb	r3, [r7, #6]
 80012a0:	3b08      	subs	r3, #8
 80012a2:	71bb      	strb	r3, [r7, #6]
			GPIOA_CRH &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );
 80012a4:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <MGPIO_VoidSetPinDirection+0x198>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	210f      	movs	r1, #15
 80012ae:	fa01 f202 	lsl.w	r2, r1, r2
 80012b2:	43d2      	mvns	r2, r2
 80012b4:	4611      	mov	r1, r2
 80012b6:	4a46      	ldr	r2, [pc, #280]	; (80013d0 <MGPIO_VoidSetPinDirection+0x198>)
 80012b8:	400b      	ands	r3, r1
 80012ba:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80012bc:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <MGPIO_VoidSetPinDirection+0x198>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	7979      	ldrb	r1, [r7, #5]
 80012c2:	79ba      	ldrb	r2, [r7, #6]
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	4611      	mov	r1, r2
 80012cc:	4a40      	ldr	r2, [pc, #256]	; (80013d0 <MGPIO_VoidSetPinDirection+0x198>)
 80012ce:	430b      	orrs	r3, r1
 80012d0:	6013      	str	r3, [r2, #0]
		break;
 80012d2:	e071      	b.n	80013b8 <MGPIO_VoidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 )
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	2b07      	cmp	r3, #7
 80012d8:	d817      	bhi.n	800130a <MGPIO_VoidSetPinDirection+0xd2>
			GPIOB_CRL &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );    /*Reset or clear pin*/
 80012da:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <MGPIO_VoidSetPinDirection+0x19c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	79ba      	ldrb	r2, [r7, #6]
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	210f      	movs	r1, #15
 80012e4:	fa01 f202 	lsl.w	r2, r1, r2
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	4611      	mov	r1, r2
 80012ec:	4a39      	ldr	r2, [pc, #228]	; (80013d4 <MGPIO_VoidSetPinDirection+0x19c>)
 80012ee:	400b      	ands	r3, r1
 80012f0:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;    /*apply mode on pin*/
 80012f2:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <MGPIO_VoidSetPinDirection+0x19c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	7979      	ldrb	r1, [r7, #5]
 80012f8:	79ba      	ldrb	r2, [r7, #6]
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	4611      	mov	r1, r2
 8001302:	4a34      	ldr	r2, [pc, #208]	; (80013d4 <MGPIO_VoidSetPinDirection+0x19c>)
 8001304:	430b      	orrs	r3, r1
 8001306:	6013      	str	r3, [r2, #0]
		break;
 8001308:	e058      	b.n	80013bc <MGPIO_VoidSetPinDirection+0x184>
		else if(Copy_u8Pin <= 15 )
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d855      	bhi.n	80013bc <MGPIO_VoidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	3b08      	subs	r3, #8
 8001314:	71bb      	strb	r3, [r7, #6]
			GPIOB_CRH &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );
 8001316:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <MGPIO_VoidSetPinDirection+0x1a0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	79ba      	ldrb	r2, [r7, #6]
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	210f      	movs	r1, #15
 8001320:	fa01 f202 	lsl.w	r2, r1, r2
 8001324:	43d2      	mvns	r2, r2
 8001326:	4611      	mov	r1, r2
 8001328:	4a2b      	ldr	r2, [pc, #172]	; (80013d8 <MGPIO_VoidSetPinDirection+0x1a0>)
 800132a:	400b      	ands	r3, r1
 800132c:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <MGPIO_VoidSetPinDirection+0x1a0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	7979      	ldrb	r1, [r7, #5]
 8001334:	79ba      	ldrb	r2, [r7, #6]
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	4611      	mov	r1, r2
 800133e:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <MGPIO_VoidSetPinDirection+0x1a0>)
 8001340:	430b      	orrs	r3, r1
 8001342:	6013      	str	r3, [r2, #0]
		break;
 8001344:	e03a      	b.n	80013bc <MGPIO_VoidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 )
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	2b07      	cmp	r3, #7
 800134a:	d817      	bhi.n	800137c <MGPIO_VoidSetPinDirection+0x144>
			GPIOC_CRL &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );// R M W
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MGPIO_VoidSetPinDirection+0x1a4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	79ba      	ldrb	r2, [r7, #6]
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	210f      	movs	r1, #15
 8001356:	fa01 f202 	lsl.w	r2, r1, r2
 800135a:	43d2      	mvns	r2, r2
 800135c:	4611      	mov	r1, r2
 800135e:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <MGPIO_VoidSetPinDirection+0x1a4>)
 8001360:	400b      	ands	r3, r1
 8001362:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MGPIO_VoidSetPinDirection+0x1a4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	7979      	ldrb	r1, [r7, #5]
 800136a:	79ba      	ldrb	r2, [r7, #6]
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	fa01 f202 	lsl.w	r2, r1, r2
 8001372:	4611      	mov	r1, r2
 8001374:	4a19      	ldr	r2, [pc, #100]	; (80013dc <MGPIO_VoidSetPinDirection+0x1a4>)
 8001376:	430b      	orrs	r3, r1
 8001378:	6013      	str	r3, [r2, #0]
		break;
 800137a:	e021      	b.n	80013c0 <MGPIO_VoidSetPinDirection+0x188>
		else if(Copy_u8Pin <= 15 )
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	d81e      	bhi.n	80013c0 <MGPIO_VoidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	3b08      	subs	r3, #8
 8001386:	71bb      	strb	r3, [r7, #6]
			GPIOC_CRH &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MGPIO_VoidSetPinDirection+0x1a8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	79ba      	ldrb	r2, [r7, #6]
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	210f      	movs	r1, #15
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	43d2      	mvns	r2, r2
 8001398:	4611      	mov	r1, r2
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <MGPIO_VoidSetPinDirection+0x1a8>)
 800139c:	400b      	ands	r3, r1
 800139e:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MGPIO_VoidSetPinDirection+0x1a8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	7979      	ldrb	r1, [r7, #5]
 80013a6:	79ba      	ldrb	r2, [r7, #6]
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	4611      	mov	r1, r2
 80013b0:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <MGPIO_VoidSetPinDirection+0x1a8>)
 80013b2:	430b      	orrs	r3, r1
 80013b4:	6013      	str	r3, [r2, #0]
		break;
 80013b6:	e003      	b.n	80013c0 <MGPIO_VoidSetPinDirection+0x188>
		break;
 80013b8:	bf00      	nop
 80013ba:	e002      	b.n	80013c2 <MGPIO_VoidSetPinDirection+0x18a>
		break;
 80013bc:	bf00      	nop
 80013be:	e000      	b.n	80013c2 <MGPIO_VoidSetPinDirection+0x18a>
		break;
 80013c0:	bf00      	nop
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	40010800 	.word	0x40010800
 80013d0:	40010804 	.word	0x40010804
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	40010c04 	.word	0x40010c04
 80013dc:	40011000 	.word	0x40011000
 80013e0:	40011004 	.word	0x40011004

080013e4 <MGPIO_VoidSetPinValue>:


void MGPIO_VoidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	460b      	mov	r3, r1
 80013f0:	71bb      	strb	r3, [r7, #6]
 80013f2:	4613      	mov	r3, r2
 80013f4:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d02a      	beq.n	8001452 <MGPIO_VoidSetPinValue+0x6e>
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	dc3f      	bgt.n	8001480 <MGPIO_VoidSetPinValue+0x9c>
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <MGPIO_VoidSetPinValue+0x26>
 8001404:	2b01      	cmp	r3, #1
 8001406:	d012      	beq.n	800142e <MGPIO_VoidSetPinValue+0x4a>
			GPIOC_BRR = (1 << Copy_u8Pin);
		}
		break;

	}
}
 8001408:	e03a      	b.n	8001480 <MGPIO_VoidSetPinValue+0x9c>
		if( Copy_u8Value == HIGH )
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <MGPIO_VoidSetPinValue+0x38>
			GPIOA_BSRR = (1 << Copy_u8Pin);     /*speed up -- 0 has no effect*/
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	2201      	movs	r2, #1
 8001414:	409a      	lsls	r2, r3
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <MGPIO_VoidSetPinValue+0xa8>)
 8001418:	601a      	str	r2, [r3, #0]
		break;
 800141a:	e02c      	b.n	8001476 <MGPIO_VoidSetPinValue+0x92>
		else if( Copy_u8Value == LOW )
 800141c:	797b      	ldrb	r3, [r7, #5]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d129      	bne.n	8001476 <MGPIO_VoidSetPinValue+0x92>
			GPIOA_BRR = (1 << Copy_u8Pin);    /*speed up*/
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	2201      	movs	r2, #1
 8001426:	409a      	lsls	r2, r3
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MGPIO_VoidSetPinValue+0xac>)
 800142a:	601a      	str	r2, [r3, #0]
		break;
 800142c:	e023      	b.n	8001476 <MGPIO_VoidSetPinValue+0x92>
		if( Copy_u8Value == HIGH )
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <MGPIO_VoidSetPinValue+0x5c>
			GPIOB_BSRR = (1 << Copy_u8Pin);
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	2201      	movs	r2, #1
 8001438:	409a      	lsls	r2, r3
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MGPIO_VoidSetPinValue+0xb0>)
 800143c:	601a      	str	r2, [r3, #0]
		break;
 800143e:	e01c      	b.n	800147a <MGPIO_VoidSetPinValue+0x96>
		else if( Copy_u8Value == LOW )
 8001440:	797b      	ldrb	r3, [r7, #5]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d119      	bne.n	800147a <MGPIO_VoidSetPinValue+0x96>
			GPIOB_BRR = (1 << Copy_u8Pin);
 8001446:	79bb      	ldrb	r3, [r7, #6]
 8001448:	2201      	movs	r2, #1
 800144a:	409a      	lsls	r2, r3
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MGPIO_VoidSetPinValue+0xb4>)
 800144e:	601a      	str	r2, [r3, #0]
		break;
 8001450:	e013      	b.n	800147a <MGPIO_VoidSetPinValue+0x96>
		if( Copy_u8Value == HIGH )
 8001452:	797b      	ldrb	r3, [r7, #5]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <MGPIO_VoidSetPinValue+0x80>
			GPIOC_BSRR = (1 << Copy_u8Pin);
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2201      	movs	r2, #1
 800145c:	409a      	lsls	r2, r3
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MGPIO_VoidSetPinValue+0xb8>)
 8001460:	601a      	str	r2, [r3, #0]
		break;
 8001462:	e00c      	b.n	800147e <MGPIO_VoidSetPinValue+0x9a>
		else if( Copy_u8Value == LOW )
 8001464:	797b      	ldrb	r3, [r7, #5]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <MGPIO_VoidSetPinValue+0x9a>
			GPIOC_BRR = (1 << Copy_u8Pin);
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	2201      	movs	r2, #1
 800146e:	409a      	lsls	r2, r3
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MGPIO_VoidSetPinValue+0xbc>)
 8001472:	601a      	str	r2, [r3, #0]
		break;
 8001474:	e003      	b.n	800147e <MGPIO_VoidSetPinValue+0x9a>
		break;
 8001476:	bf00      	nop
 8001478:	e002      	b.n	8001480 <MGPIO_VoidSetPinValue+0x9c>
		break;
 800147a:	bf00      	nop
 800147c:	e000      	b.n	8001480 <MGPIO_VoidSetPinValue+0x9c>
		break;
 800147e:	bf00      	nop
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40010810 	.word	0x40010810
 8001490:	40010814 	.word	0x40010814
 8001494:	40010c10 	.word	0x40010c10
 8001498:	40010c14 	.word	0x40010c14
 800149c:	40011010 	.word	0x40011010
 80014a0:	40011014 	.word	0x40011014

080014a4 <MGPIO_u8GetPinValue>:


u8 MGPIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	460a      	mov	r2, r1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Result = 0 ;   //return value
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]

	switch(Copy_u8Port)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d01a      	beq.n	80014f4 <MGPIO_u8GetPinValue+0x50>
 80014be:	2b02      	cmp	r3, #2
 80014c0:	dc22      	bgt.n	8001508 <MGPIO_u8GetPinValue+0x64>
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <MGPIO_u8GetPinValue+0x28>
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d00a      	beq.n	80014e0 <MGPIO_u8GetPinValue+0x3c>
 80014ca:	e01d      	b.n	8001508 <MGPIO_u8GetPinValue+0x64>
	{
	/*get input data*/
	case GPIOA:
		LOC_u8Result = GET_BIT( GPIOA_IDR , Copy_u8Pin );
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MGPIO_u8GetPinValue+0x70>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	fa22 f303 	lsr.w	r3, r2, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
		break;
 80014de:	e013      	b.n	8001508 <MGPIO_u8GetPinValue+0x64>
		
	case GPIOB:
		LOC_u8Result = GET_BIT( GPIOB_IDR , Copy_u8Pin );
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <MGPIO_u8GetPinValue+0x74>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
		break;
 80014f2:	e009      	b.n	8001508 <MGPIO_u8GetPinValue+0x64>
		
	case GPIOC:
		LOC_u8Result = GET_BIT( GPIOC_IDR , Copy_u8Pin );
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MGPIO_u8GetPinValue+0x78>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	fa22 f303 	lsr.w	r3, r2, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
		break;
 8001506:	bf00      	nop
	}
	
	return LOC_u8Result;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40010808 	.word	0x40010808
 8001518:	40010c08 	.word	0x40010c08
 800151c:	40011008 	.word	0x40011008

08001520 <MEXTI_voidInit>:
#include "EXTI/EXTI_private.h"



void MEXTI_voidInit()
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	#if 	EXTI_MODE	== 	RISING
		SET_BIT(EXTI -> RTSR , EXTI_LINE);
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <MEXTI_voidInit+0x24>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <MEXTI_voidInit+0x24>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6093      	str	r3, [r2, #8]
	#else 	
		#error "Wrong Mode"
	#endif
	
	/*Disable interrupt*/
	CLR_BIT(EXTI -> IMR , EXTI_LINE);
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <MEXTI_voidInit+0x24>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <MEXTI_voidInit+0x24>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40010400 	.word	0x40010400

08001548 <MEXTI_voidSetSignalLatch>:
}

 
             /*changing mode & line in run time*/
void MEXTI_voidSetSignalLatch(u8 Copy_u8EXTILine , u8 Copy_u8EXTIMode)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	460a      	mov	r2, r1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8EXTIMode)
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d01c      	beq.n	8001598 <MEXTI_voidSetSignalLatch+0x50>
 800155e:	2b02      	cmp	r3, #2
 8001560:	dc2f      	bgt.n	80015c2 <MEXTI_voidSetSignalLatch+0x7a>
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <MEXTI_voidSetSignalLatch+0x24>
 8001566:	2b01      	cmp	r3, #1
 8001568:	d00b      	beq.n	8001582 <MEXTI_voidSetSignalLatch+0x3a>
 800156a:	e02a      	b.n	80015c2 <MEXTI_voidSetSignalLatch+0x7a>
	{
		case RISING :
			SET_BIT(EXTI -> RTSR , Copy_u8EXTILine);
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MEXTI_voidSetSignalLatch+0x98>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	79fa      	ldrb	r2, [r7, #7]
 8001572:	2101      	movs	r1, #1
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	4611      	mov	r1, r2
 800157a:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <MEXTI_voidSetSignalLatch+0x98>)
 800157c:	430b      	orrs	r3, r1
 800157e:	6093      	str	r3, [r2, #8]
			break;
 8001580:	e01f      	b.n	80015c2 <MEXTI_voidSetSignalLatch+0x7a>
		
		case FALLING :
			SET_BIT(EXTI -> FTSR , Copy_u8EXTILine); 	
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MEXTI_voidSetSignalLatch+0x98>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f202 	lsl.w	r2, r1, r2
 800158e:	4611      	mov	r1, r2
 8001590:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <MEXTI_voidSetSignalLatch+0x98>)
 8001592:	430b      	orrs	r3, r1
 8001594:	60d3      	str	r3, [r2, #12]
			break;
 8001596:	e014      	b.n	80015c2 <MEXTI_voidSetSignalLatch+0x7a>
		
		case ON_CHANGE :
			SET_BIT(EXTI -> RTSR , Copy_u8EXTILine);
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MEXTI_voidSetSignalLatch+0x98>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	79fa      	ldrb	r2, [r7, #7]
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	4611      	mov	r1, r2
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <MEXTI_voidSetSignalLatch+0x98>)
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI -> FTSR , Copy_u8EXTILine); 	
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MEXTI_voidSetSignalLatch+0x98>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	2101      	movs	r1, #1
 80015b4:	fa01 f202 	lsl.w	r2, r1, r2
 80015b8:	4611      	mov	r1, r2
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <MEXTI_voidSetSignalLatch+0x98>)
 80015bc:	430b      	orrs	r3, r1
 80015be:	60d3      	str	r3, [r2, #12]
			break;
 80015c0:	bf00      	nop
	}
	SET_BIT(EXTI -> IMR , Copy_u8EXTILine);
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <MEXTI_voidSetSignalLatch+0x98>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa01 f202 	lsl.w	r2, r1, r2
 80015ce:	4611      	mov	r1, r2
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <MEXTI_voidSetSignalLatch+0x98>)
 80015d2:	430b      	orrs	r3, r1
 80015d4:	6013      	str	r3, [r2, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40010400 	.word	0x40010400

080015e4 <EXTI_voidSetCallBack>:


void EXTI_voidSetCallBack(void (*ptr) (void) , u8 Copy_u8EXTILine)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
	EXTI_GlobalPtr[Copy_u8EXTILine] = ptr;
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	4904      	ldr	r1, [pc, #16]	; (8001604 <EXTI_voidSetCallBack+0x20>)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	20000088 	.word	0x20000088

08001608 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[0]();
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <EXTI0_IRQHandler+0x1c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 0);
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <EXTI0_IRQHandler+0x20>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <EXTI0_IRQHandler+0x20>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6153      	str	r3, [r2, #20]
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000088 	.word	0x20000088
 8001628:	40010400 	.word	0x40010400

0800162c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[1]();
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <EXTI1_IRQHandler+0x1c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 1);
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <EXTI1_IRQHandler+0x20>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <EXTI1_IRQHandler+0x20>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6153      	str	r3, [r2, #20]
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000088 	.word	0x20000088
 800164c:	40010400 	.word	0x40010400

08001650 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[2]();
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <EXTI2_IRQHandler+0x1c>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 2);
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <EXTI2_IRQHandler+0x20>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <EXTI2_IRQHandler+0x20>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6153      	str	r3, [r2, #20]
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000088 	.word	0x20000088
 8001670:	40010400 	.word	0x40010400

08001674 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[3]();
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <EXTI3_IRQHandler+0x1c>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 3);
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <EXTI3_IRQHandler+0x20>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <EXTI3_IRQHandler+0x20>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6153      	str	r3, [r2, #20]
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000088 	.word	0x20000088
 8001694:	40010400 	.word	0x40010400

08001698 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[4]();
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <EXTI4_IRQHandler+0x1c>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 4);
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <EXTI4_IRQHandler+0x20>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <EXTI4_IRQHandler+0x20>)
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	6153      	str	r3, [r2, #20]
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000088 	.word	0x20000088
 80016b8:	40010400 	.word	0x40010400

080016bc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	u8 PinValue_5 , PinValue_6 , PinValue_7 , PinValue_8 , PinValue_9;

	PinValue_5 = GET_BIT(EXTI->PR,5);
 80016c2:	4b31      	ldr	r3, [pc, #196]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	71fb      	strb	r3, [r7, #7]
	PinValue_6 = GET_BIT(EXTI->PR,6);
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	71bb      	strb	r3, [r7, #6]
	PinValue_7 = GET_BIT(EXTI->PR,7);
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	09db      	lsrs	r3, r3, #7
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	717b      	strb	r3, [r7, #5]
	PinValue_8 = GET_BIT(EXTI->PR,8);
 80016ec:	4b26      	ldr	r3, [pc, #152]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	713b      	strb	r3, [r7, #4]
	PinValue_9 = GET_BIT(EXTI->PR,9);
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	0a5b      	lsrs	r3, r3, #9
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	70fb      	strb	r3, [r7, #3]

	if (PinValue_5 == 1)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <EXTI9_5_IRQHandler+0x64>
	{
		EXTI_GlobalPtr[5]();
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <EXTI9_5_IRQHandler+0xd0>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 5);
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 800171a:	f043 0320 	orr.w	r3, r3, #32
 800171e:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_6 == 1)
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI_GlobalPtr[6]();
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <EXTI9_5_IRQHandler+0xd0>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 6);
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	4a15      	ldr	r2, [pc, #84]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 8001732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001736:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_7 == 1)
 8001738:	797b      	ldrb	r3, [r7, #5]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <EXTI9_5_IRQHandler+0x94>
	{
		EXTI_GlobalPtr[7]();
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <EXTI9_5_IRQHandler+0xd0>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 7);
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 800174a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174e:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_8 == 1)
 8001750:	793b      	ldrb	r3, [r7, #4]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <EXTI9_5_IRQHandler+0xac>
	{
		EXTI_GlobalPtr[8]();
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <EXTI9_5_IRQHandler+0xd0>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 8);
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	4a09      	ldr	r2, [pc, #36]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_9 == 1)
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <EXTI9_5_IRQHandler+0xc4>
	{
		EXTI_GlobalPtr[9]();
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <EXTI9_5_IRQHandler+0xd0>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 9);
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	4a03      	ldr	r2, [pc, #12]	; (8001788 <EXTI9_5_IRQHandler+0xcc>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6153      	str	r3, [r2, #20]
	}

}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40010400 	.word	0x40010400
 800178c:	20000088 	.word	0x20000088

08001790 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	u8 PinValue_10 , PinValue_11 , PinValue_12 , PinValue_13 , PinValue_14 , PinValue_15;

	PinValue_10 = GET_BIT(EXTI->PR,10);
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	0a9b      	lsrs	r3, r3, #10
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	71fb      	strb	r3, [r7, #7]
	PinValue_11 = GET_BIT(EXTI->PR,11);
 80017a4:	4b37      	ldr	r3, [pc, #220]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	0adb      	lsrs	r3, r3, #11
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	71bb      	strb	r3, [r7, #6]
	PinValue_12 = GET_BIT(EXTI->PR,12);
 80017b2:	4b34      	ldr	r3, [pc, #208]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	0b1b      	lsrs	r3, r3, #12
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	717b      	strb	r3, [r7, #5]
	PinValue_13 = GET_BIT(EXTI->PR,13);
 80017c0:	4b30      	ldr	r3, [pc, #192]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	0b5b      	lsrs	r3, r3, #13
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	713b      	strb	r3, [r7, #4]
	PinValue_14 = GET_BIT(EXTI->PR,14);
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	0b9b      	lsrs	r3, r3, #14
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	70fb      	strb	r3, [r7, #3]
	PinValue_15 = GET_BIT(EXTI->PR,14);
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	0b9b      	lsrs	r3, r3, #14
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	70bb      	strb	r3, [r7, #2]

	if (PinValue_10 == 1)
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d108      	bne.n	8001802 <EXTI15_10_IRQHandler+0x72>
	{
		EXTI_GlobalPtr[10]();
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <EXTI15_10_IRQHandler+0xf8>)
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 10);
 80017f6:	4b23      	ldr	r3, [pc, #140]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a22      	ldr	r2, [pc, #136]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 80017fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001800:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_11 == 1)
 8001802:	79bb      	ldrb	r3, [r7, #6]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d108      	bne.n	800181a <EXTI15_10_IRQHandler+0x8a>
	{
		EXTI_GlobalPtr[11]();
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <EXTI15_10_IRQHandler+0xf8>)
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 11);
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 8001814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001818:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_12 == 1)
 800181a:	797b      	ldrb	r3, [r7, #5]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d108      	bne.n	8001832 <EXTI15_10_IRQHandler+0xa2>
	{
		EXTI_GlobalPtr[12]();
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <EXTI15_10_IRQHandler+0xf8>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 12);
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	4a16      	ldr	r2, [pc, #88]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 800182c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001830:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_13 == 1)
 8001832:	793b      	ldrb	r3, [r7, #4]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d108      	bne.n	800184a <EXTI15_10_IRQHandler+0xba>
	{
		EXTI_GlobalPtr[13]();
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <EXTI15_10_IRQHandler+0xf8>)
 800183a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183c:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 13);
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 8001844:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001848:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_14 == 1)
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d108      	bne.n	8001862 <EXTI15_10_IRQHandler+0xd2>
	{
		EXTI_GlobalPtr[14]();
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <EXTI15_10_IRQHandler+0xf8>)
 8001852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001854:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 14);
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_15 == 1)
 8001862:	78bb      	ldrb	r3, [r7, #2]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d108      	bne.n	800187a <EXTI15_10_IRQHandler+0xea>
	{
		EXTI_GlobalPtr[15]();
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <EXTI15_10_IRQHandler+0xf8>)
 800186a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186c:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 15);
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <EXTI15_10_IRQHandler+0xf4>)
 8001874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001878:	6153      	str	r3, [r2, #20]
	}

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40010400 	.word	0x40010400
 8001888:	20000088 	.word	0x20000088

0800188c <HENCODER_u8GetMotorDirection>:
static s32 Global_s32NumOfRightCounts = 0 ;
static s32 Global_s32NumOfLeftCounts = 0 ;
static f32 Global_f32Distance = 0;

u8 HENCODER_u8GetMotorDirection(u8 Copy_u8Channel2Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8Channel2Pin == 8)
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b08      	cmp	r3, #8
 800189a:	d102      	bne.n	80018a2 <HENCODER_u8GetMotorDirection+0x16>
	{
		return Global_u8MotorLeftDirection;
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <HENCODER_u8GetMotorDirection+0x24>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	e001      	b.n	80018a6 <HENCODER_u8GetMotorDirection+0x1a>
	}
	else //if (Copy_u8Channel2Pin == 10)
	{
		return Global_u8MotorRightDirection;
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HENCODER_u8GetMotorDirection+0x28>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
	}
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	200000c9 	.word	0x200000c9
 80018b4:	200000c8 	.word	0x200000c8

080018b8 <HENCODER_voidEncoderCounts>:

s32 HENCODER_voidEncoderCounts(u8 Copy_u8Channel2Port ,u8 Copy_u8Channel2Pin)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	460a      	mov	r2, r1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71bb      	strb	r3, [r7, #6]
	//u8 MotorDirection ;
	u8 Local_u8ChannelState ;

	Local_u8ChannelState = MGPIO_u8GetPinValue(Copy_u8Channel2Port ,Copy_u8Channel2Pin+1);
 80018c8:	79bb      	ldrb	r3, [r7, #6]
 80018ca:	3301      	adds	r3, #1
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fde6 	bl	80014a4 <MGPIO_u8GetPinValue>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
	
	if (Copy_u8Channel2Pin == 8)
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d119      	bne.n	8001916 <HENCODER_voidEncoderCounts+0x5e>
	{
		if(Local_u8ChannelState == HIGH)
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d108      	bne.n	80018fa <HENCODER_voidEncoderCounts+0x42>
		{
			Global_u8MotorLeftDirection = ClockwiseDirection;
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HENCODER_voidEncoderCounts+0x98>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfLeftCounts--;
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HENCODER_voidEncoderCounts+0x9c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HENCODER_voidEncoderCounts+0x9c>)
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e00a      	b.n	8001910 <HENCODER_voidEncoderCounts+0x58>
		}
		else if (Local_u8ChannelState == LOW)
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d107      	bne.n	8001910 <HENCODER_voidEncoderCounts+0x58>
		{
			Global_u8MotorLeftDirection = CounterClockwiseDirection;
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HENCODER_voidEncoderCounts+0x98>)
 8001902:	2202      	movs	r2, #2
 8001904:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfLeftCounts++;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HENCODER_voidEncoderCounts+0x9c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HENCODER_voidEncoderCounts+0x9c>)
 800190e:	6013      	str	r3, [r2, #0]
		}

	return Global_s32NumOfLeftCounts;
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HENCODER_voidEncoderCounts+0x9c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	e018      	b.n	8001948 <HENCODER_voidEncoderCounts+0x90>
	}

	else //if (Copy_u8Channel2Pin == 10)
	{
		if(Local_u8ChannelState == HIGH)
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d108      	bne.n	800192e <HENCODER_voidEncoderCounts+0x76>
		{
			Global_u8MotorRightDirection = ClockwiseDirection;
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HENCODER_voidEncoderCounts+0xa0>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfRightCounts--;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HENCODER_voidEncoderCounts+0xa4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3b01      	subs	r3, #1
 8001928:	4a0c      	ldr	r2, [pc, #48]	; (800195c <HENCODER_voidEncoderCounts+0xa4>)
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e00a      	b.n	8001944 <HENCODER_voidEncoderCounts+0x8c>
		}
		else if (Local_u8ChannelState == LOW)
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d107      	bne.n	8001944 <HENCODER_voidEncoderCounts+0x8c>
		{
			Global_u8MotorRightDirection = CounterClockwiseDirection;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HENCODER_voidEncoderCounts+0xa0>)
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfRightCounts++;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <HENCODER_voidEncoderCounts+0xa4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HENCODER_voidEncoderCounts+0xa4>)
 8001942:	6013      	str	r3, [r2, #0]
		}

	return Global_s32NumOfRightCounts;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HENCODER_voidEncoderCounts+0xa4>)
 8001946:	681b      	ldr	r3, [r3, #0]
	}
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200000c9 	.word	0x200000c9
 8001954:	200000d0 	.word	0x200000d0
 8001958:	200000c8 	.word	0x200000c8
 800195c:	200000cc 	.word	0x200000cc

08001960 <HENCODER_s32GetZeroCounts>:


void HENCODER_s32GetZeroCounts(u8 Copy_u8Channel2Pin)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8Channel2Pin == 8)
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d103      	bne.n	8001978 <HENCODER_s32GetZeroCounts+0x18>
	{
		Global_s32NumOfLeftCounts = 0;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <HENCODER_s32GetZeroCounts+0x30>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
	else if (Copy_u8Channel2Pin == 10)
	{
		Global_s32NumOfRightCounts = 0;
	}
	//return Global_s32NumOfCounts;
}
 8001976:	e005      	b.n	8001984 <HENCODER_s32GetZeroCounts+0x24>
	else if (Copy_u8Channel2Pin == 10)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2b0a      	cmp	r3, #10
 800197c:	d102      	bne.n	8001984 <HENCODER_s32GetZeroCounts+0x24>
		Global_s32NumOfRightCounts = 0;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HENCODER_s32GetZeroCounts+0x34>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200000d0 	.word	0x200000d0
 8001994:	200000cc 	.word	0x200000cc

08001998 <HENCODER_s32GetRevPerMin>:


s32 HENCODER_s32GetRevPerMin(s32 Copy_s32EncoderCounts, u32 Copy_u32Time)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	s32 Local_s32RPM = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
	Local_s32RPM = (Copy_s32EncoderCounts*60)/(EncoderResolution*Copy_u32Time/1000000); // need to handle if not 1sec
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4619      	mov	r1, r3
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	011a      	lsls	r2, r3, #4
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <HENCODER_s32GetRevPerMin+0x40>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	0c9b      	lsrs	r3, r3, #18
 80019c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ca:	60fb      	str	r3, [r7, #12]
	return Local_s32RPM;
 80019cc:	68fb      	ldr	r3, [r7, #12]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	431bde83 	.word	0x431bde83
 80019dc:	00000000 	.word	0x00000000

080019e0 <HENCODER_f32GetDistance>:


f32 HENCODER_f32GetDistance( s32 Copy_s32EncoderCounts )
{
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	Global_f32Distance = Global_f32Distance + (Copy_s32EncoderCounts*2*Pi*WheelRadius)/EncoderResolution;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HENCODER_f32GetDistance+0x88>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fd23 	bl	8000438 <__aeabi_f2d>
 80019f2:	4604      	mov	r4, r0
 80019f4:	460d      	mov	r5, r1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fd0a 	bl	8000414 <__aeabi_i2d>
 8001a00:	a315      	add	r3, pc, #84	; (adr r3, 8001a58 <HENCODER_f32GetDistance+0x78>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fd6f 	bl	80004e8 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HENCODER_f32GetDistance+0x8c>)
 8001a18:	f7fe fd66 	bl	80004e8 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	a30e      	add	r3, pc, #56	; (adr r3, 8001a60 <HENCODER_f32GetDistance+0x80>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe fe87 	bl	800073c <__aeabi_ddiv>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4620      	mov	r0, r4
 8001a34:	4629      	mov	r1, r5
 8001a36:	f7fe fba1 	bl	800017c <__adddf3>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7ff f813 	bl	8000a6c <__aeabi_d2f>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HENCODER_f32GetDistance+0x88>)
 8001a4a:	6013      	str	r3, [r2, #0]
	return Global_f32Distance;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HENCODER_f32GetDistance+0x88>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bdb0      	pop	{r4, r5, r7, pc}
 8001a58:	51eb851f 	.word	0x51eb851f
 8001a5c:	40091eb8 	.word	0x40091eb8
 8001a60:	00000000 	.word	0x00000000
 8001a64:	406c2000 	.word	0x406c2000
 8001a68:	200000d4 	.word	0x200000d4
 8001a6c:	400c0000 	.word	0x400c0000

08001a70 <HENCODER_f32GetZeroDistance>:

void HENCODER_f32GetZeroDistance(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
	Global_f32Distance = 0;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HENCODER_f32GetZeroDistance+0x14>)
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	200000d4 	.word	0x200000d4

08001a88 <MNVIC_voidEnableInterrupt>:
#include "NVIC/NVIC_config.h"
#include "NVIC/NVIC_private.h"


void MNVIC_voidEnableInterrupt (u8 Copy_u8IntNumber)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
	if ( Copy_u8IntNumber <= 31)
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	2b1f      	cmp	r3, #31
 8001a96:	d805      	bhi.n	8001aa4 <MNVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0 = (1 << Copy_u8IntNumber);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MNVIC_voidEnableInterrupt+0x3c>)
 8001aa0:	601a      	str	r2, [r3, #0]
	{
		Copy_u8IntNumber -= 32;
		NVIC_ISER1 = (1 << Copy_u8IntNumber);
	}
	
}
 8001aa2:	e00a      	b.n	8001aba <MNVIC_voidEnableInterrupt+0x32>
	else if (  Copy_u8IntNumber <= 59)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b3b      	cmp	r3, #59	; 0x3b
 8001aa8:	d807      	bhi.n	8001aba <MNVIC_voidEnableInterrupt+0x32>
		Copy_u8IntNumber -= 32;
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	3b20      	subs	r3, #32
 8001aae:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << Copy_u8IntNumber);
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <MNVIC_voidEnableInterrupt+0x40>)
 8001ab8:	601a      	str	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000e104 	.word	0xe000e104

08001acc <RCC_voidInitSysClock>:
#include "RCC/RCC_interface.h"
#include "RCC/RCC_private.h"
#include "RCC/RCC_config.h"

void RCC_voidInitSysClock(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	#if     RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		RCC_CR   = 0x00010000; /* Enable HSE with no bypass */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <RCC_voidInitSysClock+0x1c>)
 8001ad2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ad6:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0x00000001;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <RCC_voidInitSysClock+0x20>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
		#endif
	
	#else
		#error("You chosed Wrong Clock type")
	#endif
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40021004 	.word	0x40021004

08001af0 <RCC_voidEnableClock>:


void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PeripheralId)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
	/*check input validation (32 bits)*/
	if (Copy_u8PeripheralId <= 31)     
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	2b1f      	cmp	r3, #31
 8001b04:	d82a      	bhi.n	8001b5c <RCC_voidEnableClock+0x6c>
	{
		switch (Copy_u8BusId)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d01c      	beq.n	8001b46 <RCC_voidEnableClock+0x56>
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	dc26      	bgt.n	8001b5e <RCC_voidEnableClock+0x6e>
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <RCC_voidEnableClock+0x2a>
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d00b      	beq.n	8001b30 <RCC_voidEnableClock+0x40>
	/*else
	{
		// Return Error 
	}*/

}
 8001b18:	e021      	b.n	8001b5e <RCC_voidEnableClock+0x6e>
			case RCC_AHB  : SET_BIT(RCC_AHBENR  ,Copy_u8PeripheralId);   
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <RCC_voidEnableClock+0x78>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	79ba      	ldrb	r2, [r7, #6]
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	4611      	mov	r1, r2
 8001b28:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <RCC_voidEnableClock+0x78>)
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	6013      	str	r3, [r2, #0]
			break;
 8001b2e:	e016      	b.n	8001b5e <RCC_voidEnableClock+0x6e>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR ,Copy_u8PeripheralId);   
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <RCC_voidEnableClock+0x7c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	79ba      	ldrb	r2, [r7, #6]
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <RCC_voidEnableClock+0x7c>)
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6013      	str	r3, [r2, #0]
			break;
 8001b44:	e00b      	b.n	8001b5e <RCC_voidEnableClock+0x6e>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR ,Copy_u8PeripheralId);   
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <RCC_voidEnableClock+0x80>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	79ba      	ldrb	r2, [r7, #6]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b52:	4611      	mov	r1, r2
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <RCC_voidEnableClock+0x80>)
 8001b56:	430b      	orrs	r3, r1
 8001b58:	6013      	str	r3, [r2, #0]
			break;
 8001b5a:	e000      	b.n	8001b5e <RCC_voidEnableClock+0x6e>
	}
 8001b5c:	bf00      	nop
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40021014 	.word	0x40021014
 8001b6c:	4002101c 	.word	0x4002101c
 8001b70:	40021018 	.word	0x40021018

08001b74 <MSTK_voidInit>:
/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;


void MSTK_voidInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;	
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <MSTK_voidInit+0x14>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
#endif
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <MSTK_voidSetBusyWait>:

		/*synchronous function*/
void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 8001b94:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <MSTK_voidSetBusyWait+0x4c>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6053      	str	r3, [r2, #4]
	/* Start Timer */
	SET_BIT(MSTK -> CTRL, 0);
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MSTK_voidSetBusyWait+0x4c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <MSTK_voidSetBusyWait+0x4c>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]
	/* Wait till flag is raised */
	while( (GET_BIT(MSTK -> CTRL,16)) == 0);
 8001ba6:	bf00      	nop
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MSTK_voidSetBusyWait+0x4c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f8      	beq.n	8001ba8 <MSTK_voidSetBusyWait+0x1c>
	/* Stop Timer */
	SET_BIT(MSTK -> CTRL, 0);
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MSTK_voidSetBusyWait+0x4c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <MSTK_voidSetBusyWait+0x4c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <MSTK_voidSetBusyWait+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;	
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <MSTK_voidSetBusyWait+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <MSTK_voidSetIntervalPeriodic>:
	SET_BIT(MSTK -> CTRL, 1);
}

			/*Asynchronous function count periodic*/
void MSTK_voidSetIntervalPeriodic( u32 Copy_u32Ticks )
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 8001be4:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <MSTK_voidSetIntervalPeriodic+0x30>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6053      	str	r3, [r2, #4]
	/* Start Timer */
	SET_BIT(MSTK -> CTRL, 0);
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MSTK_voidSetIntervalPeriodic+0x30>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <MSTK_voidSetIntervalPeriodic+0x30>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6013      	str	r3, [r2, #0]
	/* Save CallBack */
	//MSTK_GlobalPtr = Copy_ptr;
	/* Set Mode to Single */
	//MSTK_u8ModeOfInterval = MSTK_PERIOD_INTERVAL;
	/* Enable STK Interrupt */
	SET_BIT(MSTK -> CTRL, 1);
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <MSTK_voidSetIntervalPeriodic+0x30>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <MSTK_voidSetIntervalPeriodic+0x30>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6013      	str	r3, [r2, #0]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <MSTK_u32GetElapsedTime>:
	MSTK -> VAL  = 0;
}

/*load - value (counted time)*/
u32  MSTK_u32GetElapsedTime(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
	u32 Local_u32ElapsedTime;
	Local_u32ElapsedTime = MSTK -> LOAD - MSTK -> VAL ;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MSTK_u32GetElapsedTime+0x20>)
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <MSTK_u32GetElapsedTime+0x20>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	607b      	str	r3, [r7, #4]
	return Local_u32ElapsedTime;
 8001c22:	687b      	ldr	r3, [r7, #4]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <SysTick_Handler>:
	return Local_u32RemainTime;
}


void SysTick_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
//
//	/* Callback notification */
//	MSTK_GlobalPtr();

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK -> CTRL,16);
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SysTick_Handler+0x20>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	71fb      	strb	r3, [r7, #7]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <MTIM2_voidInitC2>:
#include "TIM2/TIM2_interface.h"
#include "TIM2/TIM2_private.h"
#include "TIM2/TIM2_config.h"

void MTIM2_voidInitC2 (void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
	
	/*direction of counter when it is edge aligned mode , no need for this bit if centered aligned*/
	CLR_BIT(TIM2 -> CR1 , 4);
 8001c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c66:	f023 0310 	bic.w	r3, r3, #16
 8001c6a:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= (CR1_DIR << 4);
 8001c6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c76:	f043 0310 	orr.w	r3, r3, #16
 8001c7a:	6013      	str	r3, [r2, #0]
	
	/*prescaler value*/
	TIM2->PSC = TIM_PRESCALER;
 8001c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c80:	2208      	movs	r2, #8
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
	
	/*if there is interrupt then DIER_UIE must be enabled*/
	SET_BIT(TIM2 -> DIER , 0);
 8001c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	60d3      	str	r3, [r2, #12]
	
	/*enable channel2*/
	SET_BIT(TIM2->CCER , 4);
 8001c94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9e:	f043 0310 	orr.w	r3, r3, #16
 8001ca2:	6213      	str	r3, [r2, #32]

	/*enable pwm mode 1 - channel 2*/
	CLR_BIT(TIM2->CCMR1 , 12);
 8001ca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cb2:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM2->CCMR1 , 13);
 8001cb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cc2:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM2->CCMR1 , 14);
 8001cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd2:	6193      	str	r3, [r2, #24]

	/*enable output compare -- update value after overflow or immediately*/
	CLR_BIT(TIM2->CCMR1 , 11);   //immediately
 8001cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ce2:	6193      	str	r3, [r2, #24]

	/*enable auto reload preload for PWM*/
	SET_BIT(TIM2 -> CR1 , 7);
 8001ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf2:	6013      	str	r3, [r2, #0]

	/*load desired value of ARR*/
	TIM2->ARR  = 100;
 8001cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cf8:	2264      	movs	r2, #100	; 0x64
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c

	/*enable counter*/
	SET_BIT(TIM2 -> CR1 , 0);
 8001cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6013      	str	r3, [r2, #0]
	/*enable update generation*/
	SET_BIT(TIM2 -> EGR , 0);
 8001d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6153      	str	r3, [r2, #20]

}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <MTIM2_voidOutputPWM_C2>:
	CLR_BIT(TIM2 -> SR , 0);
	
}

void MTIM2_voidOutputPWM_C2 (u16 Copy_16CompareValue)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
	/*load the desired value -- channel2*/
	CCR2 = Copy_16CompareValue;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <MTIM2_voidOutputPWM_C2+0x1c>)
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40000038 	.word	0x40000038

08001d44 <MTIM3_voidInit>:
#include "TIM3/TIM3_interface.h"
#include "TIM3/TIM3_private.h"
#include "TIM3/TIM3_config.h"

void MTIM3_voidInit (void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
	
	/*direction of counter when it is edge aligned mode , no need for this bit if centered aligned*/
	CLR_BIT(TIM3 -> CR1 , 4);
 8001d48:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d4e:	f023 0310 	bic.w	r3, r3, #16
 8001d52:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= (CR1_DIR << 4);
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d56:	4a21      	ldr	r2, [pc, #132]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6013      	str	r3, [r2, #0]
	
	/*prescaler value*/
	TIM3->PSC = TIM_PRESCALER;
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d5e:	2208      	movs	r2, #8
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
	
	/*if there is interrupt then DIER_UIE must be enabled*/
	SET_BIT(TIM3 -> DIER , 0);
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	60d3      	str	r3, [r2, #12]
	
	/*enable channel1*/
	SET_BIT(TIM3->CCER , 0);
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6213      	str	r3, [r2, #32]

	/*enable pwm mode 1 , channel1*/
	CLR_BIT(TIM3->CCMR1 , 4);
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d80:	f023 0310 	bic.w	r3, r3, #16
 8001d84:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM3->CCMR1 , 5);
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d8c:	f043 0320 	orr.w	r3, r3, #32
 8001d90:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM3->CCMR1 , 6);
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d9c:	6193      	str	r3, [r2, #24]

	/*enable output compare -- update value after overflow or immediately*/
	CLR_BIT(TIM3->CCMR1 , 3);   //immediately , channel1
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001da4:	f023 0308 	bic.w	r3, r3, #8
 8001da8:	6193      	str	r3, [r2, #24]

	/*enable auto reload preload for PWM*/
	SET_BIT(TIM3 -> CR1 , 7);
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	6013      	str	r3, [r2, #0]

	/*load desired value in ARR*/
	TIM3->ARR  = 100;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001db8:	2264      	movs	r2, #100	; 0x64
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c

	/*enable counter*/
	SET_BIT(TIM3 -> CR1 , 0);
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6013      	str	r3, [r2, #0]
	/*enable update generation*/
	SET_BIT(TIM3 -> EGR , 0);
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	4a03      	ldr	r2, [pc, #12]	; (8001ddc <MTIM3_voidInit+0x98>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6153      	str	r3, [r2, #20]

}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40000400 	.word	0x40000400

08001de0 <MTIM3_voidOutputPWM>:

}


void MTIM3_voidOutputPWM (u16 Copy_u16CompareValue)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
	/* load desired value in channel 1 */
	CCR1 = Copy_u16CompareValue;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <MTIM3_voidOutputPWM+0x1c>)
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40000434 	.word	0x40000434

08001e00 <MUSART2_voidInit>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void MUSART2_voidInit(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	/*Enable clock of GPIO, AFIO , USART2*/
	RCC_voidEnableClock(RCC_APB2,2);
 8001e04:	2102      	movs	r1, #2
 8001e06:	2002      	movs	r0, #2
 8001e08:	f7ff fe72 	bl	8001af0 <RCC_voidEnableClock>
	//RCC_voidEnableClock(RCC_APB2,3);
	RCC_voidEnableClock(RCC_APB2,0);
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2002      	movs	r0, #2
 8001e10:	f7ff fe6e 	bl	8001af0 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB1,17);
 8001e14:	2111      	movs	r1, #17
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7ff fe6a 	bl	8001af0 <RCC_voidEnableClock>

	/*pin mode*/
	MGPIO_VoidSetPinDirection(GPIOA,PIN2,OUTPUT_10MHZ_AFPP);   // TX
 8001e1c:	2209      	movs	r2, #9
 8001e1e:	2102      	movs	r1, #2
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff fa09 	bl	8001238 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN3,INPUT_FLOATING);   // RX
 8001e26:	2204      	movs	r2, #4
 8001e28:	2103      	movs	r1, #3
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff fa04 	bl	8001238 <MGPIO_VoidSetPinDirection>

	/*	baud rate = 9600		*/
	USART2 -> BRR = 0x341;
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <MUSART2_voidInit+0x68>)
 8001e32:	f240 3241 	movw	r2, #833	; 0x341
 8001e36:	609a      	str	r2, [r3, #8]

	SET_BIT((USART2-> CR1), 3);			/* Enabling Transmitter */
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MUSART2_voidInit+0x68>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <MUSART2_voidInit+0x68>)
 8001e3e:	f043 0308 	orr.w	r3, r3, #8
 8001e42:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART2-> CR1), 2);			/* Enabling Receiver */
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MUSART2_voidInit+0x68>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <MUSART2_voidInit+0x68>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART2-> CR1), 13);     	/* Enabling USART */
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <MUSART2_voidInit+0x68>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <MUSART2_voidInit+0x68>)
 8001e56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e5a:	60d3      	str	r3, [r2, #12]
	
	USART2 -> SR = 0;					/* Clearing status register */
 8001e5c:	4b02      	ldr	r3, [pc, #8]	; (8001e68 <MUSART2_voidInit+0x68>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40004400 	.word	0x40004400

08001e6c <MUSART2_voidSendData>:

void MUSART2_voidSendData(u8 Copy_u16Data)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	USART2 -> DR = Copy_u16Data;
 8001e76:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <MUSART2_voidSendData+0x38>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	6053      	str	r3, [r2, #4]
	while((GET_BIT((USART2 -> SR), 6)) == 0);
 8001e7c:	bf00      	nop
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MUSART2_voidSendData+0x38>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f8      	beq.n	8001e7e <MUSART2_voidSendData+0x12>
	CLR_BIT(USART2->SR,6);
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <MUSART2_voidSendData+0x38>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <MUSART2_voidSendData+0x38>)
 8001e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e96:	6013      	str	r3, [r2, #0]

}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40004400 	.word	0x40004400

08001ea8 <MUSART2_voidSendString>:

void MUSART2_voidSendString(u8 *Copy_u8String)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	while( (*Copy_u8String) != '\0' )
 8001eb0:	e007      	b.n	8001ec2 <MUSART2_voidSendString+0x1a>
		{
			MUSART2_voidSendData(*Copy_u8String);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ffd8 	bl	8001e6c <MUSART2_voidSendData>
			Copy_u8String++;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	607b      	str	r3, [r7, #4]
	while( (*Copy_u8String) != '\0' )
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f3      	bne.n	8001eb2 <MUSART2_voidSendString+0xa>
		}
}
 8001eca:	bf00      	nop
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <MUSART2_voidSendNumbers>:

void MUSART2_voidSendNumbers(f32 Copy_s32Number)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	char arr[15];
	/* convert number to string */
	gcvt(Copy_s32Number, 8,arr);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7fe faab 	bl	8000438 <__aeabi_f2d>
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	f000 fadc 	bl	80024a4 <gcvt>
	//itoa(Copy_s32Number , arr , 10);
	u8* string = (u8*)arr;
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	61fb      	str	r3, [r7, #28]

	MUSART2_voidSendString(string);
 8001ef2:	69f8      	ldr	r0, [r7, #28]
 8001ef4:	f7ff ffd8 	bl	8001ea8 <MUSART2_voidSendString>
}
 8001ef8:	bf00      	nop
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <EncoderCounts>:

/* Elapsed time */
u32 elapsed_time = 0;

void EncoderCounts(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	if(rotate_flag == 0)
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <EncoderCounts+0x88>)
 8001f06:	f993 3000 	ldrsb.w	r3, [r3]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d139      	bne.n	8001f82 <EncoderCounts+0x82>
	{
	/* left motor (encoder readings) */
	left_MotorDirection = HENCODER_u8GetMotorDirection(PIN8);
 8001f0e:	2008      	movs	r0, #8
 8001f10:	f7ff fcbc 	bl	800188c <HENCODER_u8GetMotorDirection>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <EncoderCounts+0x8c>)
 8001f1a:	701a      	strb	r2, [r3, #0]
	left_RPM = HENCODER_s32GetRevPerMin(left_counts, elapsed_time);
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <EncoderCounts+0x90>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <EncoderCounts+0x94>)
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fd36 	bl	8001998 <HENCODER_s32GetRevPerMin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <EncoderCounts+0x98>)
 8001f30:	6013      	str	r3, [r2, #0]
	left_distance = HENCODER_f32GetDistance(left_counts);
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <EncoderCounts+0x90>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fd52 	bl	80019e0 <HENCODER_f32GetDistance>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <EncoderCounts+0x9c>)
 8001f40:	6013      	str	r3, [r2, #0]
	HENCODER_s32GetZeroCounts(PIN8);
 8001f42:	2008      	movs	r0, #8
 8001f44:	f7ff fd0c 	bl	8001960 <HENCODER_s32GetZeroCounts>

	/* right motor (encoder readings) */
	right_MotorDirection = HENCODER_u8GetMotorDirection(PIN10);
 8001f48:	200a      	movs	r0, #10
 8001f4a:	f7ff fc9f 	bl	800188c <HENCODER_u8GetMotorDirection>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <EncoderCounts+0xa0>)
 8001f54:	701a      	strb	r2, [r3, #0]
	right_RPM = HENCODER_s32GetRevPerMin(right_counts, elapsed_time);
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <EncoderCounts+0xa4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <EncoderCounts+0x94>)
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fd19 	bl	8001998 <HENCODER_s32GetRevPerMin>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <EncoderCounts+0xa8>)
 8001f6a:	6013      	str	r3, [r2, #0]
	right_distance = HENCODER_f32GetDistance(right_counts);
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <EncoderCounts+0xa4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fd35 	bl	80019e0 <HENCODER_f32GetDistance>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <EncoderCounts+0xac>)
 8001f7a:	6013      	str	r3, [r2, #0]
	HENCODER_s32GetZeroCounts(PIN10);
 8001f7c:	200a      	movs	r0, #10
 8001f7e:	f7ff fcef 	bl	8001960 <HENCODER_s32GetZeroCounts>
	}
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	200000d8 	.word	0x200000d8
 8001f90:	200000dc 	.word	0x200000dc
 8001f94:	20000104 	.word	0x20000104
 8001f98:	200000e0 	.word	0x200000e0
 8001f9c:	200000e4 	.word	0x200000e4
 8001fa0:	200000e8 	.word	0x200000e8
 8001fa4:	200000ec 	.word	0x200000ec
 8001fa8:	200000f0 	.word	0x200000f0
 8001fac:	200000f4 	.word	0x200000f4

08001fb0 <LeftEncoderGetReading>:

/*ISR of EXTI8 (left encoder)*/
void LeftEncoderGetReading (void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	left_counts = HENCODER_voidEncoderCounts(GPIOA,PIN8);
 8001fb4:	2108      	movs	r1, #8
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7ff fc7e 	bl	80018b8 <HENCODER_voidEncoderCounts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a02      	ldr	r2, [pc, #8]	; (8001fc8 <LeftEncoderGetReading+0x18>)
 8001fc0:	6013      	str	r3, [r2, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200000dc 	.word	0x200000dc

08001fcc <RightEncoderGetReading>:

/*ISR of EXTI10 (right encoder)*/
void RightEncoderGetReading (void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	right_counts = HENCODER_voidEncoderCounts(GPIOB,PIN10);
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7ff fc70 	bl	80018b8 <HENCODER_voidEncoderCounts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a02      	ldr	r2, [pc, #8]	; (8001fe4 <RightEncoderGetReading+0x18>)
 8001fdc:	6013      	str	r3, [r2, #0]
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200000ec 	.word	0x200000ec

08001fe8 <TargetDistance>:
	MUSART2_voidSendData(1);
	rotate_flag = 0;
}

void TargetDistance()
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	MTIM2_voidOutputPWM_C2(30);
 8001fec:	201e      	movs	r0, #30
 8001fee:	f7ff fe99 	bl	8001d24 <MTIM2_voidOutputPWM_C2>
	MTIM3_voidOutputPWM(30);
 8001ff2:	201e      	movs	r0, #30
 8001ff4:	f7ff fef4 	bl	8001de0 <MTIM3_voidOutputPWM>

	/* motor direction */
	MGPIO_VoidSetPinValue(GPIOA,PIN5,HIGH);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2105      	movs	r1, #5
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7ff f9f1 	bl	80013e4 <MGPIO_VoidSetPinValue>
	MGPIO_VoidSetPinValue(GPIOA,PIN0,HIGH);
 8002002:	2201      	movs	r2, #1
 8002004:	2100      	movs	r1, #0
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff f9ec 	bl	80013e4 <MGPIO_VoidSetPinValue>

	while(1)
	{
		//EncoderCounts();
		if(left_distance == 70)
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <TargetDistance+0x58>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <TargetDistance+0x5c>)
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f81c 	bl	8001050 <__aeabi_fcmpeq>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f6      	beq.n	800200c <TargetDistance+0x24>
		{
			MTIM3_voidOutputPWM(0);
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff fede 	bl	8001de0 <MTIM3_voidOutputPWM>
			MTIM2_voidOutputPWM_C2(0);
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff fe7d 	bl	8001d24 <MTIM2_voidOutputPWM_C2>
			break;
 800202a:	bf00      	nop
		}
	}
	MUSART2_voidSendData(1);
 800202c:	2001      	movs	r0, #1
 800202e:	f7ff ff1d 	bl	8001e6c <MUSART2_voidSendData>
	HENCODER_f32GetZeroDistance();
 8002032:	f7ff fd1d 	bl	8001a70 <HENCODER_f32GetZeroDistance>
	distance_flag = 0;
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <TargetDistance+0x60>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200000e4 	.word	0x200000e4
 8002044:	428c0000 	.word	0x428c0000
 8002048:	20000005 	.word	0x20000005
 800204c:	00000000 	.word	0x00000000

08002050 <VoltageReading>:

void VoltageReading()
{
 8002050:	b598      	push	{r3, r4, r7, lr}
 8002052:	af00      	add	r7, sp, #0
	adc_value = MADC1_u16ReadValue();
 8002054:	f7ff f890 	bl	8001178 <MADC1_u16ReadValue>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <VoltageReading+0xe0>)
 800205e:	801a      	strh	r2, [r3, #0]
	adc_volt = (adc_value*2.82)/4096;    //3.3
 8002060:	4b33      	ldr	r3, [pc, #204]	; (8002130 <VoltageReading+0xe0>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe f9d5 	bl	8000414 <__aeabi_i2d>
 800206a:	a32f      	add	r3, pc, #188	; (adr r3, 8002128 <VoltageReading+0xd8>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f7fe fa3a 	bl	80004e8 <__aeabi_dmul>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <VoltageReading+0xe4>)
 8002082:	f7fe fb5b 	bl	800073c <__aeabi_ddiv>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	f7fe fced 	bl	8000a6c <__aeabi_d2f>
 8002092:	4603      	mov	r3, r0
 8002094:	4a28      	ldr	r2, [pc, #160]	; (8002138 <VoltageReading+0xe8>)
 8002096:	6013      	str	r3, [r2, #0]
	reading = (adc_volt*(R1+R2))/R2;
 8002098:	4b28      	ldr	r3, [pc, #160]	; (800213c <VoltageReading+0xec>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b28      	ldr	r3, [pc, #160]	; (8002140 <VoltageReading+0xf0>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fdeb 	bl	8000c80 <__aeabi_i2f>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <VoltageReading+0xe8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	4610      	mov	r0, r2
 80020b4:	f7fe fe38 	bl	8000d28 <__aeabi_fmul>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461c      	mov	r4, r3
 80020bc:	4b20      	ldr	r3, [pc, #128]	; (8002140 <VoltageReading+0xf0>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fddd 	bl	8000c80 <__aeabi_i2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4619      	mov	r1, r3
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7fe fee0 	bl	8000e90 <__aeabi_fdiv>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <VoltageReading+0xf4>)
 80020d6:	601a      	str	r2, [r3, #0]

	reading = floor(reading * 100) / 100;    // %.2f
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <VoltageReading+0xf4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	491a      	ldr	r1, [pc, #104]	; (8002148 <VoltageReading+0xf8>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fe22 	bl	8000d28 <__aeabi_fmul>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe f9a6 	bl	8000438 <__aeabi_f2d>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	f002 fda8 	bl	8004c48 <floor>
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <VoltageReading+0xfc>)
 80020fe:	f7fe fb1d 	bl	800073c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f7fe fcaf 	bl	8000a6c <__aeabi_d2f>
 800210e:	4603      	mov	r3, r0
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <VoltageReading+0xf4>)
 8002112:	6013      	str	r3, [r2, #0]

	MUSART2_voidSendNumbers(reading);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <VoltageReading+0xf4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fedb 	bl	8001ed4 <MUSART2_voidSendNumbers>
}
 800211e:	bf00      	nop
 8002120:	bd98      	pop	{r3, r4, r7, pc}
 8002122:	bf00      	nop
 8002124:	f3af 8000 	nop.w
 8002128:	28f5c28f 	.word	0x28f5c28f
 800212c:	40068f5c 	.word	0x40068f5c
 8002130:	200000f8 	.word	0x200000f8
 8002134:	40b00000 	.word	0x40b00000
 8002138:	20000100 	.word	0x20000100
 800213c:	20000000 	.word	0x20000000
 8002140:	20000002 	.word	0x20000002
 8002144:	200000fc 	.word	0x200000fc
 8002148:	42c80000 	.word	0x42c80000
 800214c:	40590000 	.word	0x40590000

08002150 <main>:

int main (void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	/*initialize RCC*/
	RCC_voidInitSysClock();
 8002154:	f7ff fcba 	bl	8001acc <RCC_voidInitSysClock>

	/*initialize peripherals clock - GPIO, AFIO, TIM2, TIM3, ADC1*/
	RCC_voidEnableClock(RCC_APB2 , 2);
 8002158:	2102      	movs	r1, #2
 800215a:	2002      	movs	r0, #2
 800215c:	f7ff fcc8 	bl	8001af0 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 3);
 8002160:	2103      	movs	r1, #3
 8002162:	2002      	movs	r0, #2
 8002164:	f7ff fcc4 	bl	8001af0 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 0);
 8002168:	2100      	movs	r1, #0
 800216a:	2002      	movs	r0, #2
 800216c:	f7ff fcc0 	bl	8001af0 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB1 , 0);
 8002170:	2100      	movs	r1, #0
 8002172:	2001      	movs	r0, #1
 8002174:	f7ff fcbc 	bl	8001af0 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB1 , 1);
 8002178:	2101      	movs	r1, #1
 800217a:	2001      	movs	r0, #1
 800217c:	f7ff fcb8 	bl	8001af0 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 9);
 8002180:	2109      	movs	r1, #9
 8002182:	2002      	movs	r0, #2
 8002184:	f7ff fcb4 	bl	8001af0 <RCC_voidEnableClock>

	/* cytron 1 */
	//MGPIO_VoidSetPinDirection(GPIOA,PIN3,OUTPUT_2MHZ_AFPP);
	//MGPIO_VoidSetPinDirection(GPIOA,PIN2,OUTPUT_2MHZ_PP);
	MGPIO_VoidSetPinDirection(GPIOA,PIN1,OUTPUT_2MHZ_AFPP);		//pwm
 8002188:	220a      	movs	r2, #10
 800218a:	2101      	movs	r1, #1
 800218c:	2000      	movs	r0, #0
 800218e:	f7ff f853 	bl	8001238 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN0,OUTPUT_2MHZ_PP);       //direction
 8002192:	2202      	movs	r2, #2
 8002194:	2100      	movs	r1, #0
 8002196:	2000      	movs	r0, #0
 8002198:	f7ff f84e 	bl	8001238 <MGPIO_VoidSetPinDirection>

	/* cytron 2 */
	MGPIO_VoidSetPinDirection(GPIOA,PIN6,OUTPUT_2MHZ_AFPP);		//pwm
 800219c:	220a      	movs	r2, #10
 800219e:	2106      	movs	r1, #6
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7ff f849 	bl	8001238 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN5,OUTPUT_2MHZ_PP);		//direction
 80021a6:	2202      	movs	r2, #2
 80021a8:	2105      	movs	r1, #5
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff f844 	bl	8001238 <MGPIO_VoidSetPinDirection>

	/* Right encoder */
	MGPIO_VoidSetPinDirection(GPIOA,PIN8,INPUT_FLOATING);
 80021b0:	2204      	movs	r2, #4
 80021b2:	2108      	movs	r1, #8
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff f83f 	bl	8001238 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN9,INPUT_FLOATING);
 80021ba:	2204      	movs	r2, #4
 80021bc:	2109      	movs	r1, #9
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff f83a 	bl	8001238 <MGPIO_VoidSetPinDirection>

	/* Left encoder */
	MGPIO_VoidSetPinDirection(GPIOB,PIN10,INPUT_FLOATING);
 80021c4:	2204      	movs	r2, #4
 80021c6:	210a      	movs	r1, #10
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7ff f835 	bl	8001238 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOB,PIN11,INPUT_FLOATING);
 80021ce:	2204      	movs	r2, #4
 80021d0:	210b      	movs	r1, #11
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7ff f830 	bl	8001238 <MGPIO_VoidSetPinDirection>

	/* voltage sensor */
	MGPIO_VoidSetPinDirection(GPIOB, PIN0, INPUT_ANALOG);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	2001      	movs	r0, #1
 80021de:	f7ff f82b 	bl	8001238 <MGPIO_VoidSetPinDirection>

	/* AFIO for EXTI (Encoders) */
	MAFIO_voidSetEXTIConfiguration(LINE8 , AFIOA);
 80021e2:	2100      	movs	r1, #0
 80021e4:	2008      	movs	r0, #8
 80021e6:	f7fe ffd3 	bl	8001190 <MAFIO_voidSetEXTIConfiguration>
	MAFIO_voidSetEXTIConfiguration(LINE10 , AFIOB);
 80021ea:	2101      	movs	r1, #1
 80021ec:	200a      	movs	r0, #10
 80021ee:	f7fe ffcf 	bl	8001190 <MAFIO_voidSetEXTIConfiguration>

	/* call back for EXTI8,10*/
	EXTI_voidSetCallBack(LeftEncoderGetReading,LINE8);
 80021f2:	2108      	movs	r1, #8
 80021f4:	482f      	ldr	r0, [pc, #188]	; (80022b4 <main+0x164>)
 80021f6:	f7ff f9f5 	bl	80015e4 <EXTI_voidSetCallBack>
	EXTI_voidSetCallBack(RightEncoderGetReading,LINE10);
 80021fa:	210a      	movs	r1, #10
 80021fc:	482e      	ldr	r0, [pc, #184]	; (80022b8 <main+0x168>)
 80021fe:	f7ff f9f1 	bl	80015e4 <EXTI_voidSetCallBack>

	/* EXTI initialization */
	MEXTI_voidInit();
 8002202:	f7ff f98d 	bl	8001520 <MEXTI_voidInit>
	MEXTI_voidSetSignalLatch(LINE8,RISING);
 8002206:	2100      	movs	r1, #0
 8002208:	2008      	movs	r0, #8
 800220a:	f7ff f99d 	bl	8001548 <MEXTI_voidSetSignalLatch>
	MEXTI_voidSetSignalLatch(LINE10,RISING);
 800220e:	2100      	movs	r1, #0
 8002210:	200a      	movs	r0, #10
 8002212:	f7ff f999 	bl	8001548 <MEXTI_voidSetSignalLatch>

	/* ADC initialization & conversion */
	MADC1_voidInit();
 8002216:	f7fe ff4d 	bl	80010b4 <MADC1_voidInit>
	MADC1_voidStartConversion(8,1);
 800221a:	2101      	movs	r1, #1
 800221c:	2008      	movs	r0, #8
 800221e:	f7fe ff61 	bl	80010e4 <MADC1_voidStartConversion>

	/*Enable EXTI from NVIC*/
	MNVIC_voidEnableInterrupt(23);
 8002222:	2017      	movs	r0, #23
 8002224:	f7ff fc30 	bl	8001a88 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(40);
 8002228:	2028      	movs	r0, #40	; 0x28
 800222a:	f7ff fc2d 	bl	8001a88 <MNVIC_voidEnableInterrupt>

	/* Initialization */
	MSTK_voidInit();
 800222e:	f7ff fca1 	bl	8001b74 <MSTK_voidInit>
	MTIM2_voidInitC2();
 8002232:	f7ff fd11 	bl	8001c58 <MTIM2_voidInitC2>
	MTIM3_voidInit();
 8002236:	f7ff fd85 	bl	8001d44 <MTIM3_voidInit>
	MUSART2_voidInit();
 800223a:	f7ff fde1 	bl	8001e00 <MUSART2_voidInit>


	/*start timer 3sec*/
	MSTK_voidSetIntervalPeriodic(3000000);
 800223e:	481f      	ldr	r0, [pc, #124]	; (80022bc <main+0x16c>)
 8002240:	f7ff fccc 	bl	8001bdc <MSTK_voidSetIntervalPeriodic>



	while(1)
	{
		MGPIO_VoidSetPinValue(GPIOA,PIN5,LOW);
 8002244:	2200      	movs	r2, #0
 8002246:	2105      	movs	r1, #5
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff f8cb 	bl	80013e4 <MGPIO_VoidSetPinValue>
		MGPIO_VoidSetPinValue(GPIOA,PIN0,LOW);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	2000      	movs	r0, #0
 8002254:	f7ff f8c6 	bl	80013e4 <MGPIO_VoidSetPinValue>

		MTIM2_voidOutputPWM_C2(30);
 8002258:	201e      	movs	r0, #30
 800225a:	f7ff fd63 	bl	8001d24 <MTIM2_voidOutputPWM_C2>
		MTIM3_voidOutputPWM(30);
 800225e:	201e      	movs	r0, #30
 8002260:	f7ff fdbe 	bl	8001de0 <MTIM3_voidOutputPWM>

		elapsed_time = MSTK_u32GetElapsedTime();
 8002264:	f7ff fcd4 	bl	8001c10 <MSTK_u32GetElapsedTime>
 8002268:	4603      	mov	r3, r0
 800226a:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <main+0x170>)
 800226c:	6013      	str	r3, [r2, #0]
		if ((elapsed_time >= 1000) && (elapsed_time <= 1050))
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <main+0x170>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002276:	d30e      	bcc.n	8002296 <main+0x146>
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <main+0x170>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f240 421a 	movw	r2, #1050	; 0x41a
 8002280:	4293      	cmp	r3, r2
 8002282:	d808      	bhi.n	8002296 <main+0x146>
		{
			EncoderCounts();
 8002284:	f7ff fe3c 	bl	8001f00 <EncoderCounts>
			if (distance_flag == 1)
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <main+0x174>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d110      	bne.n	80022b2 <main+0x162>
			{
				TargetDistance();
 8002290:	f7ff feaa 	bl	8001fe8 <TargetDistance>
			if (distance_flag == 1)
 8002294:	e00d      	b.n	80022b2 <main+0x162>
			}
		}

		else if(((MSTK_u32GetElapsedTime()) >= 1000000) && ((MSTK_u32GetElapsedTime()) <= 1000050))
 8002296:	f7ff fcbb 	bl	8001c10 <MSTK_u32GetElapsedTime>
 800229a:	4603      	mov	r3, r0
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <main+0x178>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d9d0      	bls.n	8002244 <main+0xf4>
 80022a2:	f7ff fcb5 	bl	8001c10 <MSTK_u32GetElapsedTime>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a08      	ldr	r2, [pc, #32]	; (80022cc <main+0x17c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d8ca      	bhi.n	8002244 <main+0xf4>
		{
			VoltageReading();
 80022ae:	f7ff fecf 	bl	8002050 <VoltageReading>
		MGPIO_VoidSetPinValue(GPIOA,PIN5,LOW);
 80022b2:	e7c7      	b.n	8002244 <main+0xf4>
 80022b4:	08001fb1 	.word	0x08001fb1
 80022b8:	08001fcd 	.word	0x08001fcd
 80022bc:	002dc6c0 	.word	0x002dc6c0
 80022c0:	20000104 	.word	0x20000104
 80022c4:	20000005 	.word	0x20000005
 80022c8:	000f423f 	.word	0x000f423f
 80022cc:	000f4272 	.word	0x000f4272

080022d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return 1;
 80022d4:	2301      	movs	r3, #1
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <_kill>:

int _kill(int pid, int sig)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022e8:	f000 f900 	bl	80024ec <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2216      	movs	r2, #22
 80022f0:	601a      	str	r2, [r3, #0]
  return -1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_exit>:

void _exit (int status)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002306:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffe7 	bl	80022de <_kill>
  while (1) {}    /* Make sure we hang here */
 8002310:	e7fe      	b.n	8002310 <_exit+0x12>

08002312 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e00a      	b.n	800233a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002324:	f3af 8000 	nop.w
 8002328:	4601      	mov	r1, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	60ba      	str	r2, [r7, #8]
 8002330:	b2ca      	uxtb	r2, r1
 8002332:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	dbf0      	blt.n	8002324 <_read+0x12>
  }

  return len;
 8002342:	687b      	ldr	r3, [r7, #4]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e009      	b.n	8002372 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	60ba      	str	r2, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	dbf1      	blt.n	800235e <_write+0x12>
  }
  return len;
 800237a:	687b      	ldr	r3, [r7, #4]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_close>:

int _close(int file)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023aa:	605a      	str	r2, [r3, #4]
  return 0;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <_isatty>:

int _isatty(int file)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <_sbrk+0x5c>)
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <_sbrk+0x60>)
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <_sbrk+0x64>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <_sbrk+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d207      	bcs.n	8002424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002414:	f000 f86a 	bl	80024ec <__errno>
 8002418:	4603      	mov	r3, r0
 800241a:	220c      	movs	r2, #12
 800241c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002422:	e009      	b.n	8002438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <_sbrk+0x64>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <_sbrk+0x64>)
 8002434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20005000 	.word	0x20005000
 8002444:	00000400 	.word	0x00000400
 8002448:	20000108 	.word	0x20000108
 800244c:	20000120 	.word	0x20000120

08002450 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002452:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002454:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <LoopForever+0x6>)
  ldr r1, =_edata
 800245a:	490d      	ldr	r1, [pc, #52]	; (8002490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <LoopForever+0xe>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002460:	e002      	b.n	8002468 <LoopCopyDataInit>

08002462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002466:	3304      	adds	r3, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800246c:	d3f9      	bcc.n	8002462 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002470:	4c0a      	ldr	r4, [pc, #40]	; (800249c <LoopForever+0x16>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002474:	e001      	b.n	800247a <LoopFillZerobss>

08002476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002478:	3204      	adds	r2, #4

0800247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800247c:	d3fb      	bcc.n	8002476 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800247e:	f000 f83b 	bl	80024f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002482:	f7ff fe65 	bl	8002150 <main>

08002486 <LoopForever>:

LoopForever:
  b LoopForever
 8002486:	e7fe      	b.n	8002486 <LoopForever>
  ldr   r0, =_estack
 8002488:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002490:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002494:	08005028 	.word	0x08005028
  ldr r2, =_sbss
 8002498:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800249c:	2000011c 	.word	0x2000011c

080024a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC1_2_IRQHandler>
	...

080024a4 <gcvt>:
 80024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a6:	461c      	mov	r4, r3
 80024a8:	4615      	mov	r5, r2
 80024aa:	2300      	movs	r3, #0
 80024ac:	2200      	movs	r2, #0
 80024ae:	b085      	sub	sp, #20
 80024b0:	4606      	mov	r6, r0
 80024b2:	460f      	mov	r7, r1
 80024b4:	f7fe fa8a 	bl	80009cc <__aeabi_dcmplt>
 80024b8:	4623      	mov	r3, r4
 80024ba:	b118      	cbz	r0, 80024c4 <gcvt+0x20>
 80024bc:	222d      	movs	r2, #45	; 0x2d
 80024be:	3d01      	subs	r5, #1
 80024c0:	f803 2b01 	strb.w	r2, [r3], #1
 80024c4:	2267      	movs	r2, #103	; 0x67
 80024c6:	2100      	movs	r1, #0
 80024c8:	e9cd 5300 	strd	r5, r3, [sp]
 80024cc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80024d0:	4905      	ldr	r1, [pc, #20]	; (80024e8 <gcvt+0x44>)
 80024d2:	4632      	mov	r2, r6
 80024d4:	463b      	mov	r3, r7
 80024d6:	6808      	ldr	r0, [r1, #0]
 80024d8:	f000 f8b2 	bl	8002640 <_gcvt>
 80024dc:	2800      	cmp	r0, #0
 80024de:	bf14      	ite	ne
 80024e0:	4620      	movne	r0, r4
 80024e2:	2000      	moveq	r0, #0
 80024e4:	b005      	add	sp, #20
 80024e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e8:	20000008 	.word	0x20000008

080024ec <__errno>:
 80024ec:	4b01      	ldr	r3, [pc, #4]	; (80024f4 <__errno+0x8>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000008 	.word	0x20000008

080024f8 <__libc_init_array>:
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	2600      	movs	r6, #0
 80024fc:	4d0c      	ldr	r5, [pc, #48]	; (8002530 <__libc_init_array+0x38>)
 80024fe:	4c0d      	ldr	r4, [pc, #52]	; (8002534 <__libc_init_array+0x3c>)
 8002500:	1b64      	subs	r4, r4, r5
 8002502:	10a4      	asrs	r4, r4, #2
 8002504:	42a6      	cmp	r6, r4
 8002506:	d109      	bne.n	800251c <__libc_init_array+0x24>
 8002508:	f002 fc1e 	bl	8004d48 <_init>
 800250c:	2600      	movs	r6, #0
 800250e:	4d0a      	ldr	r5, [pc, #40]	; (8002538 <__libc_init_array+0x40>)
 8002510:	4c0a      	ldr	r4, [pc, #40]	; (800253c <__libc_init_array+0x44>)
 8002512:	1b64      	subs	r4, r4, r5
 8002514:	10a4      	asrs	r4, r4, #2
 8002516:	42a6      	cmp	r6, r4
 8002518:	d105      	bne.n	8002526 <__libc_init_array+0x2e>
 800251a:	bd70      	pop	{r4, r5, r6, pc}
 800251c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002520:	4798      	blx	r3
 8002522:	3601      	adds	r6, #1
 8002524:	e7ee      	b.n	8002504 <__libc_init_array+0xc>
 8002526:	f855 3b04 	ldr.w	r3, [r5], #4
 800252a:	4798      	blx	r3
 800252c:	3601      	adds	r6, #1
 800252e:	e7f2      	b.n	8002516 <__libc_init_array+0x1e>
 8002530:	08005020 	.word	0x08005020
 8002534:	08005020 	.word	0x08005020
 8002538:	08005020 	.word	0x08005020
 800253c:	08005024 	.word	0x08005024

08002540 <memset>:
 8002540:	4603      	mov	r3, r0
 8002542:	4402      	add	r2, r0
 8002544:	4293      	cmp	r3, r2
 8002546:	d100      	bne.n	800254a <memset+0xa>
 8002548:	4770      	bx	lr
 800254a:	f803 1b01 	strb.w	r1, [r3], #1
 800254e:	e7f9      	b.n	8002544 <memset+0x4>

08002550 <print_e>:
 8002550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002552:	b08b      	sub	sp, #44	; 0x2c
 8002554:	460d      	mov	r5, r1
 8002556:	a908      	add	r1, sp, #32
 8002558:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800255a:	9104      	str	r1, [sp, #16]
 800255c:	a907      	add	r1, sp, #28
 800255e:	9103      	str	r1, [sp, #12]
 8002560:	a909      	add	r1, sp, #36	; 0x24
 8002562:	9102      	str	r1, [sp, #8]
 8002564:	1c71      	adds	r1, r6, #1
 8002566:	9101      	str	r1, [sp, #4]
 8002568:	2102      	movs	r1, #2
 800256a:	9100      	str	r1, [sp, #0]
 800256c:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8002570:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002572:	f000 fe2d 	bl	80031d0 <_dtoa_r>
 8002576:	f242 730f 	movw	r3, #9999	; 0x270f
 800257a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800257c:	4601      	mov	r1, r0
 800257e:	429a      	cmp	r2, r3
 8002580:	d104      	bne.n	800258c <print_e+0x3c>
 8002582:	4628      	mov	r0, r5
 8002584:	f000 fd72 	bl	800306c <strcpy>
 8002588:	b00b      	add	sp, #44	; 0x2c
 800258a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800258c:	462b      	mov	r3, r5
 800258e:	7800      	ldrb	r0, [r0, #0]
 8002590:	2e00      	cmp	r6, #0
 8002592:	f803 0b01 	strb.w	r0, [r3], #1
 8002596:	bfc8      	it	gt
 8002598:	2401      	movgt	r4, #1
 800259a:	202e      	movs	r0, #46	; 0x2e
 800259c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80025a0:	b10d      	cbz	r5, 80025a6 <print_e+0x56>
 80025a2:	2e00      	cmp	r6, #0
 80025a4:	dc37      	bgt.n	8002616 <print_e+0xc6>
 80025a6:	2f67      	cmp	r7, #103	; 0x67
 80025a8:	d046      	beq.n	8002638 <print_e+0xe8>
 80025aa:	2f47      	cmp	r7, #71	; 0x47
 80025ac:	d046      	beq.n	800263c <print_e+0xec>
 80025ae:	212e      	movs	r1, #46	; 0x2e
 80025b0:	2030      	movs	r0, #48	; 0x30
 80025b2:	2e00      	cmp	r6, #0
 80025b4:	dc38      	bgt.n	8002628 <print_e+0xd8>
 80025b6:	1e51      	subs	r1, r2, #1
 80025b8:	2900      	cmp	r1, #0
 80025ba:	bfa8      	it	ge
 80025bc:	222b      	movge	r2, #43	; 0x2b
 80025be:	4618      	mov	r0, r3
 80025c0:	9109      	str	r1, [sp, #36]	; 0x24
 80025c2:	bfbe      	ittt	lt
 80025c4:	212d      	movlt	r1, #45	; 0x2d
 80025c6:	f1c2 0201 	rsblt	r2, r2, #1
 80025ca:	9209      	strlt	r2, [sp, #36]	; 0x24
 80025cc:	f800 7b02 	strb.w	r7, [r0], #2
 80025d0:	bfa8      	it	ge
 80025d2:	705a      	strbge	r2, [r3, #1]
 80025d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025d6:	bfb8      	it	lt
 80025d8:	7059      	strblt	r1, [r3, #1]
 80025da:	2a63      	cmp	r2, #99	; 0x63
 80025dc:	dd0b      	ble.n	80025f6 <print_e+0xa6>
 80025de:	2164      	movs	r1, #100	; 0x64
 80025e0:	fb92 f1f1 	sdiv	r1, r2, r1
 80025e4:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80025e8:	1cd8      	adds	r0, r3, #3
 80025ea:	709c      	strb	r4, [r3, #2]
 80025ec:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80025f0:	fb03 2201 	mla	r2, r3, r1, r2
 80025f4:	9209      	str	r2, [sp, #36]	; 0x24
 80025f6:	220a      	movs	r2, #10
 80025f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025fa:	fb93 f2f2 	sdiv	r2, r3, r2
 80025fe:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8002602:	7001      	strb	r1, [r0, #0]
 8002604:	f06f 0109 	mvn.w	r1, #9
 8002608:	fb01 3302 	mla	r3, r1, r2, r3
 800260c:	3330      	adds	r3, #48	; 0x30
 800260e:	7043      	strb	r3, [r0, #1]
 8002610:	2300      	movs	r3, #0
 8002612:	7083      	strb	r3, [r0, #2]
 8002614:	e7b8      	b.n	8002588 <print_e+0x38>
 8002616:	b10c      	cbz	r4, 800261c <print_e+0xcc>
 8002618:	f803 0b01 	strb.w	r0, [r3], #1
 800261c:	780c      	ldrb	r4, [r1, #0]
 800261e:	3e01      	subs	r6, #1
 8002620:	f803 4b01 	strb.w	r4, [r3], #1
 8002624:	2400      	movs	r4, #0
 8002626:	e7b9      	b.n	800259c <print_e+0x4c>
 8002628:	b10c      	cbz	r4, 800262e <print_e+0xde>
 800262a:	f803 1b01 	strb.w	r1, [r3], #1
 800262e:	2400      	movs	r4, #0
 8002630:	f803 0b01 	strb.w	r0, [r3], #1
 8002634:	3e01      	subs	r6, #1
 8002636:	e7bc      	b.n	80025b2 <print_e+0x62>
 8002638:	2765      	movs	r7, #101	; 0x65
 800263a:	e7bc      	b.n	80025b6 <print_e+0x66>
 800263c:	2745      	movs	r7, #69	; 0x45
 800263e:	e7ba      	b.n	80025b6 <print_e+0x66>

08002640 <_gcvt>:
 8002640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002644:	4690      	mov	r8, r2
 8002646:	461c      	mov	r4, r3
 8002648:	b08b      	sub	sp, #44	; 0x2c
 800264a:	4681      	mov	r9, r0
 800264c:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8002650:	2200      	movs	r2, #0
 8002652:	2300      	movs	r3, #0
 8002654:	4640      	mov	r0, r8
 8002656:	4621      	mov	r1, r4
 8002658:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800265a:	f7fe f9b7 	bl	80009cc <__aeabi_dcmplt>
 800265e:	b108      	cbz	r0, 8002664 <_gcvt+0x24>
 8002660:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8002664:	2200      	movs	r2, #0
 8002666:	2300      	movs	r3, #0
 8002668:	4640      	mov	r0, r8
 800266a:	4621      	mov	r1, r4
 800266c:	f7fe f9a4 	bl	80009b8 <__aeabi_dcmpeq>
 8002670:	b138      	cbz	r0, 8002682 <_gcvt+0x42>
 8002672:	2330      	movs	r3, #48	; 0x30
 8002674:	702b      	strb	r3, [r5, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	706b      	strb	r3, [r5, #1]
 800267a:	4628      	mov	r0, r5
 800267c:	b00b      	add	sp, #44	; 0x2c
 800267e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002682:	4640      	mov	r0, r8
 8002684:	a34c      	add	r3, pc, #304	; (adr r3, 80027b8 <_gcvt+0x178>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	4621      	mov	r1, r4
 800268c:	f7fe f9a8 	bl	80009e0 <__aeabi_dcmple>
 8002690:	b160      	cbz	r0, 80026ac <_gcvt+0x6c>
 8002692:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8002696:	3f01      	subs	r7, #1
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	4642      	mov	r2, r8
 800269c:	4623      	mov	r3, r4
 800269e:	4629      	mov	r1, r5
 80026a0:	4648      	mov	r0, r9
 80026a2:	9602      	str	r6, [sp, #8]
 80026a4:	9700      	str	r7, [sp, #0]
 80026a6:	f7ff ff53 	bl	8002550 <print_e>
 80026aa:	e7e6      	b.n	800267a <_gcvt+0x3a>
 80026ac:	4638      	mov	r0, r7
 80026ae:	f000 fc09 	bl	8002ec4 <_mprec_log10>
 80026b2:	4642      	mov	r2, r8
 80026b4:	4623      	mov	r3, r4
 80026b6:	f7fe f993 	bl	80009e0 <__aeabi_dcmple>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d1e9      	bne.n	8002692 <_gcvt+0x52>
 80026be:	ab09      	add	r3, sp, #36	; 0x24
 80026c0:	9304      	str	r3, [sp, #16]
 80026c2:	ab08      	add	r3, sp, #32
 80026c4:	9303      	str	r3, [sp, #12]
 80026c6:	ab07      	add	r3, sp, #28
 80026c8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80026cc:	2302      	movs	r3, #2
 80026ce:	4642      	mov	r2, r8
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	4648      	mov	r0, r9
 80026d4:	4623      	mov	r3, r4
 80026d6:	f000 fd7b 	bl	80031d0 <_dtoa_r>
 80026da:	f242 730f 	movw	r3, #9999	; 0x270f
 80026de:	9a07      	ldr	r2, [sp, #28]
 80026e0:	4601      	mov	r1, r0
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d00f      	beq.n	8002706 <_gcvt+0xc6>
 80026e6:	462b      	mov	r3, r5
 80026e8:	442f      	add	r7, r5
 80026ea:	4608      	mov	r0, r1
 80026ec:	f811 cb01 	ldrb.w	ip, [r1], #1
 80026f0:	9a07      	ldr	r2, [sp, #28]
 80026f2:	1afc      	subs	r4, r7, r3
 80026f4:	f1bc 0f00 	cmp.w	ip, #0
 80026f8:	d001      	beq.n	80026fe <_gcvt+0xbe>
 80026fa:	2a00      	cmp	r2, #0
 80026fc:	dc07      	bgt.n	800270e <_gcvt+0xce>
 80026fe:	2100      	movs	r1, #0
 8002700:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8002704:	e00c      	b.n	8002720 <_gcvt+0xe0>
 8002706:	4628      	mov	r0, r5
 8002708:	f000 fcb0 	bl	800306c <strcpy>
 800270c:	e7b5      	b.n	800267a <_gcvt+0x3a>
 800270e:	3a01      	subs	r2, #1
 8002710:	f803 cb01 	strb.w	ip, [r3], #1
 8002714:	9207      	str	r2, [sp, #28]
 8002716:	e7e8      	b.n	80026ea <_gcvt+0xaa>
 8002718:	2101      	movs	r1, #1
 800271a:	f803 cb01 	strb.w	ip, [r3], #1
 800271e:	3c01      	subs	r4, #1
 8002720:	2a00      	cmp	r2, #0
 8002722:	4617      	mov	r7, r2
 8002724:	dc2a      	bgt.n	800277c <_gcvt+0x13c>
 8002726:	b101      	cbz	r1, 800272a <_gcvt+0xea>
 8002728:	9207      	str	r2, [sp, #28]
 800272a:	b90e      	cbnz	r6, 8002730 <_gcvt+0xf0>
 800272c:	7802      	ldrb	r2, [r0, #0]
 800272e:	b312      	cbz	r2, 8002776 <_gcvt+0x136>
 8002730:	42ab      	cmp	r3, r5
 8002732:	bf04      	itt	eq
 8002734:	2230      	moveq	r2, #48	; 0x30
 8002736:	f803 2b01 	strbeq.w	r2, [r3], #1
 800273a:	222e      	movs	r2, #46	; 0x2e
 800273c:	4619      	mov	r1, r3
 800273e:	2700      	movs	r7, #0
 8002740:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	9a07      	ldr	r2, [sp, #28]
 8002748:	eba2 0c03 	sub.w	ip, r2, r3
 800274c:	eb1c 0f01 	cmn.w	ip, r1
 8002750:	d41c      	bmi.n	800278c <_gcvt+0x14c>
 8002752:	2a00      	cmp	r2, #0
 8002754:	f1c2 0100 	rsb	r1, r2, #0
 8002758:	bfc8      	it	gt
 800275a:	2100      	movgt	r1, #0
 800275c:	f101 0c01 	add.w	ip, r1, #1
 8002760:	4463      	add	r3, ip
 8002762:	440a      	add	r2, r1
 8002764:	b107      	cbz	r7, 8002768 <_gcvt+0x128>
 8002766:	9207      	str	r2, [sp, #28]
 8002768:	1e42      	subs	r2, r0, #1
 800276a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800276e:	b109      	cbz	r1, 8002774 <_gcvt+0x134>
 8002770:	2c00      	cmp	r4, #0
 8002772:	dc0f      	bgt.n	8002794 <_gcvt+0x154>
 8002774:	b9de      	cbnz	r6, 80027ae <_gcvt+0x16e>
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	e77e      	b.n	800267a <_gcvt+0x3a>
 800277c:	2c00      	cmp	r4, #0
 800277e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8002782:	dcc9      	bgt.n	8002718 <_gcvt+0xd8>
 8002784:	2900      	cmp	r1, #0
 8002786:	d0d0      	beq.n	800272a <_gcvt+0xea>
 8002788:	9707      	str	r7, [sp, #28]
 800278a:	e7ce      	b.n	800272a <_gcvt+0xea>
 800278c:	2701      	movs	r7, #1
 800278e:	f801 ef01 	strb.w	lr, [r1, #1]!
 8002792:	e7db      	b.n	800274c <_gcvt+0x10c>
 8002794:	f803 1b01 	strb.w	r1, [r3], #1
 8002798:	3c01      	subs	r4, #1
 800279a:	e7e6      	b.n	800276a <_gcvt+0x12a>
 800279c:	f802 6b01 	strb.w	r6, [r2], #1
 80027a0:	1a81      	subs	r1, r0, r2
 80027a2:	2900      	cmp	r1, #0
 80027a4:	dcfa      	bgt.n	800279c <_gcvt+0x15c>
 80027a6:	2c00      	cmp	r4, #0
 80027a8:	bfa8      	it	ge
 80027aa:	191b      	addge	r3, r3, r4
 80027ac:	e7e3      	b.n	8002776 <_gcvt+0x136>
 80027ae:	461a      	mov	r2, r3
 80027b0:	2630      	movs	r6, #48	; 0x30
 80027b2:	1918      	adds	r0, r3, r4
 80027b4:	e7f4      	b.n	80027a0 <_gcvt+0x160>
 80027b6:	bf00      	nop
 80027b8:	eb1c432d 	.word	0xeb1c432d
 80027bc:	3f1a36e2 	.word	0x3f1a36e2

080027c0 <_Balloc>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80027c4:	4604      	mov	r4, r0
 80027c6:	460d      	mov	r5, r1
 80027c8:	b976      	cbnz	r6, 80027e8 <_Balloc+0x28>
 80027ca:	2010      	movs	r0, #16
 80027cc:	f001 fb00 	bl	8003dd0 <malloc>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6260      	str	r0, [r4, #36]	; 0x24
 80027d4:	b920      	cbnz	r0, 80027e0 <_Balloc+0x20>
 80027d6:	2166      	movs	r1, #102	; 0x66
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <_Balloc+0x78>)
 80027da:	4818      	ldr	r0, [pc, #96]	; (800283c <_Balloc+0x7c>)
 80027dc:	f000 fc4e 	bl	800307c <__assert_func>
 80027e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80027e4:	6006      	str	r6, [r0, #0]
 80027e6:	60c6      	str	r6, [r0, #12]
 80027e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80027ea:	68f3      	ldr	r3, [r6, #12]
 80027ec:	b183      	cbz	r3, 8002810 <_Balloc+0x50>
 80027ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80027f6:	b9b8      	cbnz	r0, 8002828 <_Balloc+0x68>
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f605 	lsl.w	r6, r1, r5
 80027fe:	1d72      	adds	r2, r6, #5
 8002800:	4620      	mov	r0, r4
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	f000 fb7a 	bl	8002efc <_calloc_r>
 8002808:	b160      	cbz	r0, 8002824 <_Balloc+0x64>
 800280a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800280e:	e00e      	b.n	800282e <_Balloc+0x6e>
 8002810:	2221      	movs	r2, #33	; 0x21
 8002812:	2104      	movs	r1, #4
 8002814:	4620      	mov	r0, r4
 8002816:	f000 fb71 	bl	8002efc <_calloc_r>
 800281a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800281c:	60f0      	str	r0, [r6, #12]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e4      	bne.n	80027ee <_Balloc+0x2e>
 8002824:	2000      	movs	r0, #0
 8002826:	bd70      	pop	{r4, r5, r6, pc}
 8002828:	6802      	ldr	r2, [r0, #0]
 800282a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800282e:	2300      	movs	r3, #0
 8002830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8002834:	e7f7      	b.n	8002826 <_Balloc+0x66>
 8002836:	bf00      	nop
 8002838:	08004d64 	.word	0x08004d64
 800283c:	08004d7b 	.word	0x08004d7b

08002840 <_Bfree>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002844:	4605      	mov	r5, r0
 8002846:	460c      	mov	r4, r1
 8002848:	b976      	cbnz	r6, 8002868 <_Bfree+0x28>
 800284a:	2010      	movs	r0, #16
 800284c:	f001 fac0 	bl	8003dd0 <malloc>
 8002850:	4602      	mov	r2, r0
 8002852:	6268      	str	r0, [r5, #36]	; 0x24
 8002854:	b920      	cbnz	r0, 8002860 <_Bfree+0x20>
 8002856:	218a      	movs	r1, #138	; 0x8a
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <_Bfree+0x3c>)
 800285a:	4809      	ldr	r0, [pc, #36]	; (8002880 <_Bfree+0x40>)
 800285c:	f000 fc0e 	bl	800307c <__assert_func>
 8002860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8002864:	6006      	str	r6, [r0, #0]
 8002866:	60c6      	str	r6, [r0, #12]
 8002868:	b13c      	cbz	r4, 800287a <_Bfree+0x3a>
 800286a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800286c:	6862      	ldr	r2, [r4, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002874:	6021      	str	r1, [r4, #0]
 8002876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	08004d64 	.word	0x08004d64
 8002880:	08004d7b 	.word	0x08004d7b

08002884 <__multadd>:
 8002884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002888:	4607      	mov	r7, r0
 800288a:	460c      	mov	r4, r1
 800288c:	461e      	mov	r6, r3
 800288e:	2000      	movs	r0, #0
 8002890:	690d      	ldr	r5, [r1, #16]
 8002892:	f101 0c14 	add.w	ip, r1, #20
 8002896:	f8dc 3000 	ldr.w	r3, [ip]
 800289a:	3001      	adds	r0, #1
 800289c:	b299      	uxth	r1, r3
 800289e:	fb02 6101 	mla	r1, r2, r1, r6
 80028a2:	0c1e      	lsrs	r6, r3, #16
 80028a4:	0c0b      	lsrs	r3, r1, #16
 80028a6:	fb02 3306 	mla	r3, r2, r6, r3
 80028aa:	b289      	uxth	r1, r1
 80028ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80028b0:	4285      	cmp	r5, r0
 80028b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80028b6:	f84c 1b04 	str.w	r1, [ip], #4
 80028ba:	dcec      	bgt.n	8002896 <__multadd+0x12>
 80028bc:	b30e      	cbz	r6, 8002902 <__multadd+0x7e>
 80028be:	68a3      	ldr	r3, [r4, #8]
 80028c0:	42ab      	cmp	r3, r5
 80028c2:	dc19      	bgt.n	80028f8 <__multadd+0x74>
 80028c4:	6861      	ldr	r1, [r4, #4]
 80028c6:	4638      	mov	r0, r7
 80028c8:	3101      	adds	r1, #1
 80028ca:	f7ff ff79 	bl	80027c0 <_Balloc>
 80028ce:	4680      	mov	r8, r0
 80028d0:	b928      	cbnz	r0, 80028de <__multadd+0x5a>
 80028d2:	4602      	mov	r2, r0
 80028d4:	21b5      	movs	r1, #181	; 0xb5
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <__multadd+0x84>)
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <__multadd+0x88>)
 80028da:	f000 fbcf 	bl	800307c <__assert_func>
 80028de:	6922      	ldr	r2, [r4, #16]
 80028e0:	f104 010c 	add.w	r1, r4, #12
 80028e4:	3202      	adds	r2, #2
 80028e6:	0092      	lsls	r2, r2, #2
 80028e8:	300c      	adds	r0, #12
 80028ea:	f001 fa79 	bl	8003de0 <memcpy>
 80028ee:	4621      	mov	r1, r4
 80028f0:	4638      	mov	r0, r7
 80028f2:	f7ff ffa5 	bl	8002840 <_Bfree>
 80028f6:	4644      	mov	r4, r8
 80028f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80028fc:	3501      	adds	r5, #1
 80028fe:	615e      	str	r6, [r3, #20]
 8002900:	6125      	str	r5, [r4, #16]
 8002902:	4620      	mov	r0, r4
 8002904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002908:	08004dd7 	.word	0x08004dd7
 800290c:	08004d7b 	.word	0x08004d7b

08002910 <__hi0bits>:
 8002910:	0c02      	lsrs	r2, r0, #16
 8002912:	0412      	lsls	r2, r2, #16
 8002914:	4603      	mov	r3, r0
 8002916:	b9ca      	cbnz	r2, 800294c <__hi0bits+0x3c>
 8002918:	0403      	lsls	r3, r0, #16
 800291a:	2010      	movs	r0, #16
 800291c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8002920:	bf04      	itt	eq
 8002922:	021b      	lsleq	r3, r3, #8
 8002924:	3008      	addeq	r0, #8
 8002926:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800292a:	bf04      	itt	eq
 800292c:	011b      	lsleq	r3, r3, #4
 800292e:	3004      	addeq	r0, #4
 8002930:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8002934:	bf04      	itt	eq
 8002936:	009b      	lsleq	r3, r3, #2
 8002938:	3002      	addeq	r0, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	db05      	blt.n	800294a <__hi0bits+0x3a>
 800293e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8002942:	f100 0001 	add.w	r0, r0, #1
 8002946:	bf08      	it	eq
 8002948:	2020      	moveq	r0, #32
 800294a:	4770      	bx	lr
 800294c:	2000      	movs	r0, #0
 800294e:	e7e5      	b.n	800291c <__hi0bits+0xc>

08002950 <__lo0bits>:
 8002950:	6803      	ldr	r3, [r0, #0]
 8002952:	4602      	mov	r2, r0
 8002954:	f013 0007 	ands.w	r0, r3, #7
 8002958:	d00b      	beq.n	8002972 <__lo0bits+0x22>
 800295a:	07d9      	lsls	r1, r3, #31
 800295c:	d421      	bmi.n	80029a2 <__lo0bits+0x52>
 800295e:	0798      	lsls	r0, r3, #30
 8002960:	bf49      	itett	mi
 8002962:	085b      	lsrmi	r3, r3, #1
 8002964:	089b      	lsrpl	r3, r3, #2
 8002966:	2001      	movmi	r0, #1
 8002968:	6013      	strmi	r3, [r2, #0]
 800296a:	bf5c      	itt	pl
 800296c:	2002      	movpl	r0, #2
 800296e:	6013      	strpl	r3, [r2, #0]
 8002970:	4770      	bx	lr
 8002972:	b299      	uxth	r1, r3
 8002974:	b909      	cbnz	r1, 800297a <__lo0bits+0x2a>
 8002976:	2010      	movs	r0, #16
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	b2d9      	uxtb	r1, r3
 800297c:	b909      	cbnz	r1, 8002982 <__lo0bits+0x32>
 800297e:	3008      	adds	r0, #8
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	0719      	lsls	r1, r3, #28
 8002984:	bf04      	itt	eq
 8002986:	091b      	lsreq	r3, r3, #4
 8002988:	3004      	addeq	r0, #4
 800298a:	0799      	lsls	r1, r3, #30
 800298c:	bf04      	itt	eq
 800298e:	089b      	lsreq	r3, r3, #2
 8002990:	3002      	addeq	r0, #2
 8002992:	07d9      	lsls	r1, r3, #31
 8002994:	d403      	bmi.n	800299e <__lo0bits+0x4e>
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	f100 0001 	add.w	r0, r0, #1
 800299c:	d003      	beq.n	80029a6 <__lo0bits+0x56>
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4770      	bx	lr
 80029a2:	2000      	movs	r0, #0
 80029a4:	4770      	bx	lr
 80029a6:	2020      	movs	r0, #32
 80029a8:	4770      	bx	lr
	...

080029ac <__i2b>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	460c      	mov	r4, r1
 80029b0:	2101      	movs	r1, #1
 80029b2:	f7ff ff05 	bl	80027c0 <_Balloc>
 80029b6:	4602      	mov	r2, r0
 80029b8:	b928      	cbnz	r0, 80029c6 <__i2b+0x1a>
 80029ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <__i2b+0x24>)
 80029c0:	4804      	ldr	r0, [pc, #16]	; (80029d4 <__i2b+0x28>)
 80029c2:	f000 fb5b 	bl	800307c <__assert_func>
 80029c6:	2301      	movs	r3, #1
 80029c8:	6144      	str	r4, [r0, #20]
 80029ca:	6103      	str	r3, [r0, #16]
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	bf00      	nop
 80029d0:	08004dd7 	.word	0x08004dd7
 80029d4:	08004d7b 	.word	0x08004d7b

080029d8 <__multiply>:
 80029d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029dc:	4691      	mov	r9, r2
 80029de:	690a      	ldr	r2, [r1, #16]
 80029e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80029e4:	460c      	mov	r4, r1
 80029e6:	429a      	cmp	r2, r3
 80029e8:	bfbe      	ittt	lt
 80029ea:	460b      	movlt	r3, r1
 80029ec:	464c      	movlt	r4, r9
 80029ee:	4699      	movlt	r9, r3
 80029f0:	6927      	ldr	r7, [r4, #16]
 80029f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80029f6:	68a3      	ldr	r3, [r4, #8]
 80029f8:	6861      	ldr	r1, [r4, #4]
 80029fa:	eb07 060a 	add.w	r6, r7, sl
 80029fe:	42b3      	cmp	r3, r6
 8002a00:	b085      	sub	sp, #20
 8002a02:	bfb8      	it	lt
 8002a04:	3101      	addlt	r1, #1
 8002a06:	f7ff fedb 	bl	80027c0 <_Balloc>
 8002a0a:	b930      	cbnz	r0, 8002a1a <__multiply+0x42>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	f240 115d 	movw	r1, #349	; 0x15d
 8002a12:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <__multiply+0x148>)
 8002a14:	4843      	ldr	r0, [pc, #268]	; (8002b24 <__multiply+0x14c>)
 8002a16:	f000 fb31 	bl	800307c <__assert_func>
 8002a1a:	f100 0514 	add.w	r5, r0, #20
 8002a1e:	462b      	mov	r3, r5
 8002a20:	2200      	movs	r2, #0
 8002a22:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8002a26:	4543      	cmp	r3, r8
 8002a28:	d321      	bcc.n	8002a6e <__multiply+0x96>
 8002a2a:	f104 0314 	add.w	r3, r4, #20
 8002a2e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8002a32:	f109 0314 	add.w	r3, r9, #20
 8002a36:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8002a3a:	9202      	str	r2, [sp, #8]
 8002a3c:	1b3a      	subs	r2, r7, r4
 8002a3e:	3a15      	subs	r2, #21
 8002a40:	f022 0203 	bic.w	r2, r2, #3
 8002a44:	3204      	adds	r2, #4
 8002a46:	f104 0115 	add.w	r1, r4, #21
 8002a4a:	428f      	cmp	r7, r1
 8002a4c:	bf38      	it	cc
 8002a4e:	2204      	movcc	r2, #4
 8002a50:	9201      	str	r2, [sp, #4]
 8002a52:	9a02      	ldr	r2, [sp, #8]
 8002a54:	9303      	str	r3, [sp, #12]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d80c      	bhi.n	8002a74 <__multiply+0x9c>
 8002a5a:	2e00      	cmp	r6, #0
 8002a5c:	dd03      	ble.n	8002a66 <__multiply+0x8e>
 8002a5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d059      	beq.n	8002b1a <__multiply+0x142>
 8002a66:	6106      	str	r6, [r0, #16]
 8002a68:	b005      	add	sp, #20
 8002a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a6e:	f843 2b04 	str.w	r2, [r3], #4
 8002a72:	e7d8      	b.n	8002a26 <__multiply+0x4e>
 8002a74:	f8b3 a000 	ldrh.w	sl, [r3]
 8002a78:	f1ba 0f00 	cmp.w	sl, #0
 8002a7c:	d023      	beq.n	8002ac6 <__multiply+0xee>
 8002a7e:	46a9      	mov	r9, r5
 8002a80:	f04f 0c00 	mov.w	ip, #0
 8002a84:	f104 0e14 	add.w	lr, r4, #20
 8002a88:	f85e 2b04 	ldr.w	r2, [lr], #4
 8002a8c:	f8d9 1000 	ldr.w	r1, [r9]
 8002a90:	fa1f fb82 	uxth.w	fp, r2
 8002a94:	b289      	uxth	r1, r1
 8002a96:	fb0a 110b 	mla	r1, sl, fp, r1
 8002a9a:	4461      	add	r1, ip
 8002a9c:	f8d9 c000 	ldr.w	ip, [r9]
 8002aa0:	0c12      	lsrs	r2, r2, #16
 8002aa2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8002aa6:	fb0a c202 	mla	r2, sl, r2, ip
 8002aaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8002aae:	b289      	uxth	r1, r1
 8002ab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002ab4:	4577      	cmp	r7, lr
 8002ab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8002aba:	f849 1b04 	str.w	r1, [r9], #4
 8002abe:	d8e3      	bhi.n	8002a88 <__multiply+0xb0>
 8002ac0:	9a01      	ldr	r2, [sp, #4]
 8002ac2:	f845 c002 	str.w	ip, [r5, r2]
 8002ac6:	9a03      	ldr	r2, [sp, #12]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8002ace:	f1b9 0f00 	cmp.w	r9, #0
 8002ad2:	d020      	beq.n	8002b16 <__multiply+0x13e>
 8002ad4:	46ae      	mov	lr, r5
 8002ad6:	f04f 0a00 	mov.w	sl, #0
 8002ada:	6829      	ldr	r1, [r5, #0]
 8002adc:	f104 0c14 	add.w	ip, r4, #20
 8002ae0:	f8bc b000 	ldrh.w	fp, [ip]
 8002ae4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8002ae8:	b289      	uxth	r1, r1
 8002aea:	fb09 220b 	mla	r2, r9, fp, r2
 8002aee:	4492      	add	sl, r2
 8002af0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8002af4:	f84e 1b04 	str.w	r1, [lr], #4
 8002af8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8002afc:	f8be 1000 	ldrh.w	r1, [lr]
 8002b00:	0c12      	lsrs	r2, r2, #16
 8002b02:	fb09 1102 	mla	r1, r9, r2, r1
 8002b06:	4567      	cmp	r7, ip
 8002b08:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8002b0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002b10:	d8e6      	bhi.n	8002ae0 <__multiply+0x108>
 8002b12:	9a01      	ldr	r2, [sp, #4]
 8002b14:	50a9      	str	r1, [r5, r2]
 8002b16:	3504      	adds	r5, #4
 8002b18:	e79b      	b.n	8002a52 <__multiply+0x7a>
 8002b1a:	3e01      	subs	r6, #1
 8002b1c:	e79d      	b.n	8002a5a <__multiply+0x82>
 8002b1e:	bf00      	nop
 8002b20:	08004dd7 	.word	0x08004dd7
 8002b24:	08004d7b 	.word	0x08004d7b

08002b28 <__pow5mult>:
 8002b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b2c:	4615      	mov	r5, r2
 8002b2e:	f012 0203 	ands.w	r2, r2, #3
 8002b32:	4606      	mov	r6, r0
 8002b34:	460f      	mov	r7, r1
 8002b36:	d007      	beq.n	8002b48 <__pow5mult+0x20>
 8002b38:	4c25      	ldr	r4, [pc, #148]	; (8002bd0 <__pow5mult+0xa8>)
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002b42:	f7ff fe9f 	bl	8002884 <__multadd>
 8002b46:	4607      	mov	r7, r0
 8002b48:	10ad      	asrs	r5, r5, #2
 8002b4a:	d03d      	beq.n	8002bc8 <__pow5mult+0xa0>
 8002b4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8002b4e:	b97c      	cbnz	r4, 8002b70 <__pow5mult+0x48>
 8002b50:	2010      	movs	r0, #16
 8002b52:	f001 f93d 	bl	8003dd0 <malloc>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6270      	str	r0, [r6, #36]	; 0x24
 8002b5a:	b928      	cbnz	r0, 8002b68 <__pow5mult+0x40>
 8002b5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <__pow5mult+0xac>)
 8002b62:	481d      	ldr	r0, [pc, #116]	; (8002bd8 <__pow5mult+0xb0>)
 8002b64:	f000 fa8a 	bl	800307c <__assert_func>
 8002b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002b6c:	6004      	str	r4, [r0, #0]
 8002b6e:	60c4      	str	r4, [r0, #12]
 8002b70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8002b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8002b78:	b94c      	cbnz	r4, 8002b8e <__pow5mult+0x66>
 8002b7a:	f240 2171 	movw	r1, #625	; 0x271
 8002b7e:	4630      	mov	r0, r6
 8002b80:	f7ff ff14 	bl	80029ac <__i2b>
 8002b84:	2300      	movs	r3, #0
 8002b86:	4604      	mov	r4, r0
 8002b88:	f8c8 0008 	str.w	r0, [r8, #8]
 8002b8c:	6003      	str	r3, [r0, #0]
 8002b8e:	f04f 0900 	mov.w	r9, #0
 8002b92:	07eb      	lsls	r3, r5, #31
 8002b94:	d50a      	bpl.n	8002bac <__pow5mult+0x84>
 8002b96:	4639      	mov	r1, r7
 8002b98:	4622      	mov	r2, r4
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	f7ff ff1c 	bl	80029d8 <__multiply>
 8002ba0:	4680      	mov	r8, r0
 8002ba2:	4639      	mov	r1, r7
 8002ba4:	4630      	mov	r0, r6
 8002ba6:	f7ff fe4b 	bl	8002840 <_Bfree>
 8002baa:	4647      	mov	r7, r8
 8002bac:	106d      	asrs	r5, r5, #1
 8002bae:	d00b      	beq.n	8002bc8 <__pow5mult+0xa0>
 8002bb0:	6820      	ldr	r0, [r4, #0]
 8002bb2:	b938      	cbnz	r0, 8002bc4 <__pow5mult+0x9c>
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	4630      	mov	r0, r6
 8002bba:	f7ff ff0d 	bl	80029d8 <__multiply>
 8002bbe:	6020      	str	r0, [r4, #0]
 8002bc0:	f8c0 9000 	str.w	r9, [r0]
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	e7e4      	b.n	8002b92 <__pow5mult+0x6a>
 8002bc8:	4638      	mov	r0, r7
 8002bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bce:	bf00      	nop
 8002bd0:	08004ed8 	.word	0x08004ed8
 8002bd4:	08004d64 	.word	0x08004d64
 8002bd8:	08004d7b 	.word	0x08004d7b

08002bdc <__lshift>:
 8002bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be0:	460c      	mov	r4, r1
 8002be2:	4607      	mov	r7, r0
 8002be4:	4691      	mov	r9, r2
 8002be6:	6923      	ldr	r3, [r4, #16]
 8002be8:	6849      	ldr	r1, [r1, #4]
 8002bea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8002bee:	68a3      	ldr	r3, [r4, #8]
 8002bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8002bf4:	f108 0601 	add.w	r6, r8, #1
 8002bf8:	42b3      	cmp	r3, r6
 8002bfa:	db0b      	blt.n	8002c14 <__lshift+0x38>
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	f7ff fddf 	bl	80027c0 <_Balloc>
 8002c02:	4605      	mov	r5, r0
 8002c04:	b948      	cbnz	r0, 8002c1a <__lshift+0x3e>
 8002c06:	4602      	mov	r2, r0
 8002c08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002c0c:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <__lshift+0xd8>)
 8002c0e:	482a      	ldr	r0, [pc, #168]	; (8002cb8 <__lshift+0xdc>)
 8002c10:	f000 fa34 	bl	800307c <__assert_func>
 8002c14:	3101      	adds	r1, #1
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	e7ee      	b.n	8002bf8 <__lshift+0x1c>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f100 0114 	add.w	r1, r0, #20
 8002c20:	f100 0210 	add.w	r2, r0, #16
 8002c24:	4618      	mov	r0, r3
 8002c26:	4553      	cmp	r3, sl
 8002c28:	db37      	blt.n	8002c9a <__lshift+0xbe>
 8002c2a:	6920      	ldr	r0, [r4, #16]
 8002c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002c30:	f104 0314 	add.w	r3, r4, #20
 8002c34:	f019 091f 	ands.w	r9, r9, #31
 8002c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8002c3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c40:	d02f      	beq.n	8002ca2 <__lshift+0xc6>
 8002c42:	468a      	mov	sl, r1
 8002c44:	f04f 0c00 	mov.w	ip, #0
 8002c48:	f1c9 0e20 	rsb	lr, r9, #32
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	fa02 f209 	lsl.w	r2, r2, r9
 8002c52:	ea42 020c 	orr.w	r2, r2, ip
 8002c56:	f84a 2b04 	str.w	r2, [sl], #4
 8002c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c5e:	4298      	cmp	r0, r3
 8002c60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8002c64:	d8f2      	bhi.n	8002c4c <__lshift+0x70>
 8002c66:	1b03      	subs	r3, r0, r4
 8002c68:	3b15      	subs	r3, #21
 8002c6a:	f023 0303 	bic.w	r3, r3, #3
 8002c6e:	3304      	adds	r3, #4
 8002c70:	f104 0215 	add.w	r2, r4, #21
 8002c74:	4290      	cmp	r0, r2
 8002c76:	bf38      	it	cc
 8002c78:	2304      	movcc	r3, #4
 8002c7a:	f841 c003 	str.w	ip, [r1, r3]
 8002c7e:	f1bc 0f00 	cmp.w	ip, #0
 8002c82:	d001      	beq.n	8002c88 <__lshift+0xac>
 8002c84:	f108 0602 	add.w	r6, r8, #2
 8002c88:	3e01      	subs	r6, #1
 8002c8a:	4638      	mov	r0, r7
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	612e      	str	r6, [r5, #16]
 8002c90:	f7ff fdd6 	bl	8002840 <_Bfree>
 8002c94:	4628      	mov	r0, r5
 8002c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	e7c1      	b.n	8002c26 <__lshift+0x4a>
 8002ca2:	3904      	subs	r1, #4
 8002ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ca8:	4298      	cmp	r0, r3
 8002caa:	f841 2f04 	str.w	r2, [r1, #4]!
 8002cae:	d8f9      	bhi.n	8002ca4 <__lshift+0xc8>
 8002cb0:	e7ea      	b.n	8002c88 <__lshift+0xac>
 8002cb2:	bf00      	nop
 8002cb4:	08004dd7 	.word	0x08004dd7
 8002cb8:	08004d7b 	.word	0x08004d7b

08002cbc <__mcmp>:
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	690a      	ldr	r2, [r1, #16]
 8002cc0:	6900      	ldr	r0, [r0, #16]
 8002cc2:	b530      	push	{r4, r5, lr}
 8002cc4:	1a80      	subs	r0, r0, r2
 8002cc6:	d10d      	bne.n	8002ce4 <__mcmp+0x28>
 8002cc8:	3314      	adds	r3, #20
 8002cca:	3114      	adds	r1, #20
 8002ccc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8002cd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8002cd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8002cd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8002cdc:	4295      	cmp	r5, r2
 8002cde:	d002      	beq.n	8002ce6 <__mcmp+0x2a>
 8002ce0:	d304      	bcc.n	8002cec <__mcmp+0x30>
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	bd30      	pop	{r4, r5, pc}
 8002ce6:	42a3      	cmp	r3, r4
 8002ce8:	d3f4      	bcc.n	8002cd4 <__mcmp+0x18>
 8002cea:	e7fb      	b.n	8002ce4 <__mcmp+0x28>
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cf0:	e7f8      	b.n	8002ce4 <__mcmp+0x28>
	...

08002cf4 <__mdiff>:
 8002cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf8:	460d      	mov	r5, r1
 8002cfa:	4607      	mov	r7, r0
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4628      	mov	r0, r5
 8002d00:	4614      	mov	r4, r2
 8002d02:	f7ff ffdb 	bl	8002cbc <__mcmp>
 8002d06:	1e06      	subs	r6, r0, #0
 8002d08:	d111      	bne.n	8002d2e <__mdiff+0x3a>
 8002d0a:	4631      	mov	r1, r6
 8002d0c:	4638      	mov	r0, r7
 8002d0e:	f7ff fd57 	bl	80027c0 <_Balloc>
 8002d12:	4602      	mov	r2, r0
 8002d14:	b928      	cbnz	r0, 8002d22 <__mdiff+0x2e>
 8002d16:	f240 2132 	movw	r1, #562	; 0x232
 8002d1a:	4b3a      	ldr	r3, [pc, #232]	; (8002e04 <__mdiff+0x110>)
 8002d1c:	483a      	ldr	r0, [pc, #232]	; (8002e08 <__mdiff+0x114>)
 8002d1e:	f000 f9ad 	bl	800307c <__assert_func>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8002d28:	4610      	mov	r0, r2
 8002d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2e:	bfa4      	itt	ge
 8002d30:	4623      	movge	r3, r4
 8002d32:	462c      	movge	r4, r5
 8002d34:	4638      	mov	r0, r7
 8002d36:	6861      	ldr	r1, [r4, #4]
 8002d38:	bfa6      	itte	ge
 8002d3a:	461d      	movge	r5, r3
 8002d3c:	2600      	movge	r6, #0
 8002d3e:	2601      	movlt	r6, #1
 8002d40:	f7ff fd3e 	bl	80027c0 <_Balloc>
 8002d44:	4602      	mov	r2, r0
 8002d46:	b918      	cbnz	r0, 8002d50 <__mdiff+0x5c>
 8002d48:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <__mdiff+0x110>)
 8002d4e:	e7e5      	b.n	8002d1c <__mdiff+0x28>
 8002d50:	f102 0814 	add.w	r8, r2, #20
 8002d54:	46c2      	mov	sl, r8
 8002d56:	f04f 0c00 	mov.w	ip, #0
 8002d5a:	6927      	ldr	r7, [r4, #16]
 8002d5c:	60c6      	str	r6, [r0, #12]
 8002d5e:	692e      	ldr	r6, [r5, #16]
 8002d60:	f104 0014 	add.w	r0, r4, #20
 8002d64:	f105 0914 	add.w	r9, r5, #20
 8002d68:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8002d6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8002d70:	3410      	adds	r4, #16
 8002d72:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8002d76:	f859 3b04 	ldr.w	r3, [r9], #4
 8002d7a:	fa1f f18b 	uxth.w	r1, fp
 8002d7e:	448c      	add	ip, r1
 8002d80:	b299      	uxth	r1, r3
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	ebac 0101 	sub.w	r1, ip, r1
 8002d88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8002d8c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8002d90:	b289      	uxth	r1, r1
 8002d92:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8002d96:	454e      	cmp	r6, r9
 8002d98:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002d9c:	f84a 3b04 	str.w	r3, [sl], #4
 8002da0:	d8e7      	bhi.n	8002d72 <__mdiff+0x7e>
 8002da2:	1b73      	subs	r3, r6, r5
 8002da4:	3b15      	subs	r3, #21
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	3515      	adds	r5, #21
 8002dac:	3304      	adds	r3, #4
 8002dae:	42ae      	cmp	r6, r5
 8002db0:	bf38      	it	cc
 8002db2:	2304      	movcc	r3, #4
 8002db4:	4418      	add	r0, r3
 8002db6:	4443      	add	r3, r8
 8002db8:	461e      	mov	r6, r3
 8002dba:	4605      	mov	r5, r0
 8002dbc:	4575      	cmp	r5, lr
 8002dbe:	d30e      	bcc.n	8002dde <__mdiff+0xea>
 8002dc0:	f10e 0103 	add.w	r1, lr, #3
 8002dc4:	1a09      	subs	r1, r1, r0
 8002dc6:	f021 0103 	bic.w	r1, r1, #3
 8002dca:	3803      	subs	r0, #3
 8002dcc:	4586      	cmp	lr, r0
 8002dce:	bf38      	it	cc
 8002dd0:	2100      	movcc	r1, #0
 8002dd2:	4419      	add	r1, r3
 8002dd4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8002dd8:	b18b      	cbz	r3, 8002dfe <__mdiff+0x10a>
 8002dda:	6117      	str	r7, [r2, #16]
 8002ddc:	e7a4      	b.n	8002d28 <__mdiff+0x34>
 8002dde:	f855 8b04 	ldr.w	r8, [r5], #4
 8002de2:	fa1f f188 	uxth.w	r1, r8
 8002de6:	4461      	add	r1, ip
 8002de8:	140c      	asrs	r4, r1, #16
 8002dea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8002dee:	b289      	uxth	r1, r1
 8002df0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8002df4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8002df8:	f846 1b04 	str.w	r1, [r6], #4
 8002dfc:	e7de      	b.n	8002dbc <__mdiff+0xc8>
 8002dfe:	3f01      	subs	r7, #1
 8002e00:	e7e8      	b.n	8002dd4 <__mdiff+0xe0>
 8002e02:	bf00      	nop
 8002e04:	08004dd7 	.word	0x08004dd7
 8002e08:	08004d7b 	.word	0x08004d7b

08002e0c <__d2b>:
 8002e0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e10:	2101      	movs	r1, #1
 8002e12:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8002e16:	4690      	mov	r8, r2
 8002e18:	461d      	mov	r5, r3
 8002e1a:	f7ff fcd1 	bl	80027c0 <_Balloc>
 8002e1e:	4604      	mov	r4, r0
 8002e20:	b930      	cbnz	r0, 8002e30 <__d2b+0x24>
 8002e22:	4602      	mov	r2, r0
 8002e24:	f240 310a 	movw	r1, #778	; 0x30a
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <__d2b+0xb0>)
 8002e2a:	4825      	ldr	r0, [pc, #148]	; (8002ec0 <__d2b+0xb4>)
 8002e2c:	f000 f926 	bl	800307c <__assert_func>
 8002e30:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8002e34:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8002e38:	bb2d      	cbnz	r5, 8002e86 <__d2b+0x7a>
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	f1b8 0300 	subs.w	r3, r8, #0
 8002e40:	d026      	beq.n	8002e90 <__d2b+0x84>
 8002e42:	4668      	mov	r0, sp
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	f7ff fd83 	bl	8002950 <__lo0bits>
 8002e4a:	9900      	ldr	r1, [sp, #0]
 8002e4c:	b1f0      	cbz	r0, 8002e8c <__d2b+0x80>
 8002e4e:	9a01      	ldr	r2, [sp, #4]
 8002e50:	f1c0 0320 	rsb	r3, r0, #32
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	40c2      	lsrs	r2, r0
 8002e5c:	6163      	str	r3, [r4, #20]
 8002e5e:	9201      	str	r2, [sp, #4]
 8002e60:	9b01      	ldr	r3, [sp, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf14      	ite	ne
 8002e66:	2102      	movne	r1, #2
 8002e68:	2101      	moveq	r1, #1
 8002e6a:	61a3      	str	r3, [r4, #24]
 8002e6c:	6121      	str	r1, [r4, #16]
 8002e6e:	b1c5      	cbz	r5, 8002ea2 <__d2b+0x96>
 8002e70:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8002e74:	4405      	add	r5, r0
 8002e76:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8002e7a:	603d      	str	r5, [r7, #0]
 8002e7c:	6030      	str	r0, [r6, #0]
 8002e7e:	4620      	mov	r0, r4
 8002e80:	b002      	add	sp, #8
 8002e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8a:	e7d6      	b.n	8002e3a <__d2b+0x2e>
 8002e8c:	6161      	str	r1, [r4, #20]
 8002e8e:	e7e7      	b.n	8002e60 <__d2b+0x54>
 8002e90:	a801      	add	r0, sp, #4
 8002e92:	f7ff fd5d 	bl	8002950 <__lo0bits>
 8002e96:	2101      	movs	r1, #1
 8002e98:	9b01      	ldr	r3, [sp, #4]
 8002e9a:	6121      	str	r1, [r4, #16]
 8002e9c:	6163      	str	r3, [r4, #20]
 8002e9e:	3020      	adds	r0, #32
 8002ea0:	e7e5      	b.n	8002e6e <__d2b+0x62>
 8002ea2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8002ea6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8002eaa:	6038      	str	r0, [r7, #0]
 8002eac:	6918      	ldr	r0, [r3, #16]
 8002eae:	f7ff fd2f 	bl	8002910 <__hi0bits>
 8002eb2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8002eb6:	6031      	str	r1, [r6, #0]
 8002eb8:	e7e1      	b.n	8002e7e <__d2b+0x72>
 8002eba:	bf00      	nop
 8002ebc:	08004dd7 	.word	0x08004dd7
 8002ec0:	08004d7b 	.word	0x08004d7b

08002ec4 <_mprec_log10>:
 8002ec4:	2817      	cmp	r0, #23
 8002ec6:	b5d0      	push	{r4, r6, r7, lr}
 8002ec8:	4604      	mov	r4, r0
 8002eca:	dc05      	bgt.n	8002ed8 <_mprec_log10+0x14>
 8002ecc:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <_mprec_log10+0x2c>)
 8002ece:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8002ed2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002ed6:	bdd0      	pop	{r4, r6, r7, pc}
 8002ed8:	2000      	movs	r0, #0
 8002eda:	2600      	movs	r6, #0
 8002edc:	4905      	ldr	r1, [pc, #20]	; (8002ef4 <_mprec_log10+0x30>)
 8002ede:	4f06      	ldr	r7, [pc, #24]	; (8002ef8 <_mprec_log10+0x34>)
 8002ee0:	4632      	mov	r2, r6
 8002ee2:	463b      	mov	r3, r7
 8002ee4:	f7fd fb00 	bl	80004e8 <__aeabi_dmul>
 8002ee8:	3c01      	subs	r4, #1
 8002eea:	d1f9      	bne.n	8002ee0 <_mprec_log10+0x1c>
 8002eec:	e7f3      	b.n	8002ed6 <_mprec_log10+0x12>
 8002eee:	bf00      	nop
 8002ef0:	08004e10 	.word	0x08004e10
 8002ef4:	3ff00000 	.word	0x3ff00000
 8002ef8:	40240000 	.word	0x40240000

08002efc <_calloc_r>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	fba1 5402 	umull	r5, r4, r1, r2
 8002f02:	b934      	cbnz	r4, 8002f12 <_calloc_r+0x16>
 8002f04:	4629      	mov	r1, r5
 8002f06:	f000 f82d 	bl	8002f64 <_malloc_r>
 8002f0a:	4606      	mov	r6, r0
 8002f0c:	b928      	cbnz	r0, 8002f1a <_calloc_r+0x1e>
 8002f0e:	4630      	mov	r0, r6
 8002f10:	bd70      	pop	{r4, r5, r6, pc}
 8002f12:	220c      	movs	r2, #12
 8002f14:	2600      	movs	r6, #0
 8002f16:	6002      	str	r2, [r0, #0]
 8002f18:	e7f9      	b.n	8002f0e <_calloc_r+0x12>
 8002f1a:	462a      	mov	r2, r5
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	f7ff fb0f 	bl	8002540 <memset>
 8002f22:	e7f4      	b.n	8002f0e <_calloc_r+0x12>

08002f24 <sbrk_aligned>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	4e0e      	ldr	r6, [pc, #56]	; (8002f60 <sbrk_aligned+0x3c>)
 8002f28:	460c      	mov	r4, r1
 8002f2a:	6831      	ldr	r1, [r6, #0]
 8002f2c:	4605      	mov	r5, r0
 8002f2e:	b911      	cbnz	r1, 8002f36 <sbrk_aligned+0x12>
 8002f30:	f000 f88c 	bl	800304c <_sbrk_r>
 8002f34:	6030      	str	r0, [r6, #0]
 8002f36:	4621      	mov	r1, r4
 8002f38:	4628      	mov	r0, r5
 8002f3a:	f000 f887 	bl	800304c <_sbrk_r>
 8002f3e:	1c43      	adds	r3, r0, #1
 8002f40:	d00a      	beq.n	8002f58 <sbrk_aligned+0x34>
 8002f42:	1cc4      	adds	r4, r0, #3
 8002f44:	f024 0403 	bic.w	r4, r4, #3
 8002f48:	42a0      	cmp	r0, r4
 8002f4a:	d007      	beq.n	8002f5c <sbrk_aligned+0x38>
 8002f4c:	1a21      	subs	r1, r4, r0
 8002f4e:	4628      	mov	r0, r5
 8002f50:	f000 f87c 	bl	800304c <_sbrk_r>
 8002f54:	3001      	adds	r0, #1
 8002f56:	d101      	bne.n	8002f5c <sbrk_aligned+0x38>
 8002f58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	20000110 	.word	0x20000110

08002f64 <_malloc_r>:
 8002f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f68:	1ccd      	adds	r5, r1, #3
 8002f6a:	f025 0503 	bic.w	r5, r5, #3
 8002f6e:	3508      	adds	r5, #8
 8002f70:	2d0c      	cmp	r5, #12
 8002f72:	bf38      	it	cc
 8002f74:	250c      	movcc	r5, #12
 8002f76:	2d00      	cmp	r5, #0
 8002f78:	4607      	mov	r7, r0
 8002f7a:	db01      	blt.n	8002f80 <_malloc_r+0x1c>
 8002f7c:	42a9      	cmp	r1, r5
 8002f7e:	d905      	bls.n	8002f8c <_malloc_r+0x28>
 8002f80:	230c      	movs	r3, #12
 8002f82:	2600      	movs	r6, #0
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4630      	mov	r0, r6
 8002f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f8c:	4e2e      	ldr	r6, [pc, #184]	; (8003048 <_malloc_r+0xe4>)
 8002f8e:	f000 ff35 	bl	8003dfc <__malloc_lock>
 8002f92:	6833      	ldr	r3, [r6, #0]
 8002f94:	461c      	mov	r4, r3
 8002f96:	bb34      	cbnz	r4, 8002fe6 <_malloc_r+0x82>
 8002f98:	4629      	mov	r1, r5
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	f7ff ffc2 	bl	8002f24 <sbrk_aligned>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	d14d      	bne.n	8003042 <_malloc_r+0xde>
 8002fa6:	6834      	ldr	r4, [r6, #0]
 8002fa8:	4626      	mov	r6, r4
 8002faa:	2e00      	cmp	r6, #0
 8002fac:	d140      	bne.n	8003030 <_malloc_r+0xcc>
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	4631      	mov	r1, r6
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	eb04 0803 	add.w	r8, r4, r3
 8002fb8:	f000 f848 	bl	800304c <_sbrk_r>
 8002fbc:	4580      	cmp	r8, r0
 8002fbe:	d13a      	bne.n	8003036 <_malloc_r+0xd2>
 8002fc0:	6821      	ldr	r1, [r4, #0]
 8002fc2:	3503      	adds	r5, #3
 8002fc4:	1a6d      	subs	r5, r5, r1
 8002fc6:	f025 0503 	bic.w	r5, r5, #3
 8002fca:	3508      	adds	r5, #8
 8002fcc:	2d0c      	cmp	r5, #12
 8002fce:	bf38      	it	cc
 8002fd0:	250c      	movcc	r5, #12
 8002fd2:	4638      	mov	r0, r7
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	f7ff ffa5 	bl	8002f24 <sbrk_aligned>
 8002fda:	3001      	adds	r0, #1
 8002fdc:	d02b      	beq.n	8003036 <_malloc_r+0xd2>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	442b      	add	r3, r5
 8002fe2:	6023      	str	r3, [r4, #0]
 8002fe4:	e00e      	b.n	8003004 <_malloc_r+0xa0>
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	1b52      	subs	r2, r2, r5
 8002fea:	d41e      	bmi.n	800302a <_malloc_r+0xc6>
 8002fec:	2a0b      	cmp	r2, #11
 8002fee:	d916      	bls.n	800301e <_malloc_r+0xba>
 8002ff0:	1961      	adds	r1, r4, r5
 8002ff2:	42a3      	cmp	r3, r4
 8002ff4:	6025      	str	r5, [r4, #0]
 8002ff6:	bf18      	it	ne
 8002ff8:	6059      	strne	r1, [r3, #4]
 8002ffa:	6863      	ldr	r3, [r4, #4]
 8002ffc:	bf08      	it	eq
 8002ffe:	6031      	streq	r1, [r6, #0]
 8003000:	5162      	str	r2, [r4, r5]
 8003002:	604b      	str	r3, [r1, #4]
 8003004:	4638      	mov	r0, r7
 8003006:	f104 060b 	add.w	r6, r4, #11
 800300a:	f000 fefd 	bl	8003e08 <__malloc_unlock>
 800300e:	f026 0607 	bic.w	r6, r6, #7
 8003012:	1d23      	adds	r3, r4, #4
 8003014:	1af2      	subs	r2, r6, r3
 8003016:	d0b6      	beq.n	8002f86 <_malloc_r+0x22>
 8003018:	1b9b      	subs	r3, r3, r6
 800301a:	50a3      	str	r3, [r4, r2]
 800301c:	e7b3      	b.n	8002f86 <_malloc_r+0x22>
 800301e:	6862      	ldr	r2, [r4, #4]
 8003020:	42a3      	cmp	r3, r4
 8003022:	bf0c      	ite	eq
 8003024:	6032      	streq	r2, [r6, #0]
 8003026:	605a      	strne	r2, [r3, #4]
 8003028:	e7ec      	b.n	8003004 <_malloc_r+0xa0>
 800302a:	4623      	mov	r3, r4
 800302c:	6864      	ldr	r4, [r4, #4]
 800302e:	e7b2      	b.n	8002f96 <_malloc_r+0x32>
 8003030:	4634      	mov	r4, r6
 8003032:	6876      	ldr	r6, [r6, #4]
 8003034:	e7b9      	b.n	8002faa <_malloc_r+0x46>
 8003036:	230c      	movs	r3, #12
 8003038:	4638      	mov	r0, r7
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	f000 fee4 	bl	8003e08 <__malloc_unlock>
 8003040:	e7a1      	b.n	8002f86 <_malloc_r+0x22>
 8003042:	6025      	str	r5, [r4, #0]
 8003044:	e7de      	b.n	8003004 <_malloc_r+0xa0>
 8003046:	bf00      	nop
 8003048:	2000010c 	.word	0x2000010c

0800304c <_sbrk_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	2300      	movs	r3, #0
 8003050:	4d05      	ldr	r5, [pc, #20]	; (8003068 <_sbrk_r+0x1c>)
 8003052:	4604      	mov	r4, r0
 8003054:	4608      	mov	r0, r1
 8003056:	602b      	str	r3, [r5, #0]
 8003058:	f7ff f9c4 	bl	80023e4 <_sbrk>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_sbrk_r+0x1a>
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	b103      	cbz	r3, 8003066 <_sbrk_r+0x1a>
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	20000114 	.word	0x20000114

0800306c <strcpy>:
 800306c:	4603      	mov	r3, r0
 800306e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003072:	f803 2b01 	strb.w	r2, [r3], #1
 8003076:	2a00      	cmp	r2, #0
 8003078:	d1f9      	bne.n	800306e <strcpy+0x2>
 800307a:	4770      	bx	lr

0800307c <__assert_func>:
 800307c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800307e:	4614      	mov	r4, r2
 8003080:	461a      	mov	r2, r3
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <__assert_func+0x2c>)
 8003084:	4605      	mov	r5, r0
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68d8      	ldr	r0, [r3, #12]
 800308a:	b14c      	cbz	r4, 80030a0 <__assert_func+0x24>
 800308c:	4b07      	ldr	r3, [pc, #28]	; (80030ac <__assert_func+0x30>)
 800308e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003092:	9100      	str	r1, [sp, #0]
 8003094:	462b      	mov	r3, r5
 8003096:	4906      	ldr	r1, [pc, #24]	; (80030b0 <__assert_func+0x34>)
 8003098:	f000 fe88 	bl	8003dac <fiprintf>
 800309c:	f001 fab0 	bl	8004600 <abort>
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <__assert_func+0x38>)
 80030a2:	461c      	mov	r4, r3
 80030a4:	e7f3      	b.n	800308e <__assert_func+0x12>
 80030a6:	bf00      	nop
 80030a8:	20000008 	.word	0x20000008
 80030ac:	08004ee4 	.word	0x08004ee4
 80030b0:	08004ef1 	.word	0x08004ef1
 80030b4:	08004f1f 	.word	0x08004f1f

080030b8 <quorem>:
 80030b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030bc:	6903      	ldr	r3, [r0, #16]
 80030be:	690c      	ldr	r4, [r1, #16]
 80030c0:	4607      	mov	r7, r0
 80030c2:	42a3      	cmp	r3, r4
 80030c4:	f2c0 8082 	blt.w	80031cc <quorem+0x114>
 80030c8:	3c01      	subs	r4, #1
 80030ca:	f100 0514 	add.w	r5, r0, #20
 80030ce:	f101 0814 	add.w	r8, r1, #20
 80030d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80030dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80030e0:	3301      	adds	r3, #1
 80030e2:	429a      	cmp	r2, r3
 80030e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80030e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80030ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80030f0:	d331      	bcc.n	8003156 <quorem+0x9e>
 80030f2:	f04f 0e00 	mov.w	lr, #0
 80030f6:	4640      	mov	r0, r8
 80030f8:	46ac      	mov	ip, r5
 80030fa:	46f2      	mov	sl, lr
 80030fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8003100:	b293      	uxth	r3, r2
 8003102:	fb06 e303 	mla	r3, r6, r3, lr
 8003106:	0c12      	lsrs	r2, r2, #16
 8003108:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800310c:	b29b      	uxth	r3, r3
 800310e:	fb06 e202 	mla	r2, r6, r2, lr
 8003112:	ebaa 0303 	sub.w	r3, sl, r3
 8003116:	f8dc a000 	ldr.w	sl, [ip]
 800311a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800311e:	fa1f fa8a 	uxth.w	sl, sl
 8003122:	4453      	add	r3, sl
 8003124:	f8dc a000 	ldr.w	sl, [ip]
 8003128:	b292      	uxth	r2, r2
 800312a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800312e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003132:	b29b      	uxth	r3, r3
 8003134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003138:	4581      	cmp	r9, r0
 800313a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800313e:	f84c 3b04 	str.w	r3, [ip], #4
 8003142:	d2db      	bcs.n	80030fc <quorem+0x44>
 8003144:	f855 300b 	ldr.w	r3, [r5, fp]
 8003148:	b92b      	cbnz	r3, 8003156 <quorem+0x9e>
 800314a:	9b01      	ldr	r3, [sp, #4]
 800314c:	3b04      	subs	r3, #4
 800314e:	429d      	cmp	r5, r3
 8003150:	461a      	mov	r2, r3
 8003152:	d32f      	bcc.n	80031b4 <quorem+0xfc>
 8003154:	613c      	str	r4, [r7, #16]
 8003156:	4638      	mov	r0, r7
 8003158:	f7ff fdb0 	bl	8002cbc <__mcmp>
 800315c:	2800      	cmp	r0, #0
 800315e:	db25      	blt.n	80031ac <quorem+0xf4>
 8003160:	4628      	mov	r0, r5
 8003162:	f04f 0c00 	mov.w	ip, #0
 8003166:	3601      	adds	r6, #1
 8003168:	f858 1b04 	ldr.w	r1, [r8], #4
 800316c:	f8d0 e000 	ldr.w	lr, [r0]
 8003170:	b28b      	uxth	r3, r1
 8003172:	ebac 0303 	sub.w	r3, ip, r3
 8003176:	fa1f f28e 	uxth.w	r2, lr
 800317a:	4413      	add	r3, r2
 800317c:	0c0a      	lsrs	r2, r1, #16
 800317e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003182:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003186:	b29b      	uxth	r3, r3
 8003188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800318c:	45c1      	cmp	r9, r8
 800318e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003192:	f840 3b04 	str.w	r3, [r0], #4
 8003196:	d2e7      	bcs.n	8003168 <quorem+0xb0>
 8003198:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800319c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80031a0:	b922      	cbnz	r2, 80031ac <quorem+0xf4>
 80031a2:	3b04      	subs	r3, #4
 80031a4:	429d      	cmp	r5, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	d30a      	bcc.n	80031c0 <quorem+0x108>
 80031aa:	613c      	str	r4, [r7, #16]
 80031ac:	4630      	mov	r0, r6
 80031ae:	b003      	add	sp, #12
 80031b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	3b04      	subs	r3, #4
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d1cb      	bne.n	8003154 <quorem+0x9c>
 80031bc:	3c01      	subs	r4, #1
 80031be:	e7c6      	b.n	800314e <quorem+0x96>
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	3b04      	subs	r3, #4
 80031c4:	2a00      	cmp	r2, #0
 80031c6:	d1f0      	bne.n	80031aa <quorem+0xf2>
 80031c8:	3c01      	subs	r4, #1
 80031ca:	e7eb      	b.n	80031a4 <quorem+0xec>
 80031cc:	2000      	movs	r0, #0
 80031ce:	e7ee      	b.n	80031ae <quorem+0xf6>

080031d0 <_dtoa_r>:
 80031d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d4:	4616      	mov	r6, r2
 80031d6:	461f      	mov	r7, r3
 80031d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80031da:	b099      	sub	sp, #100	; 0x64
 80031dc:	4605      	mov	r5, r0
 80031de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80031e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80031e6:	b974      	cbnz	r4, 8003206 <_dtoa_r+0x36>
 80031e8:	2010      	movs	r0, #16
 80031ea:	f000 fdf1 	bl	8003dd0 <malloc>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6268      	str	r0, [r5, #36]	; 0x24
 80031f2:	b920      	cbnz	r0, 80031fe <_dtoa_r+0x2e>
 80031f4:	21ea      	movs	r1, #234	; 0xea
 80031f6:	4ba8      	ldr	r3, [pc, #672]	; (8003498 <_dtoa_r+0x2c8>)
 80031f8:	48a8      	ldr	r0, [pc, #672]	; (800349c <_dtoa_r+0x2cc>)
 80031fa:	f7ff ff3f 	bl	800307c <__assert_func>
 80031fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003202:	6004      	str	r4, [r0, #0]
 8003204:	60c4      	str	r4, [r0, #12]
 8003206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	b151      	cbz	r1, 8003222 <_dtoa_r+0x52>
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	2301      	movs	r3, #1
 8003210:	4093      	lsls	r3, r2
 8003212:	604a      	str	r2, [r1, #4]
 8003214:	608b      	str	r3, [r1, #8]
 8003216:	4628      	mov	r0, r5
 8003218:	f7ff fb12 	bl	8002840 <_Bfree>
 800321c:	2200      	movs	r2, #0
 800321e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	1e3b      	subs	r3, r7, #0
 8003224:	bfaf      	iteee	ge
 8003226:	2300      	movge	r3, #0
 8003228:	2201      	movlt	r2, #1
 800322a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800322e:	9305      	strlt	r3, [sp, #20]
 8003230:	bfa8      	it	ge
 8003232:	f8c8 3000 	strge.w	r3, [r8]
 8003236:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800323a:	4b99      	ldr	r3, [pc, #612]	; (80034a0 <_dtoa_r+0x2d0>)
 800323c:	bfb8      	it	lt
 800323e:	f8c8 2000 	strlt.w	r2, [r8]
 8003242:	ea33 0309 	bics.w	r3, r3, r9
 8003246:	d119      	bne.n	800327c <_dtoa_r+0xac>
 8003248:	f242 730f 	movw	r3, #9999	; 0x270f
 800324c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003254:	4333      	orrs	r3, r6
 8003256:	f000 857f 	beq.w	8003d58 <_dtoa_r+0xb88>
 800325a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800325c:	b953      	cbnz	r3, 8003274 <_dtoa_r+0xa4>
 800325e:	4b91      	ldr	r3, [pc, #580]	; (80034a4 <_dtoa_r+0x2d4>)
 8003260:	e022      	b.n	80032a8 <_dtoa_r+0xd8>
 8003262:	4b91      	ldr	r3, [pc, #580]	; (80034a8 <_dtoa_r+0x2d8>)
 8003264:	9303      	str	r3, [sp, #12]
 8003266:	3308      	adds	r3, #8
 8003268:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	9803      	ldr	r0, [sp, #12]
 800326e:	b019      	add	sp, #100	; 0x64
 8003270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003274:	4b8b      	ldr	r3, [pc, #556]	; (80034a4 <_dtoa_r+0x2d4>)
 8003276:	9303      	str	r3, [sp, #12]
 8003278:	3303      	adds	r3, #3
 800327a:	e7f5      	b.n	8003268 <_dtoa_r+0x98>
 800327c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003280:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003288:	2200      	movs	r2, #0
 800328a:	2300      	movs	r3, #0
 800328c:	f7fd fb94 	bl	80009b8 <__aeabi_dcmpeq>
 8003290:	4680      	mov	r8, r0
 8003292:	b158      	cbz	r0, 80032ac <_dtoa_r+0xdc>
 8003294:	2301      	movs	r3, #1
 8003296:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8558 	beq.w	8003d52 <_dtoa_r+0xb82>
 80032a2:	4882      	ldr	r0, [pc, #520]	; (80034ac <_dtoa_r+0x2dc>)
 80032a4:	6018      	str	r0, [r3, #0]
 80032a6:	1e43      	subs	r3, r0, #1
 80032a8:	9303      	str	r3, [sp, #12]
 80032aa:	e7df      	b.n	800326c <_dtoa_r+0x9c>
 80032ac:	ab16      	add	r3, sp, #88	; 0x58
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	ab17      	add	r3, sp, #92	; 0x5c
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4628      	mov	r0, r5
 80032b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80032ba:	f7ff fda7 	bl	8002e0c <__d2b>
 80032be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80032c2:	4683      	mov	fp, r0
 80032c4:	2c00      	cmp	r4, #0
 80032c6:	d07f      	beq.n	80033c8 <_dtoa_r+0x1f8>
 80032c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80032cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80032d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80032da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80032de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80032e2:	2200      	movs	r2, #0
 80032e4:	4b72      	ldr	r3, [pc, #456]	; (80034b0 <_dtoa_r+0x2e0>)
 80032e6:	f7fc ff47 	bl	8000178 <__aeabi_dsub>
 80032ea:	a365      	add	r3, pc, #404	; (adr r3, 8003480 <_dtoa_r+0x2b0>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f7fd f8fa 	bl	80004e8 <__aeabi_dmul>
 80032f4:	a364      	add	r3, pc, #400	; (adr r3, 8003488 <_dtoa_r+0x2b8>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f7fc ff3f 	bl	800017c <__adddf3>
 80032fe:	4606      	mov	r6, r0
 8003300:	4620      	mov	r0, r4
 8003302:	460f      	mov	r7, r1
 8003304:	f7fd f886 	bl	8000414 <__aeabi_i2d>
 8003308:	a361      	add	r3, pc, #388	; (adr r3, 8003490 <_dtoa_r+0x2c0>)
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	f7fd f8eb 	bl	80004e8 <__aeabi_dmul>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4630      	mov	r0, r6
 8003318:	4639      	mov	r1, r7
 800331a:	f7fc ff2f 	bl	800017c <__adddf3>
 800331e:	4606      	mov	r6, r0
 8003320:	460f      	mov	r7, r1
 8003322:	f7fd fb7b 	bl	8000a1c <__aeabi_d2iz>
 8003326:	2200      	movs	r2, #0
 8003328:	4682      	mov	sl, r0
 800332a:	2300      	movs	r3, #0
 800332c:	4630      	mov	r0, r6
 800332e:	4639      	mov	r1, r7
 8003330:	f7fd fb4c 	bl	80009cc <__aeabi_dcmplt>
 8003334:	b148      	cbz	r0, 800334a <_dtoa_r+0x17a>
 8003336:	4650      	mov	r0, sl
 8003338:	f7fd f86c 	bl	8000414 <__aeabi_i2d>
 800333c:	4632      	mov	r2, r6
 800333e:	463b      	mov	r3, r7
 8003340:	f7fd fb3a 	bl	80009b8 <__aeabi_dcmpeq>
 8003344:	b908      	cbnz	r0, 800334a <_dtoa_r+0x17a>
 8003346:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800334a:	f1ba 0f16 	cmp.w	sl, #22
 800334e:	d858      	bhi.n	8003402 <_dtoa_r+0x232>
 8003350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003354:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <_dtoa_r+0x2e4>)
 8003356:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	f7fd fb35 	bl	80009cc <__aeabi_dcmplt>
 8003362:	2800      	cmp	r0, #0
 8003364:	d04f      	beq.n	8003406 <_dtoa_r+0x236>
 8003366:	2300      	movs	r3, #0
 8003368:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800336c:	930f      	str	r3, [sp, #60]	; 0x3c
 800336e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003370:	1b1c      	subs	r4, r3, r4
 8003372:	1e63      	subs	r3, r4, #1
 8003374:	9309      	str	r3, [sp, #36]	; 0x24
 8003376:	bf49      	itett	mi
 8003378:	f1c4 0301 	rsbmi	r3, r4, #1
 800337c:	2300      	movpl	r3, #0
 800337e:	9306      	strmi	r3, [sp, #24]
 8003380:	2300      	movmi	r3, #0
 8003382:	bf54      	ite	pl
 8003384:	9306      	strpl	r3, [sp, #24]
 8003386:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003388:	f1ba 0f00 	cmp.w	sl, #0
 800338c:	db3d      	blt.n	800340a <_dtoa_r+0x23a>
 800338e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003390:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003394:	4453      	add	r3, sl
 8003396:	9309      	str	r3, [sp, #36]	; 0x24
 8003398:	2300      	movs	r3, #0
 800339a:	930a      	str	r3, [sp, #40]	; 0x28
 800339c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800339e:	2b09      	cmp	r3, #9
 80033a0:	f200 808c 	bhi.w	80034bc <_dtoa_r+0x2ec>
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	bfc4      	itt	gt
 80033a8:	3b04      	subgt	r3, #4
 80033aa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80033ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033ae:	bfc8      	it	gt
 80033b0:	2400      	movgt	r4, #0
 80033b2:	f1a3 0302 	sub.w	r3, r3, #2
 80033b6:	bfd8      	it	le
 80033b8:	2401      	movle	r4, #1
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	f200 808a 	bhi.w	80034d4 <_dtoa_r+0x304>
 80033c0:	e8df f003 	tbb	[pc, r3]
 80033c4:	5b4d4f2d 	.word	0x5b4d4f2d
 80033c8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80033cc:	441c      	add	r4, r3
 80033ce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	bfc3      	ittte	gt
 80033d6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80033da:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80033de:	fa09 f303 	lslgt.w	r3, r9, r3
 80033e2:	f1c3 0320 	rsble	r3, r3, #32
 80033e6:	bfc6      	itte	gt
 80033e8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80033ec:	4318      	orrgt	r0, r3
 80033ee:	fa06 f003 	lslle.w	r0, r6, r3
 80033f2:	f7fc ffff 	bl	80003f4 <__aeabi_ui2d>
 80033f6:	2301      	movs	r3, #1
 80033f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80033fc:	3c01      	subs	r4, #1
 80033fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8003400:	e76f      	b.n	80032e2 <_dtoa_r+0x112>
 8003402:	2301      	movs	r3, #1
 8003404:	e7b2      	b.n	800336c <_dtoa_r+0x19c>
 8003406:	900f      	str	r0, [sp, #60]	; 0x3c
 8003408:	e7b1      	b.n	800336e <_dtoa_r+0x19e>
 800340a:	9b06      	ldr	r3, [sp, #24]
 800340c:	eba3 030a 	sub.w	r3, r3, sl
 8003410:	9306      	str	r3, [sp, #24]
 8003412:	f1ca 0300 	rsb	r3, sl, #0
 8003416:	930a      	str	r3, [sp, #40]	; 0x28
 8003418:	2300      	movs	r3, #0
 800341a:	930e      	str	r3, [sp, #56]	; 0x38
 800341c:	e7be      	b.n	800339c <_dtoa_r+0x1cc>
 800341e:	2300      	movs	r3, #0
 8003420:	930b      	str	r3, [sp, #44]	; 0x2c
 8003422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003424:	2b00      	cmp	r3, #0
 8003426:	dc58      	bgt.n	80034da <_dtoa_r+0x30a>
 8003428:	f04f 0901 	mov.w	r9, #1
 800342c:	464b      	mov	r3, r9
 800342e:	f8cd 9020 	str.w	r9, [sp, #32]
 8003432:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003436:	2200      	movs	r2, #0
 8003438:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800343a:	6042      	str	r2, [r0, #4]
 800343c:	2204      	movs	r2, #4
 800343e:	f102 0614 	add.w	r6, r2, #20
 8003442:	429e      	cmp	r6, r3
 8003444:	6841      	ldr	r1, [r0, #4]
 8003446:	d94e      	bls.n	80034e6 <_dtoa_r+0x316>
 8003448:	4628      	mov	r0, r5
 800344a:	f7ff f9b9 	bl	80027c0 <_Balloc>
 800344e:	9003      	str	r0, [sp, #12]
 8003450:	2800      	cmp	r0, #0
 8003452:	d14c      	bne.n	80034ee <_dtoa_r+0x31e>
 8003454:	4602      	mov	r2, r0
 8003456:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <_dtoa_r+0x2e8>)
 800345c:	e6cc      	b.n	80031f8 <_dtoa_r+0x28>
 800345e:	2301      	movs	r3, #1
 8003460:	e7de      	b.n	8003420 <_dtoa_r+0x250>
 8003462:	2300      	movs	r3, #0
 8003464:	930b      	str	r3, [sp, #44]	; 0x2c
 8003466:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003468:	eb0a 0903 	add.w	r9, sl, r3
 800346c:	f109 0301 	add.w	r3, r9, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	9308      	str	r3, [sp, #32]
 8003474:	bfb8      	it	lt
 8003476:	2301      	movlt	r3, #1
 8003478:	e7dd      	b.n	8003436 <_dtoa_r+0x266>
 800347a:	2301      	movs	r3, #1
 800347c:	e7f2      	b.n	8003464 <_dtoa_r+0x294>
 800347e:	bf00      	nop
 8003480:	636f4361 	.word	0x636f4361
 8003484:	3fd287a7 	.word	0x3fd287a7
 8003488:	8b60c8b3 	.word	0x8b60c8b3
 800348c:	3fc68a28 	.word	0x3fc68a28
 8003490:	509f79fb 	.word	0x509f79fb
 8003494:	3fd34413 	.word	0x3fd34413
 8003498:	08004d64 	.word	0x08004d64
 800349c:	08004f2f 	.word	0x08004f2f
 80034a0:	7ff00000 	.word	0x7ff00000
 80034a4:	08004f29 	.word	0x08004f29
 80034a8:	08004f20 	.word	0x08004f20
 80034ac:	08004f2e 	.word	0x08004f2e
 80034b0:	3ff80000 	.word	0x3ff80000
 80034b4:	08004e10 	.word	0x08004e10
 80034b8:	08004dd7 	.word	0x08004dd7
 80034bc:	2401      	movs	r4, #1
 80034be:	2300      	movs	r3, #0
 80034c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80034c2:	9322      	str	r3, [sp, #136]	; 0x88
 80034c4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80034c8:	2200      	movs	r2, #0
 80034ca:	2312      	movs	r3, #18
 80034cc:	f8cd 9020 	str.w	r9, [sp, #32]
 80034d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80034d2:	e7b0      	b.n	8003436 <_dtoa_r+0x266>
 80034d4:	2301      	movs	r3, #1
 80034d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80034d8:	e7f4      	b.n	80034c4 <_dtoa_r+0x2f4>
 80034da:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80034de:	464b      	mov	r3, r9
 80034e0:	f8cd 9020 	str.w	r9, [sp, #32]
 80034e4:	e7a7      	b.n	8003436 <_dtoa_r+0x266>
 80034e6:	3101      	adds	r1, #1
 80034e8:	6041      	str	r1, [r0, #4]
 80034ea:	0052      	lsls	r2, r2, #1
 80034ec:	e7a7      	b.n	800343e <_dtoa_r+0x26e>
 80034ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80034f0:	9a03      	ldr	r2, [sp, #12]
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	9b08      	ldr	r3, [sp, #32]
 80034f6:	2b0e      	cmp	r3, #14
 80034f8:	f200 80a8 	bhi.w	800364c <_dtoa_r+0x47c>
 80034fc:	2c00      	cmp	r4, #0
 80034fe:	f000 80a5 	beq.w	800364c <_dtoa_r+0x47c>
 8003502:	f1ba 0f00 	cmp.w	sl, #0
 8003506:	dd34      	ble.n	8003572 <_dtoa_r+0x3a2>
 8003508:	4a9a      	ldr	r2, [pc, #616]	; (8003774 <_dtoa_r+0x5a4>)
 800350a:	f00a 030f 	and.w	r3, sl, #15
 800350e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003512:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003516:	e9d3 3400 	ldrd	r3, r4, [r3]
 800351a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800351e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003522:	d016      	beq.n	8003552 <_dtoa_r+0x382>
 8003524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003528:	4b93      	ldr	r3, [pc, #588]	; (8003778 <_dtoa_r+0x5a8>)
 800352a:	2703      	movs	r7, #3
 800352c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003530:	f7fd f904 	bl	800073c <__aeabi_ddiv>
 8003534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003538:	f004 040f 	and.w	r4, r4, #15
 800353c:	4e8e      	ldr	r6, [pc, #568]	; (8003778 <_dtoa_r+0x5a8>)
 800353e:	b954      	cbnz	r4, 8003556 <_dtoa_r+0x386>
 8003540:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003548:	f7fd f8f8 	bl	800073c <__aeabi_ddiv>
 800354c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003550:	e029      	b.n	80035a6 <_dtoa_r+0x3d6>
 8003552:	2702      	movs	r7, #2
 8003554:	e7f2      	b.n	800353c <_dtoa_r+0x36c>
 8003556:	07e1      	lsls	r1, r4, #31
 8003558:	d508      	bpl.n	800356c <_dtoa_r+0x39c>
 800355a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800355e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003562:	f7fc ffc1 	bl	80004e8 <__aeabi_dmul>
 8003566:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800356a:	3701      	adds	r7, #1
 800356c:	1064      	asrs	r4, r4, #1
 800356e:	3608      	adds	r6, #8
 8003570:	e7e5      	b.n	800353e <_dtoa_r+0x36e>
 8003572:	f000 80a5 	beq.w	80036c0 <_dtoa_r+0x4f0>
 8003576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800357a:	f1ca 0400 	rsb	r4, sl, #0
 800357e:	4b7d      	ldr	r3, [pc, #500]	; (8003774 <_dtoa_r+0x5a4>)
 8003580:	f004 020f 	and.w	r2, r4, #15
 8003584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f7fc ffac 	bl	80004e8 <__aeabi_dmul>
 8003590:	2702      	movs	r7, #2
 8003592:	2300      	movs	r3, #0
 8003594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003598:	4e77      	ldr	r6, [pc, #476]	; (8003778 <_dtoa_r+0x5a8>)
 800359a:	1124      	asrs	r4, r4, #4
 800359c:	2c00      	cmp	r4, #0
 800359e:	f040 8084 	bne.w	80036aa <_dtoa_r+0x4da>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1d2      	bne.n	800354c <_dtoa_r+0x37c>
 80035a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 808b 	beq.w	80036c4 <_dtoa_r+0x4f4>
 80035ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80035b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80035b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80035ba:	2200      	movs	r2, #0
 80035bc:	4b6f      	ldr	r3, [pc, #444]	; (800377c <_dtoa_r+0x5ac>)
 80035be:	f7fd fa05 	bl	80009cc <__aeabi_dcmplt>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d07e      	beq.n	80036c4 <_dtoa_r+0x4f4>
 80035c6:	9b08      	ldr	r3, [sp, #32]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d07b      	beq.n	80036c4 <_dtoa_r+0x4f4>
 80035cc:	f1b9 0f00 	cmp.w	r9, #0
 80035d0:	dd38      	ble.n	8003644 <_dtoa_r+0x474>
 80035d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80035d6:	2200      	movs	r2, #0
 80035d8:	4b69      	ldr	r3, [pc, #420]	; (8003780 <_dtoa_r+0x5b0>)
 80035da:	f7fc ff85 	bl	80004e8 <__aeabi_dmul>
 80035de:	464c      	mov	r4, r9
 80035e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035e4:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80035e8:	3701      	adds	r7, #1
 80035ea:	4638      	mov	r0, r7
 80035ec:	f7fc ff12 	bl	8000414 <__aeabi_i2d>
 80035f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035f4:	f7fc ff78 	bl	80004e8 <__aeabi_dmul>
 80035f8:	2200      	movs	r2, #0
 80035fa:	4b62      	ldr	r3, [pc, #392]	; (8003784 <_dtoa_r+0x5b4>)
 80035fc:	f7fc fdbe 	bl	800017c <__adddf3>
 8003600:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003604:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003608:	9611      	str	r6, [sp, #68]	; 0x44
 800360a:	2c00      	cmp	r4, #0
 800360c:	d15d      	bne.n	80036ca <_dtoa_r+0x4fa>
 800360e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003612:	2200      	movs	r2, #0
 8003614:	4b5c      	ldr	r3, [pc, #368]	; (8003788 <_dtoa_r+0x5b8>)
 8003616:	f7fc fdaf 	bl	8000178 <__aeabi_dsub>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003622:	4633      	mov	r3, r6
 8003624:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003626:	f7fd f9ef 	bl	8000a08 <__aeabi_dcmpgt>
 800362a:	2800      	cmp	r0, #0
 800362c:	f040 829c 	bne.w	8003b68 <_dtoa_r+0x998>
 8003630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003636:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800363a:	f7fd f9c7 	bl	80009cc <__aeabi_dcmplt>
 800363e:	2800      	cmp	r0, #0
 8003640:	f040 8290 	bne.w	8003b64 <_dtoa_r+0x994>
 8003644:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003648:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800364c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800364e:	2b00      	cmp	r3, #0
 8003650:	f2c0 8152 	blt.w	80038f8 <_dtoa_r+0x728>
 8003654:	f1ba 0f0e 	cmp.w	sl, #14
 8003658:	f300 814e 	bgt.w	80038f8 <_dtoa_r+0x728>
 800365c:	4b45      	ldr	r3, [pc, #276]	; (8003774 <_dtoa_r+0x5a4>)
 800365e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003662:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003666:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800366a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800366c:	2b00      	cmp	r3, #0
 800366e:	f280 80db 	bge.w	8003828 <_dtoa_r+0x658>
 8003672:	9b08      	ldr	r3, [sp, #32]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f300 80d7 	bgt.w	8003828 <_dtoa_r+0x658>
 800367a:	f040 8272 	bne.w	8003b62 <_dtoa_r+0x992>
 800367e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003682:	2200      	movs	r2, #0
 8003684:	4b40      	ldr	r3, [pc, #256]	; (8003788 <_dtoa_r+0x5b8>)
 8003686:	f7fc ff2f 	bl	80004e8 <__aeabi_dmul>
 800368a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800368e:	f7fd f9b1 	bl	80009f4 <__aeabi_dcmpge>
 8003692:	9c08      	ldr	r4, [sp, #32]
 8003694:	4626      	mov	r6, r4
 8003696:	2800      	cmp	r0, #0
 8003698:	f040 8248 	bne.w	8003b2c <_dtoa_r+0x95c>
 800369c:	2331      	movs	r3, #49	; 0x31
 800369e:	9f03      	ldr	r7, [sp, #12]
 80036a0:	f10a 0a01 	add.w	sl, sl, #1
 80036a4:	f807 3b01 	strb.w	r3, [r7], #1
 80036a8:	e244      	b.n	8003b34 <_dtoa_r+0x964>
 80036aa:	07e2      	lsls	r2, r4, #31
 80036ac:	d505      	bpl.n	80036ba <_dtoa_r+0x4ea>
 80036ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80036b2:	f7fc ff19 	bl	80004e8 <__aeabi_dmul>
 80036b6:	2301      	movs	r3, #1
 80036b8:	3701      	adds	r7, #1
 80036ba:	1064      	asrs	r4, r4, #1
 80036bc:	3608      	adds	r6, #8
 80036be:	e76d      	b.n	800359c <_dtoa_r+0x3cc>
 80036c0:	2702      	movs	r7, #2
 80036c2:	e770      	b.n	80035a6 <_dtoa_r+0x3d6>
 80036c4:	46d0      	mov	r8, sl
 80036c6:	9c08      	ldr	r4, [sp, #32]
 80036c8:	e78f      	b.n	80035ea <_dtoa_r+0x41a>
 80036ca:	9903      	ldr	r1, [sp, #12]
 80036cc:	4b29      	ldr	r3, [pc, #164]	; (8003774 <_dtoa_r+0x5a4>)
 80036ce:	4421      	add	r1, r4
 80036d0:	9112      	str	r1, [sp, #72]	; 0x48
 80036d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80036d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80036dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80036e0:	2900      	cmp	r1, #0
 80036e2:	d055      	beq.n	8003790 <_dtoa_r+0x5c0>
 80036e4:	2000      	movs	r0, #0
 80036e6:	4929      	ldr	r1, [pc, #164]	; (800378c <_dtoa_r+0x5bc>)
 80036e8:	f7fd f828 	bl	800073c <__aeabi_ddiv>
 80036ec:	463b      	mov	r3, r7
 80036ee:	4632      	mov	r2, r6
 80036f0:	f7fc fd42 	bl	8000178 <__aeabi_dsub>
 80036f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80036f8:	9f03      	ldr	r7, [sp, #12]
 80036fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036fe:	f7fd f98d 	bl	8000a1c <__aeabi_d2iz>
 8003702:	4604      	mov	r4, r0
 8003704:	f7fc fe86 	bl	8000414 <__aeabi_i2d>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003710:	f7fc fd32 	bl	8000178 <__aeabi_dsub>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	3430      	adds	r4, #48	; 0x30
 800371a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800371e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003722:	f807 4b01 	strb.w	r4, [r7], #1
 8003726:	f7fd f951 	bl	80009cc <__aeabi_dcmplt>
 800372a:	2800      	cmp	r0, #0
 800372c:	d174      	bne.n	8003818 <_dtoa_r+0x648>
 800372e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003732:	2000      	movs	r0, #0
 8003734:	4911      	ldr	r1, [pc, #68]	; (800377c <_dtoa_r+0x5ac>)
 8003736:	f7fc fd1f 	bl	8000178 <__aeabi_dsub>
 800373a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800373e:	f7fd f945 	bl	80009cc <__aeabi_dcmplt>
 8003742:	2800      	cmp	r0, #0
 8003744:	f040 80b7 	bne.w	80038b6 <_dtoa_r+0x6e6>
 8003748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800374a:	429f      	cmp	r7, r3
 800374c:	f43f af7a 	beq.w	8003644 <_dtoa_r+0x474>
 8003750:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003754:	2200      	movs	r2, #0
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <_dtoa_r+0x5b0>)
 8003758:	f7fc fec6 	bl	80004e8 <__aeabi_dmul>
 800375c:	2200      	movs	r2, #0
 800375e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <_dtoa_r+0x5b0>)
 8003768:	f7fc febe 	bl	80004e8 <__aeabi_dmul>
 800376c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003770:	e7c3      	b.n	80036fa <_dtoa_r+0x52a>
 8003772:	bf00      	nop
 8003774:	08004e10 	.word	0x08004e10
 8003778:	08004de8 	.word	0x08004de8
 800377c:	3ff00000 	.word	0x3ff00000
 8003780:	40240000 	.word	0x40240000
 8003784:	401c0000 	.word	0x401c0000
 8003788:	40140000 	.word	0x40140000
 800378c:	3fe00000 	.word	0x3fe00000
 8003790:	4630      	mov	r0, r6
 8003792:	4639      	mov	r1, r7
 8003794:	f7fc fea8 	bl	80004e8 <__aeabi_dmul>
 8003798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800379a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800379e:	9c03      	ldr	r4, [sp, #12]
 80037a0:	9314      	str	r3, [sp, #80]	; 0x50
 80037a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037a6:	f7fd f939 	bl	8000a1c <__aeabi_d2iz>
 80037aa:	9015      	str	r0, [sp, #84]	; 0x54
 80037ac:	f7fc fe32 	bl	8000414 <__aeabi_i2d>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037b8:	f7fc fcde 	bl	8000178 <__aeabi_dsub>
 80037bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80037be:	4606      	mov	r6, r0
 80037c0:	3330      	adds	r3, #48	; 0x30
 80037c2:	f804 3b01 	strb.w	r3, [r4], #1
 80037c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037c8:	460f      	mov	r7, r1
 80037ca:	429c      	cmp	r4, r3
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	d124      	bne.n	800381c <_dtoa_r+0x64c>
 80037d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80037d6:	4bb0      	ldr	r3, [pc, #704]	; (8003a98 <_dtoa_r+0x8c8>)
 80037d8:	f7fc fcd0 	bl	800017c <__adddf3>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4630      	mov	r0, r6
 80037e2:	4639      	mov	r1, r7
 80037e4:	f7fd f910 	bl	8000a08 <__aeabi_dcmpgt>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d163      	bne.n	80038b4 <_dtoa_r+0x6e4>
 80037ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80037f0:	2000      	movs	r0, #0
 80037f2:	49a9      	ldr	r1, [pc, #676]	; (8003a98 <_dtoa_r+0x8c8>)
 80037f4:	f7fc fcc0 	bl	8000178 <__aeabi_dsub>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4630      	mov	r0, r6
 80037fe:	4639      	mov	r1, r7
 8003800:	f7fd f8e4 	bl	80009cc <__aeabi_dcmplt>
 8003804:	2800      	cmp	r0, #0
 8003806:	f43f af1d 	beq.w	8003644 <_dtoa_r+0x474>
 800380a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800380c:	1e7b      	subs	r3, r7, #1
 800380e:	9314      	str	r3, [sp, #80]	; 0x50
 8003810:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d0f8      	beq.n	800380a <_dtoa_r+0x63a>
 8003818:	46c2      	mov	sl, r8
 800381a:	e03b      	b.n	8003894 <_dtoa_r+0x6c4>
 800381c:	4b9f      	ldr	r3, [pc, #636]	; (8003a9c <_dtoa_r+0x8cc>)
 800381e:	f7fc fe63 	bl	80004e8 <__aeabi_dmul>
 8003822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003826:	e7bc      	b.n	80037a2 <_dtoa_r+0x5d2>
 8003828:	9f03      	ldr	r7, [sp, #12]
 800382a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800382e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003832:	4640      	mov	r0, r8
 8003834:	4649      	mov	r1, r9
 8003836:	f7fc ff81 	bl	800073c <__aeabi_ddiv>
 800383a:	f7fd f8ef 	bl	8000a1c <__aeabi_d2iz>
 800383e:	4604      	mov	r4, r0
 8003840:	f7fc fde8 	bl	8000414 <__aeabi_i2d>
 8003844:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003848:	f7fc fe4e 	bl	80004e8 <__aeabi_dmul>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4640      	mov	r0, r8
 8003852:	4649      	mov	r1, r9
 8003854:	f7fc fc90 	bl	8000178 <__aeabi_dsub>
 8003858:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800385c:	f807 6b01 	strb.w	r6, [r7], #1
 8003860:	9e03      	ldr	r6, [sp, #12]
 8003862:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003866:	1bbe      	subs	r6, r7, r6
 8003868:	45b4      	cmp	ip, r6
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	d136      	bne.n	80038de <_dtoa_r+0x70e>
 8003870:	f7fc fc84 	bl	800017c <__adddf3>
 8003874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003878:	4680      	mov	r8, r0
 800387a:	4689      	mov	r9, r1
 800387c:	f7fd f8c4 	bl	8000a08 <__aeabi_dcmpgt>
 8003880:	bb58      	cbnz	r0, 80038da <_dtoa_r+0x70a>
 8003882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003886:	4640      	mov	r0, r8
 8003888:	4649      	mov	r1, r9
 800388a:	f7fd f895 	bl	80009b8 <__aeabi_dcmpeq>
 800388e:	b108      	cbz	r0, 8003894 <_dtoa_r+0x6c4>
 8003890:	07e1      	lsls	r1, r4, #31
 8003892:	d422      	bmi.n	80038da <_dtoa_r+0x70a>
 8003894:	4628      	mov	r0, r5
 8003896:	4659      	mov	r1, fp
 8003898:	f7fe ffd2 	bl	8002840 <_Bfree>
 800389c:	2300      	movs	r3, #0
 800389e:	703b      	strb	r3, [r7, #0]
 80038a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80038a2:	f10a 0001 	add.w	r0, sl, #1
 80038a6:	6018      	str	r0, [r3, #0]
 80038a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f43f acde 	beq.w	800326c <_dtoa_r+0x9c>
 80038b0:	601f      	str	r7, [r3, #0]
 80038b2:	e4db      	b.n	800326c <_dtoa_r+0x9c>
 80038b4:	4627      	mov	r7, r4
 80038b6:	463b      	mov	r3, r7
 80038b8:	461f      	mov	r7, r3
 80038ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038be:	2a39      	cmp	r2, #57	; 0x39
 80038c0:	d107      	bne.n	80038d2 <_dtoa_r+0x702>
 80038c2:	9a03      	ldr	r2, [sp, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1f7      	bne.n	80038b8 <_dtoa_r+0x6e8>
 80038c8:	2230      	movs	r2, #48	; 0x30
 80038ca:	9903      	ldr	r1, [sp, #12]
 80038cc:	f108 0801 	add.w	r8, r8, #1
 80038d0:	700a      	strb	r2, [r1, #0]
 80038d2:	781a      	ldrb	r2, [r3, #0]
 80038d4:	3201      	adds	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e79e      	b.n	8003818 <_dtoa_r+0x648>
 80038da:	46d0      	mov	r8, sl
 80038dc:	e7eb      	b.n	80038b6 <_dtoa_r+0x6e6>
 80038de:	2200      	movs	r2, #0
 80038e0:	4b6e      	ldr	r3, [pc, #440]	; (8003a9c <_dtoa_r+0x8cc>)
 80038e2:	f7fc fe01 	bl	80004e8 <__aeabi_dmul>
 80038e6:	2200      	movs	r2, #0
 80038e8:	2300      	movs	r3, #0
 80038ea:	4680      	mov	r8, r0
 80038ec:	4689      	mov	r9, r1
 80038ee:	f7fd f863 	bl	80009b8 <__aeabi_dcmpeq>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d09b      	beq.n	800382e <_dtoa_r+0x65e>
 80038f6:	e7cd      	b.n	8003894 <_dtoa_r+0x6c4>
 80038f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80038fa:	2a00      	cmp	r2, #0
 80038fc:	f000 80d0 	beq.w	8003aa0 <_dtoa_r+0x8d0>
 8003900:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003902:	2a01      	cmp	r2, #1
 8003904:	f300 80ae 	bgt.w	8003a64 <_dtoa_r+0x894>
 8003908:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800390a:	2a00      	cmp	r2, #0
 800390c:	f000 80a6 	beq.w	8003a5c <_dtoa_r+0x88c>
 8003910:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003914:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003916:	9f06      	ldr	r7, [sp, #24]
 8003918:	9a06      	ldr	r2, [sp, #24]
 800391a:	2101      	movs	r1, #1
 800391c:	441a      	add	r2, r3
 800391e:	9206      	str	r2, [sp, #24]
 8003920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003922:	4628      	mov	r0, r5
 8003924:	441a      	add	r2, r3
 8003926:	9209      	str	r2, [sp, #36]	; 0x24
 8003928:	f7ff f840 	bl	80029ac <__i2b>
 800392c:	4606      	mov	r6, r0
 800392e:	2f00      	cmp	r7, #0
 8003930:	dd0c      	ble.n	800394c <_dtoa_r+0x77c>
 8003932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003934:	2b00      	cmp	r3, #0
 8003936:	dd09      	ble.n	800394c <_dtoa_r+0x77c>
 8003938:	42bb      	cmp	r3, r7
 800393a:	bfa8      	it	ge
 800393c:	463b      	movge	r3, r7
 800393e:	9a06      	ldr	r2, [sp, #24]
 8003940:	1aff      	subs	r7, r7, r3
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	9206      	str	r2, [sp, #24]
 8003946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	9309      	str	r3, [sp, #36]	; 0x24
 800394c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800394e:	b1f3      	cbz	r3, 800398e <_dtoa_r+0x7be>
 8003950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80a8 	beq.w	8003aa8 <_dtoa_r+0x8d8>
 8003958:	2c00      	cmp	r4, #0
 800395a:	dd10      	ble.n	800397e <_dtoa_r+0x7ae>
 800395c:	4631      	mov	r1, r6
 800395e:	4622      	mov	r2, r4
 8003960:	4628      	mov	r0, r5
 8003962:	f7ff f8e1 	bl	8002b28 <__pow5mult>
 8003966:	465a      	mov	r2, fp
 8003968:	4601      	mov	r1, r0
 800396a:	4606      	mov	r6, r0
 800396c:	4628      	mov	r0, r5
 800396e:	f7ff f833 	bl	80029d8 <__multiply>
 8003972:	4680      	mov	r8, r0
 8003974:	4659      	mov	r1, fp
 8003976:	4628      	mov	r0, r5
 8003978:	f7fe ff62 	bl	8002840 <_Bfree>
 800397c:	46c3      	mov	fp, r8
 800397e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003980:	1b1a      	subs	r2, r3, r4
 8003982:	d004      	beq.n	800398e <_dtoa_r+0x7be>
 8003984:	4659      	mov	r1, fp
 8003986:	4628      	mov	r0, r5
 8003988:	f7ff f8ce 	bl	8002b28 <__pow5mult>
 800398c:	4683      	mov	fp, r0
 800398e:	2101      	movs	r1, #1
 8003990:	4628      	mov	r0, r5
 8003992:	f7ff f80b 	bl	80029ac <__i2b>
 8003996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003998:	4604      	mov	r4, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	f340 8086 	ble.w	8003aac <_dtoa_r+0x8dc>
 80039a0:	461a      	mov	r2, r3
 80039a2:	4601      	mov	r1, r0
 80039a4:	4628      	mov	r0, r5
 80039a6:	f7ff f8bf 	bl	8002b28 <__pow5mult>
 80039aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80039ac:	4604      	mov	r4, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	dd7f      	ble.n	8003ab2 <_dtoa_r+0x8e2>
 80039b2:	f04f 0800 	mov.w	r8, #0
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80039bc:	6918      	ldr	r0, [r3, #16]
 80039be:	f7fe ffa7 	bl	8002910 <__hi0bits>
 80039c2:	f1c0 0020 	rsb	r0, r0, #32
 80039c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039c8:	4418      	add	r0, r3
 80039ca:	f010 001f 	ands.w	r0, r0, #31
 80039ce:	f000 8092 	beq.w	8003af6 <_dtoa_r+0x926>
 80039d2:	f1c0 0320 	rsb	r3, r0, #32
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	f340 808a 	ble.w	8003af0 <_dtoa_r+0x920>
 80039dc:	f1c0 001c 	rsb	r0, r0, #28
 80039e0:	9b06      	ldr	r3, [sp, #24]
 80039e2:	4407      	add	r7, r0
 80039e4:	4403      	add	r3, r0
 80039e6:	9306      	str	r3, [sp, #24]
 80039e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ea:	4403      	add	r3, r0
 80039ec:	9309      	str	r3, [sp, #36]	; 0x24
 80039ee:	9b06      	ldr	r3, [sp, #24]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	dd05      	ble.n	8003a00 <_dtoa_r+0x830>
 80039f4:	4659      	mov	r1, fp
 80039f6:	461a      	mov	r2, r3
 80039f8:	4628      	mov	r0, r5
 80039fa:	f7ff f8ef 	bl	8002bdc <__lshift>
 80039fe:	4683      	mov	fp, r0
 8003a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	dd05      	ble.n	8003a12 <_dtoa_r+0x842>
 8003a06:	4621      	mov	r1, r4
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f7ff f8e6 	bl	8002bdc <__lshift>
 8003a10:	4604      	mov	r4, r0
 8003a12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d070      	beq.n	8003afa <_dtoa_r+0x92a>
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4658      	mov	r0, fp
 8003a1c:	f7ff f94e 	bl	8002cbc <__mcmp>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	da6a      	bge.n	8003afa <_dtoa_r+0x92a>
 8003a24:	2300      	movs	r3, #0
 8003a26:	4659      	mov	r1, fp
 8003a28:	220a      	movs	r2, #10
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f7fe ff2a 	bl	8002884 <__multadd>
 8003a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a32:	4683      	mov	fp, r0
 8003a34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8194 	beq.w	8003d66 <_dtoa_r+0xb96>
 8003a3e:	4631      	mov	r1, r6
 8003a40:	2300      	movs	r3, #0
 8003a42:	220a      	movs	r2, #10
 8003a44:	4628      	mov	r0, r5
 8003a46:	f7fe ff1d 	bl	8002884 <__multadd>
 8003a4a:	f1b9 0f00 	cmp.w	r9, #0
 8003a4e:	4606      	mov	r6, r0
 8003a50:	f300 8093 	bgt.w	8003b7a <_dtoa_r+0x9aa>
 8003a54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	dc57      	bgt.n	8003b0a <_dtoa_r+0x93a>
 8003a5a:	e08e      	b.n	8003b7a <_dtoa_r+0x9aa>
 8003a5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003a5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003a62:	e757      	b.n	8003914 <_dtoa_r+0x744>
 8003a64:	9b08      	ldr	r3, [sp, #32]
 8003a66:	1e5c      	subs	r4, r3, #1
 8003a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a6a:	42a3      	cmp	r3, r4
 8003a6c:	bfb7      	itett	lt
 8003a6e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003a70:	1b1c      	subge	r4, r3, r4
 8003a72:	1ae2      	sublt	r2, r4, r3
 8003a74:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003a76:	bfbe      	ittt	lt
 8003a78:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003a7a:	189b      	addlt	r3, r3, r2
 8003a7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003a7e:	9b08      	ldr	r3, [sp, #32]
 8003a80:	bfb8      	it	lt
 8003a82:	2400      	movlt	r4, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bfbb      	ittet	lt
 8003a88:	9b06      	ldrlt	r3, [sp, #24]
 8003a8a:	9a08      	ldrlt	r2, [sp, #32]
 8003a8c:	9f06      	ldrge	r7, [sp, #24]
 8003a8e:	1a9f      	sublt	r7, r3, r2
 8003a90:	bfac      	ite	ge
 8003a92:	9b08      	ldrge	r3, [sp, #32]
 8003a94:	2300      	movlt	r3, #0
 8003a96:	e73f      	b.n	8003918 <_dtoa_r+0x748>
 8003a98:	3fe00000 	.word	0x3fe00000
 8003a9c:	40240000 	.word	0x40240000
 8003aa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003aa2:	9f06      	ldr	r7, [sp, #24]
 8003aa4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003aa6:	e742      	b.n	800392e <_dtoa_r+0x75e>
 8003aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003aaa:	e76b      	b.n	8003984 <_dtoa_r+0x7b4>
 8003aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	dc19      	bgt.n	8003ae6 <_dtoa_r+0x916>
 8003ab2:	9b04      	ldr	r3, [sp, #16]
 8003ab4:	b9bb      	cbnz	r3, 8003ae6 <_dtoa_r+0x916>
 8003ab6:	9b05      	ldr	r3, [sp, #20]
 8003ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003abc:	b99b      	cbnz	r3, 8003ae6 <_dtoa_r+0x916>
 8003abe:	9b05      	ldr	r3, [sp, #20]
 8003ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ac4:	0d1b      	lsrs	r3, r3, #20
 8003ac6:	051b      	lsls	r3, r3, #20
 8003ac8:	b183      	cbz	r3, 8003aec <_dtoa_r+0x91c>
 8003aca:	f04f 0801 	mov.w	r8, #1
 8003ace:	9b06      	ldr	r3, [sp, #24]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	9306      	str	r3, [sp, #24]
 8003ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8003ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f af6a 	bne.w	80039b6 <_dtoa_r+0x7e6>
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	e76f      	b.n	80039c6 <_dtoa_r+0x7f6>
 8003ae6:	f04f 0800 	mov.w	r8, #0
 8003aea:	e7f6      	b.n	8003ada <_dtoa_r+0x90a>
 8003aec:	4698      	mov	r8, r3
 8003aee:	e7f4      	b.n	8003ada <_dtoa_r+0x90a>
 8003af0:	f43f af7d 	beq.w	80039ee <_dtoa_r+0x81e>
 8003af4:	4618      	mov	r0, r3
 8003af6:	301c      	adds	r0, #28
 8003af8:	e772      	b.n	80039e0 <_dtoa_r+0x810>
 8003afa:	9b08      	ldr	r3, [sp, #32]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	dc36      	bgt.n	8003b6e <_dtoa_r+0x99e>
 8003b00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	dd33      	ble.n	8003b6e <_dtoa_r+0x99e>
 8003b06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b0a:	f1b9 0f00 	cmp.w	r9, #0
 8003b0e:	d10d      	bne.n	8003b2c <_dtoa_r+0x95c>
 8003b10:	4621      	mov	r1, r4
 8003b12:	464b      	mov	r3, r9
 8003b14:	2205      	movs	r2, #5
 8003b16:	4628      	mov	r0, r5
 8003b18:	f7fe feb4 	bl	8002884 <__multadd>
 8003b1c:	4601      	mov	r1, r0
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4658      	mov	r0, fp
 8003b22:	f7ff f8cb 	bl	8002cbc <__mcmp>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	f73f adb8 	bgt.w	800369c <_dtoa_r+0x4cc>
 8003b2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b2e:	9f03      	ldr	r7, [sp, #12]
 8003b30:	ea6f 0a03 	mvn.w	sl, r3
 8003b34:	f04f 0800 	mov.w	r8, #0
 8003b38:	4621      	mov	r1, r4
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	f7fe fe80 	bl	8002840 <_Bfree>
 8003b40:	2e00      	cmp	r6, #0
 8003b42:	f43f aea7 	beq.w	8003894 <_dtoa_r+0x6c4>
 8003b46:	f1b8 0f00 	cmp.w	r8, #0
 8003b4a:	d005      	beq.n	8003b58 <_dtoa_r+0x988>
 8003b4c:	45b0      	cmp	r8, r6
 8003b4e:	d003      	beq.n	8003b58 <_dtoa_r+0x988>
 8003b50:	4641      	mov	r1, r8
 8003b52:	4628      	mov	r0, r5
 8003b54:	f7fe fe74 	bl	8002840 <_Bfree>
 8003b58:	4631      	mov	r1, r6
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f7fe fe70 	bl	8002840 <_Bfree>
 8003b60:	e698      	b.n	8003894 <_dtoa_r+0x6c4>
 8003b62:	2400      	movs	r4, #0
 8003b64:	4626      	mov	r6, r4
 8003b66:	e7e1      	b.n	8003b2c <_dtoa_r+0x95c>
 8003b68:	46c2      	mov	sl, r8
 8003b6a:	4626      	mov	r6, r4
 8003b6c:	e596      	b.n	800369c <_dtoa_r+0x4cc>
 8003b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80fd 	beq.w	8003d74 <_dtoa_r+0xba4>
 8003b7a:	2f00      	cmp	r7, #0
 8003b7c:	dd05      	ble.n	8003b8a <_dtoa_r+0x9ba>
 8003b7e:	4631      	mov	r1, r6
 8003b80:	463a      	mov	r2, r7
 8003b82:	4628      	mov	r0, r5
 8003b84:	f7ff f82a 	bl	8002bdc <__lshift>
 8003b88:	4606      	mov	r6, r0
 8003b8a:	f1b8 0f00 	cmp.w	r8, #0
 8003b8e:	d05c      	beq.n	8003c4a <_dtoa_r+0xa7a>
 8003b90:	4628      	mov	r0, r5
 8003b92:	6871      	ldr	r1, [r6, #4]
 8003b94:	f7fe fe14 	bl	80027c0 <_Balloc>
 8003b98:	4607      	mov	r7, r0
 8003b9a:	b928      	cbnz	r0, 8003ba8 <_dtoa_r+0x9d8>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003ba2:	4b7f      	ldr	r3, [pc, #508]	; (8003da0 <_dtoa_r+0xbd0>)
 8003ba4:	f7ff bb28 	b.w	80031f8 <_dtoa_r+0x28>
 8003ba8:	6932      	ldr	r2, [r6, #16]
 8003baa:	f106 010c 	add.w	r1, r6, #12
 8003bae:	3202      	adds	r2, #2
 8003bb0:	0092      	lsls	r2, r2, #2
 8003bb2:	300c      	adds	r0, #12
 8003bb4:	f000 f914 	bl	8003de0 <memcpy>
 8003bb8:	2201      	movs	r2, #1
 8003bba:	4639      	mov	r1, r7
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f7ff f80d 	bl	8002bdc <__lshift>
 8003bc2:	46b0      	mov	r8, r6
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	9b03      	ldr	r3, [sp, #12]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	9308      	str	r3, [sp, #32]
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	444b      	add	r3, r9
 8003bd0:	930a      	str	r3, [sp, #40]	; 0x28
 8003bd2:	9b04      	ldr	r3, [sp, #16]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003bda:	9b08      	ldr	r3, [sp, #32]
 8003bdc:	4621      	mov	r1, r4
 8003bde:	3b01      	subs	r3, #1
 8003be0:	4658      	mov	r0, fp
 8003be2:	9304      	str	r3, [sp, #16]
 8003be4:	f7ff fa68 	bl	80030b8 <quorem>
 8003be8:	4603      	mov	r3, r0
 8003bea:	4641      	mov	r1, r8
 8003bec:	3330      	adds	r3, #48	; 0x30
 8003bee:	9006      	str	r0, [sp, #24]
 8003bf0:	4658      	mov	r0, fp
 8003bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bf4:	f7ff f862 	bl	8002cbc <__mcmp>
 8003bf8:	4632      	mov	r2, r6
 8003bfa:	4681      	mov	r9, r0
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	4628      	mov	r0, r5
 8003c00:	f7ff f878 	bl	8002cf4 <__mdiff>
 8003c04:	68c2      	ldr	r2, [r0, #12]
 8003c06:	4607      	mov	r7, r0
 8003c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c0a:	bb02      	cbnz	r2, 8003c4e <_dtoa_r+0xa7e>
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	4658      	mov	r0, fp
 8003c10:	f7ff f854 	bl	8002cbc <__mcmp>
 8003c14:	4602      	mov	r2, r0
 8003c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c18:	4639      	mov	r1, r7
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003c20:	f7fe fe0e 	bl	8002840 <_Bfree>
 8003c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c28:	9f08      	ldr	r7, [sp, #32]
 8003c2a:	ea43 0102 	orr.w	r1, r3, r2
 8003c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c30:	430b      	orrs	r3, r1
 8003c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c34:	d10d      	bne.n	8003c52 <_dtoa_r+0xa82>
 8003c36:	2b39      	cmp	r3, #57	; 0x39
 8003c38:	d029      	beq.n	8003c8e <_dtoa_r+0xabe>
 8003c3a:	f1b9 0f00 	cmp.w	r9, #0
 8003c3e:	dd01      	ble.n	8003c44 <_dtoa_r+0xa74>
 8003c40:	9b06      	ldr	r3, [sp, #24]
 8003c42:	3331      	adds	r3, #49	; 0x31
 8003c44:	9a04      	ldr	r2, [sp, #16]
 8003c46:	7013      	strb	r3, [r2, #0]
 8003c48:	e776      	b.n	8003b38 <_dtoa_r+0x968>
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	e7b9      	b.n	8003bc2 <_dtoa_r+0x9f2>
 8003c4e:	2201      	movs	r2, #1
 8003c50:	e7e2      	b.n	8003c18 <_dtoa_r+0xa48>
 8003c52:	f1b9 0f00 	cmp.w	r9, #0
 8003c56:	db06      	blt.n	8003c66 <_dtoa_r+0xa96>
 8003c58:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003c5a:	ea41 0909 	orr.w	r9, r1, r9
 8003c5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c60:	ea59 0101 	orrs.w	r1, r9, r1
 8003c64:	d120      	bne.n	8003ca8 <_dtoa_r+0xad8>
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	ddec      	ble.n	8003c44 <_dtoa_r+0xa74>
 8003c6a:	4659      	mov	r1, fp
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	4628      	mov	r0, r5
 8003c70:	9308      	str	r3, [sp, #32]
 8003c72:	f7fe ffb3 	bl	8002bdc <__lshift>
 8003c76:	4621      	mov	r1, r4
 8003c78:	4683      	mov	fp, r0
 8003c7a:	f7ff f81f 	bl	8002cbc <__mcmp>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	9b08      	ldr	r3, [sp, #32]
 8003c82:	dc02      	bgt.n	8003c8a <_dtoa_r+0xaba>
 8003c84:	d1de      	bne.n	8003c44 <_dtoa_r+0xa74>
 8003c86:	07da      	lsls	r2, r3, #31
 8003c88:	d5dc      	bpl.n	8003c44 <_dtoa_r+0xa74>
 8003c8a:	2b39      	cmp	r3, #57	; 0x39
 8003c8c:	d1d8      	bne.n	8003c40 <_dtoa_r+0xa70>
 8003c8e:	2339      	movs	r3, #57	; 0x39
 8003c90:	9a04      	ldr	r2, [sp, #16]
 8003c92:	7013      	strb	r3, [r2, #0]
 8003c94:	463b      	mov	r3, r7
 8003c96:	461f      	mov	r7, r3
 8003c98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	2a39      	cmp	r2, #57	; 0x39
 8003ca0:	d050      	beq.n	8003d44 <_dtoa_r+0xb74>
 8003ca2:	3201      	adds	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e747      	b.n	8003b38 <_dtoa_r+0x968>
 8003ca8:	2a00      	cmp	r2, #0
 8003caa:	dd03      	ble.n	8003cb4 <_dtoa_r+0xae4>
 8003cac:	2b39      	cmp	r3, #57	; 0x39
 8003cae:	d0ee      	beq.n	8003c8e <_dtoa_r+0xabe>
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	e7c7      	b.n	8003c44 <_dtoa_r+0xa74>
 8003cb4:	9a08      	ldr	r2, [sp, #32]
 8003cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003cb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003cbc:	428a      	cmp	r2, r1
 8003cbe:	d02a      	beq.n	8003d16 <_dtoa_r+0xb46>
 8003cc0:	4659      	mov	r1, fp
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	220a      	movs	r2, #10
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f7fe fddc 	bl	8002884 <__multadd>
 8003ccc:	45b0      	cmp	r8, r6
 8003cce:	4683      	mov	fp, r0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	f04f 020a 	mov.w	r2, #10
 8003cd8:	4641      	mov	r1, r8
 8003cda:	4628      	mov	r0, r5
 8003cdc:	d107      	bne.n	8003cee <_dtoa_r+0xb1e>
 8003cde:	f7fe fdd1 	bl	8002884 <__multadd>
 8003ce2:	4680      	mov	r8, r0
 8003ce4:	4606      	mov	r6, r0
 8003ce6:	9b08      	ldr	r3, [sp, #32]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	9308      	str	r3, [sp, #32]
 8003cec:	e775      	b.n	8003bda <_dtoa_r+0xa0a>
 8003cee:	f7fe fdc9 	bl	8002884 <__multadd>
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4680      	mov	r8, r0
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	220a      	movs	r2, #10
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f7fe fdc2 	bl	8002884 <__multadd>
 8003d00:	4606      	mov	r6, r0
 8003d02:	e7f0      	b.n	8003ce6 <_dtoa_r+0xb16>
 8003d04:	f1b9 0f00 	cmp.w	r9, #0
 8003d08:	bfcc      	ite	gt
 8003d0a:	464f      	movgt	r7, r9
 8003d0c:	2701      	movle	r7, #1
 8003d0e:	f04f 0800 	mov.w	r8, #0
 8003d12:	9a03      	ldr	r2, [sp, #12]
 8003d14:	4417      	add	r7, r2
 8003d16:	4659      	mov	r1, fp
 8003d18:	2201      	movs	r2, #1
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	9308      	str	r3, [sp, #32]
 8003d1e:	f7fe ff5d 	bl	8002bdc <__lshift>
 8003d22:	4621      	mov	r1, r4
 8003d24:	4683      	mov	fp, r0
 8003d26:	f7fe ffc9 	bl	8002cbc <__mcmp>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	dcb2      	bgt.n	8003c94 <_dtoa_r+0xac4>
 8003d2e:	d102      	bne.n	8003d36 <_dtoa_r+0xb66>
 8003d30:	9b08      	ldr	r3, [sp, #32]
 8003d32:	07db      	lsls	r3, r3, #31
 8003d34:	d4ae      	bmi.n	8003c94 <_dtoa_r+0xac4>
 8003d36:	463b      	mov	r3, r7
 8003d38:	461f      	mov	r7, r3
 8003d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d3e:	2a30      	cmp	r2, #48	; 0x30
 8003d40:	d0fa      	beq.n	8003d38 <_dtoa_r+0xb68>
 8003d42:	e6f9      	b.n	8003b38 <_dtoa_r+0x968>
 8003d44:	9a03      	ldr	r2, [sp, #12]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d1a5      	bne.n	8003c96 <_dtoa_r+0xac6>
 8003d4a:	2331      	movs	r3, #49	; 0x31
 8003d4c:	f10a 0a01 	add.w	sl, sl, #1
 8003d50:	e779      	b.n	8003c46 <_dtoa_r+0xa76>
 8003d52:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <_dtoa_r+0xbd4>)
 8003d54:	f7ff baa8 	b.w	80032a8 <_dtoa_r+0xd8>
 8003d58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f47f aa81 	bne.w	8003262 <_dtoa_r+0x92>
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <_dtoa_r+0xbd8>)
 8003d62:	f7ff baa1 	b.w	80032a8 <_dtoa_r+0xd8>
 8003d66:	f1b9 0f00 	cmp.w	r9, #0
 8003d6a:	dc03      	bgt.n	8003d74 <_dtoa_r+0xba4>
 8003d6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	f73f aecb 	bgt.w	8003b0a <_dtoa_r+0x93a>
 8003d74:	9f03      	ldr	r7, [sp, #12]
 8003d76:	4621      	mov	r1, r4
 8003d78:	4658      	mov	r0, fp
 8003d7a:	f7ff f99d 	bl	80030b8 <quorem>
 8003d7e:	9a03      	ldr	r2, [sp, #12]
 8003d80:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003d84:	f807 3b01 	strb.w	r3, [r7], #1
 8003d88:	1aba      	subs	r2, r7, r2
 8003d8a:	4591      	cmp	r9, r2
 8003d8c:	ddba      	ble.n	8003d04 <_dtoa_r+0xb34>
 8003d8e:	4659      	mov	r1, fp
 8003d90:	2300      	movs	r3, #0
 8003d92:	220a      	movs	r2, #10
 8003d94:	4628      	mov	r0, r5
 8003d96:	f7fe fd75 	bl	8002884 <__multadd>
 8003d9a:	4683      	mov	fp, r0
 8003d9c:	e7eb      	b.n	8003d76 <_dtoa_r+0xba6>
 8003d9e:	bf00      	nop
 8003da0:	08004dd7 	.word	0x08004dd7
 8003da4:	08004f2d 	.word	0x08004f2d
 8003da8:	08004f20 	.word	0x08004f20

08003dac <fiprintf>:
 8003dac:	b40e      	push	{r1, r2, r3}
 8003dae:	b503      	push	{r0, r1, lr}
 8003db0:	4601      	mov	r1, r0
 8003db2:	ab03      	add	r3, sp, #12
 8003db4:	4805      	ldr	r0, [pc, #20]	; (8003dcc <fiprintf+0x20>)
 8003db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dba:	6800      	ldr	r0, [r0, #0]
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	f000 f899 	bl	8003ef4 <_vfiprintf_r>
 8003dc2:	b002      	add	sp, #8
 8003dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc8:	b003      	add	sp, #12
 8003dca:	4770      	bx	lr
 8003dcc:	20000008 	.word	0x20000008

08003dd0 <malloc>:
 8003dd0:	4b02      	ldr	r3, [pc, #8]	; (8003ddc <malloc+0xc>)
 8003dd2:	4601      	mov	r1, r0
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	f7ff b8c5 	b.w	8002f64 <_malloc_r>
 8003dda:	bf00      	nop
 8003ddc:	20000008 	.word	0x20000008

08003de0 <memcpy>:
 8003de0:	440a      	add	r2, r1
 8003de2:	4291      	cmp	r1, r2
 8003de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003de8:	d100      	bne.n	8003dec <memcpy+0xc>
 8003dea:	4770      	bx	lr
 8003dec:	b510      	push	{r4, lr}
 8003dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003df2:	4291      	cmp	r1, r2
 8003df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003df8:	d1f9      	bne.n	8003dee <memcpy+0xe>
 8003dfa:	bd10      	pop	{r4, pc}

08003dfc <__malloc_lock>:
 8003dfc:	4801      	ldr	r0, [pc, #4]	; (8003e04 <__malloc_lock+0x8>)
 8003dfe:	f000 bdbb 	b.w	8004978 <__retarget_lock_acquire_recursive>
 8003e02:	bf00      	nop
 8003e04:	20000118 	.word	0x20000118

08003e08 <__malloc_unlock>:
 8003e08:	4801      	ldr	r0, [pc, #4]	; (8003e10 <__malloc_unlock+0x8>)
 8003e0a:	f000 bdb6 	b.w	800497a <__retarget_lock_release_recursive>
 8003e0e:	bf00      	nop
 8003e10:	20000118 	.word	0x20000118

08003e14 <_free_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	4605      	mov	r5, r0
 8003e18:	2900      	cmp	r1, #0
 8003e1a:	d040      	beq.n	8003e9e <_free_r+0x8a>
 8003e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e20:	1f0c      	subs	r4, r1, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bfb8      	it	lt
 8003e26:	18e4      	addlt	r4, r4, r3
 8003e28:	f7ff ffe8 	bl	8003dfc <__malloc_lock>
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <_free_r+0x8c>)
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	b933      	cbnz	r3, 8003e40 <_free_r+0x2c>
 8003e32:	6063      	str	r3, [r4, #4]
 8003e34:	6014      	str	r4, [r2, #0]
 8003e36:	4628      	mov	r0, r5
 8003e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e3c:	f7ff bfe4 	b.w	8003e08 <__malloc_unlock>
 8003e40:	42a3      	cmp	r3, r4
 8003e42:	d908      	bls.n	8003e56 <_free_r+0x42>
 8003e44:	6820      	ldr	r0, [r4, #0]
 8003e46:	1821      	adds	r1, r4, r0
 8003e48:	428b      	cmp	r3, r1
 8003e4a:	bf01      	itttt	eq
 8003e4c:	6819      	ldreq	r1, [r3, #0]
 8003e4e:	685b      	ldreq	r3, [r3, #4]
 8003e50:	1809      	addeq	r1, r1, r0
 8003e52:	6021      	streq	r1, [r4, #0]
 8003e54:	e7ed      	b.n	8003e32 <_free_r+0x1e>
 8003e56:	461a      	mov	r2, r3
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b10b      	cbz	r3, 8003e60 <_free_r+0x4c>
 8003e5c:	42a3      	cmp	r3, r4
 8003e5e:	d9fa      	bls.n	8003e56 <_free_r+0x42>
 8003e60:	6811      	ldr	r1, [r2, #0]
 8003e62:	1850      	adds	r0, r2, r1
 8003e64:	42a0      	cmp	r0, r4
 8003e66:	d10b      	bne.n	8003e80 <_free_r+0x6c>
 8003e68:	6820      	ldr	r0, [r4, #0]
 8003e6a:	4401      	add	r1, r0
 8003e6c:	1850      	adds	r0, r2, r1
 8003e6e:	4283      	cmp	r3, r0
 8003e70:	6011      	str	r1, [r2, #0]
 8003e72:	d1e0      	bne.n	8003e36 <_free_r+0x22>
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4401      	add	r1, r0
 8003e7a:	6011      	str	r1, [r2, #0]
 8003e7c:	6053      	str	r3, [r2, #4]
 8003e7e:	e7da      	b.n	8003e36 <_free_r+0x22>
 8003e80:	d902      	bls.n	8003e88 <_free_r+0x74>
 8003e82:	230c      	movs	r3, #12
 8003e84:	602b      	str	r3, [r5, #0]
 8003e86:	e7d6      	b.n	8003e36 <_free_r+0x22>
 8003e88:	6820      	ldr	r0, [r4, #0]
 8003e8a:	1821      	adds	r1, r4, r0
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	bf01      	itttt	eq
 8003e90:	6819      	ldreq	r1, [r3, #0]
 8003e92:	685b      	ldreq	r3, [r3, #4]
 8003e94:	1809      	addeq	r1, r1, r0
 8003e96:	6021      	streq	r1, [r4, #0]
 8003e98:	6063      	str	r3, [r4, #4]
 8003e9a:	6054      	str	r4, [r2, #4]
 8003e9c:	e7cb      	b.n	8003e36 <_free_r+0x22>
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	2000010c 	.word	0x2000010c

08003ea4 <__sfputc_r>:
 8003ea4:	6893      	ldr	r3, [r2, #8]
 8003ea6:	b410      	push	{r4}
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	6093      	str	r3, [r2, #8]
 8003eae:	da07      	bge.n	8003ec0 <__sfputc_r+0x1c>
 8003eb0:	6994      	ldr	r4, [r2, #24]
 8003eb2:	42a3      	cmp	r3, r4
 8003eb4:	db01      	blt.n	8003eba <__sfputc_r+0x16>
 8003eb6:	290a      	cmp	r1, #10
 8003eb8:	d102      	bne.n	8003ec0 <__sfputc_r+0x1c>
 8003eba:	bc10      	pop	{r4}
 8003ebc:	f000 bae0 	b.w	8004480 <__swbuf_r>
 8003ec0:	6813      	ldr	r3, [r2, #0]
 8003ec2:	1c58      	adds	r0, r3, #1
 8003ec4:	6010      	str	r0, [r2, #0]
 8003ec6:	7019      	strb	r1, [r3, #0]
 8003ec8:	4608      	mov	r0, r1
 8003eca:	bc10      	pop	{r4}
 8003ecc:	4770      	bx	lr

08003ece <__sfputs_r>:
 8003ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed0:	4606      	mov	r6, r0
 8003ed2:	460f      	mov	r7, r1
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	18d5      	adds	r5, r2, r3
 8003ed8:	42ac      	cmp	r4, r5
 8003eda:	d101      	bne.n	8003ee0 <__sfputs_r+0x12>
 8003edc:	2000      	movs	r0, #0
 8003ede:	e007      	b.n	8003ef0 <__sfputs_r+0x22>
 8003ee0:	463a      	mov	r2, r7
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee8:	f7ff ffdc 	bl	8003ea4 <__sfputc_r>
 8003eec:	1c43      	adds	r3, r0, #1
 8003eee:	d1f3      	bne.n	8003ed8 <__sfputs_r+0xa>
 8003ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ef4 <_vfiprintf_r>:
 8003ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef8:	460d      	mov	r5, r1
 8003efa:	4614      	mov	r4, r2
 8003efc:	4698      	mov	r8, r3
 8003efe:	4606      	mov	r6, r0
 8003f00:	b09d      	sub	sp, #116	; 0x74
 8003f02:	b118      	cbz	r0, 8003f0c <_vfiprintf_r+0x18>
 8003f04:	6983      	ldr	r3, [r0, #24]
 8003f06:	b90b      	cbnz	r3, 8003f0c <_vfiprintf_r+0x18>
 8003f08:	f000 fc98 	bl	800483c <__sinit>
 8003f0c:	4b89      	ldr	r3, [pc, #548]	; (8004134 <_vfiprintf_r+0x240>)
 8003f0e:	429d      	cmp	r5, r3
 8003f10:	d11b      	bne.n	8003f4a <_vfiprintf_r+0x56>
 8003f12:	6875      	ldr	r5, [r6, #4]
 8003f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f16:	07d9      	lsls	r1, r3, #31
 8003f18:	d405      	bmi.n	8003f26 <_vfiprintf_r+0x32>
 8003f1a:	89ab      	ldrh	r3, [r5, #12]
 8003f1c:	059a      	lsls	r2, r3, #22
 8003f1e:	d402      	bmi.n	8003f26 <_vfiprintf_r+0x32>
 8003f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f22:	f000 fd29 	bl	8004978 <__retarget_lock_acquire_recursive>
 8003f26:	89ab      	ldrh	r3, [r5, #12]
 8003f28:	071b      	lsls	r3, r3, #28
 8003f2a:	d501      	bpl.n	8003f30 <_vfiprintf_r+0x3c>
 8003f2c:	692b      	ldr	r3, [r5, #16]
 8003f2e:	b9eb      	cbnz	r3, 8003f6c <_vfiprintf_r+0x78>
 8003f30:	4629      	mov	r1, r5
 8003f32:	4630      	mov	r0, r6
 8003f34:	f000 faf6 	bl	8004524 <__swsetup_r>
 8003f38:	b1c0      	cbz	r0, 8003f6c <_vfiprintf_r+0x78>
 8003f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f3c:	07dc      	lsls	r4, r3, #31
 8003f3e:	d50e      	bpl.n	8003f5e <_vfiprintf_r+0x6a>
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f44:	b01d      	add	sp, #116	; 0x74
 8003f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f4a:	4b7b      	ldr	r3, [pc, #492]	; (8004138 <_vfiprintf_r+0x244>)
 8003f4c:	429d      	cmp	r5, r3
 8003f4e:	d101      	bne.n	8003f54 <_vfiprintf_r+0x60>
 8003f50:	68b5      	ldr	r5, [r6, #8]
 8003f52:	e7df      	b.n	8003f14 <_vfiprintf_r+0x20>
 8003f54:	4b79      	ldr	r3, [pc, #484]	; (800413c <_vfiprintf_r+0x248>)
 8003f56:	429d      	cmp	r5, r3
 8003f58:	bf08      	it	eq
 8003f5a:	68f5      	ldreq	r5, [r6, #12]
 8003f5c:	e7da      	b.n	8003f14 <_vfiprintf_r+0x20>
 8003f5e:	89ab      	ldrh	r3, [r5, #12]
 8003f60:	0598      	lsls	r0, r3, #22
 8003f62:	d4ed      	bmi.n	8003f40 <_vfiprintf_r+0x4c>
 8003f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f66:	f000 fd08 	bl	800497a <__retarget_lock_release_recursive>
 8003f6a:	e7e9      	b.n	8003f40 <_vfiprintf_r+0x4c>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f70:	2320      	movs	r3, #32
 8003f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f76:	2330      	movs	r3, #48	; 0x30
 8003f78:	f04f 0901 	mov.w	r9, #1
 8003f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004140 <_vfiprintf_r+0x24c>
 8003f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f88:	4623      	mov	r3, r4
 8003f8a:	469a      	mov	sl, r3
 8003f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f90:	b10a      	cbz	r2, 8003f96 <_vfiprintf_r+0xa2>
 8003f92:	2a25      	cmp	r2, #37	; 0x25
 8003f94:	d1f9      	bne.n	8003f8a <_vfiprintf_r+0x96>
 8003f96:	ebba 0b04 	subs.w	fp, sl, r4
 8003f9a:	d00b      	beq.n	8003fb4 <_vfiprintf_r+0xc0>
 8003f9c:	465b      	mov	r3, fp
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f7ff ff93 	bl	8003ece <__sfputs_r>
 8003fa8:	3001      	adds	r0, #1
 8003faa:	f000 80aa 	beq.w	8004102 <_vfiprintf_r+0x20e>
 8003fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fb0:	445a      	add	r2, fp
 8003fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8003fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80a2 	beq.w	8004102 <_vfiprintf_r+0x20e>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fc8:	f10a 0a01 	add.w	sl, sl, #1
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	9307      	str	r3, [sp, #28]
 8003fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8003fd6:	4654      	mov	r4, sl
 8003fd8:	2205      	movs	r2, #5
 8003fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fde:	4858      	ldr	r0, [pc, #352]	; (8004140 <_vfiprintf_r+0x24c>)
 8003fe0:	f000 fd32 	bl	8004a48 <memchr>
 8003fe4:	9a04      	ldr	r2, [sp, #16]
 8003fe6:	b9d8      	cbnz	r0, 8004020 <_vfiprintf_r+0x12c>
 8003fe8:	06d1      	lsls	r1, r2, #27
 8003fea:	bf44      	itt	mi
 8003fec:	2320      	movmi	r3, #32
 8003fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ff2:	0713      	lsls	r3, r2, #28
 8003ff4:	bf44      	itt	mi
 8003ff6:	232b      	movmi	r3, #43	; 0x2b
 8003ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8004000:	2b2a      	cmp	r3, #42	; 0x2a
 8004002:	d015      	beq.n	8004030 <_vfiprintf_r+0x13c>
 8004004:	4654      	mov	r4, sl
 8004006:	2000      	movs	r0, #0
 8004008:	f04f 0c0a 	mov.w	ip, #10
 800400c:	9a07      	ldr	r2, [sp, #28]
 800400e:	4621      	mov	r1, r4
 8004010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004014:	3b30      	subs	r3, #48	; 0x30
 8004016:	2b09      	cmp	r3, #9
 8004018:	d94e      	bls.n	80040b8 <_vfiprintf_r+0x1c4>
 800401a:	b1b0      	cbz	r0, 800404a <_vfiprintf_r+0x156>
 800401c:	9207      	str	r2, [sp, #28]
 800401e:	e014      	b.n	800404a <_vfiprintf_r+0x156>
 8004020:	eba0 0308 	sub.w	r3, r0, r8
 8004024:	fa09 f303 	lsl.w	r3, r9, r3
 8004028:	4313      	orrs	r3, r2
 800402a:	46a2      	mov	sl, r4
 800402c:	9304      	str	r3, [sp, #16]
 800402e:	e7d2      	b.n	8003fd6 <_vfiprintf_r+0xe2>
 8004030:	9b03      	ldr	r3, [sp, #12]
 8004032:	1d19      	adds	r1, r3, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	9103      	str	r1, [sp, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	bfbb      	ittet	lt
 800403c:	425b      	neglt	r3, r3
 800403e:	f042 0202 	orrlt.w	r2, r2, #2
 8004042:	9307      	strge	r3, [sp, #28]
 8004044:	9307      	strlt	r3, [sp, #28]
 8004046:	bfb8      	it	lt
 8004048:	9204      	strlt	r2, [sp, #16]
 800404a:	7823      	ldrb	r3, [r4, #0]
 800404c:	2b2e      	cmp	r3, #46	; 0x2e
 800404e:	d10c      	bne.n	800406a <_vfiprintf_r+0x176>
 8004050:	7863      	ldrb	r3, [r4, #1]
 8004052:	2b2a      	cmp	r3, #42	; 0x2a
 8004054:	d135      	bne.n	80040c2 <_vfiprintf_r+0x1ce>
 8004056:	9b03      	ldr	r3, [sp, #12]
 8004058:	3402      	adds	r4, #2
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	9203      	str	r2, [sp, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	bfb8      	it	lt
 8004064:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004068:	9305      	str	r3, [sp, #20]
 800406a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004144 <_vfiprintf_r+0x250>
 800406e:	2203      	movs	r2, #3
 8004070:	4650      	mov	r0, sl
 8004072:	7821      	ldrb	r1, [r4, #0]
 8004074:	f000 fce8 	bl	8004a48 <memchr>
 8004078:	b140      	cbz	r0, 800408c <_vfiprintf_r+0x198>
 800407a:	2340      	movs	r3, #64	; 0x40
 800407c:	eba0 000a 	sub.w	r0, r0, sl
 8004080:	fa03 f000 	lsl.w	r0, r3, r0
 8004084:	9b04      	ldr	r3, [sp, #16]
 8004086:	3401      	adds	r4, #1
 8004088:	4303      	orrs	r3, r0
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004090:	2206      	movs	r2, #6
 8004092:	482d      	ldr	r0, [pc, #180]	; (8004148 <_vfiprintf_r+0x254>)
 8004094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004098:	f000 fcd6 	bl	8004a48 <memchr>
 800409c:	2800      	cmp	r0, #0
 800409e:	d03f      	beq.n	8004120 <_vfiprintf_r+0x22c>
 80040a0:	4b2a      	ldr	r3, [pc, #168]	; (800414c <_vfiprintf_r+0x258>)
 80040a2:	bb1b      	cbnz	r3, 80040ec <_vfiprintf_r+0x1f8>
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	3307      	adds	r3, #7
 80040a8:	f023 0307 	bic.w	r3, r3, #7
 80040ac:	3308      	adds	r3, #8
 80040ae:	9303      	str	r3, [sp, #12]
 80040b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b2:	443b      	add	r3, r7
 80040b4:	9309      	str	r3, [sp, #36]	; 0x24
 80040b6:	e767      	b.n	8003f88 <_vfiprintf_r+0x94>
 80040b8:	460c      	mov	r4, r1
 80040ba:	2001      	movs	r0, #1
 80040bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80040c0:	e7a5      	b.n	800400e <_vfiprintf_r+0x11a>
 80040c2:	2300      	movs	r3, #0
 80040c4:	f04f 0c0a 	mov.w	ip, #10
 80040c8:	4619      	mov	r1, r3
 80040ca:	3401      	adds	r4, #1
 80040cc:	9305      	str	r3, [sp, #20]
 80040ce:	4620      	mov	r0, r4
 80040d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040d4:	3a30      	subs	r2, #48	; 0x30
 80040d6:	2a09      	cmp	r2, #9
 80040d8:	d903      	bls.n	80040e2 <_vfiprintf_r+0x1ee>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0c5      	beq.n	800406a <_vfiprintf_r+0x176>
 80040de:	9105      	str	r1, [sp, #20]
 80040e0:	e7c3      	b.n	800406a <_vfiprintf_r+0x176>
 80040e2:	4604      	mov	r4, r0
 80040e4:	2301      	movs	r3, #1
 80040e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ea:	e7f0      	b.n	80040ce <_vfiprintf_r+0x1da>
 80040ec:	ab03      	add	r3, sp, #12
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	462a      	mov	r2, r5
 80040f2:	4630      	mov	r0, r6
 80040f4:	4b16      	ldr	r3, [pc, #88]	; (8004150 <_vfiprintf_r+0x25c>)
 80040f6:	a904      	add	r1, sp, #16
 80040f8:	f3af 8000 	nop.w
 80040fc:	4607      	mov	r7, r0
 80040fe:	1c78      	adds	r0, r7, #1
 8004100:	d1d6      	bne.n	80040b0 <_vfiprintf_r+0x1bc>
 8004102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004104:	07d9      	lsls	r1, r3, #31
 8004106:	d405      	bmi.n	8004114 <_vfiprintf_r+0x220>
 8004108:	89ab      	ldrh	r3, [r5, #12]
 800410a:	059a      	lsls	r2, r3, #22
 800410c:	d402      	bmi.n	8004114 <_vfiprintf_r+0x220>
 800410e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004110:	f000 fc33 	bl	800497a <__retarget_lock_release_recursive>
 8004114:	89ab      	ldrh	r3, [r5, #12]
 8004116:	065b      	lsls	r3, r3, #25
 8004118:	f53f af12 	bmi.w	8003f40 <_vfiprintf_r+0x4c>
 800411c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800411e:	e711      	b.n	8003f44 <_vfiprintf_r+0x50>
 8004120:	ab03      	add	r3, sp, #12
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	462a      	mov	r2, r5
 8004126:	4630      	mov	r0, r6
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <_vfiprintf_r+0x25c>)
 800412a:	a904      	add	r1, sp, #16
 800412c:	f000 f882 	bl	8004234 <_printf_i>
 8004130:	e7e4      	b.n	80040fc <_vfiprintf_r+0x208>
 8004132:	bf00      	nop
 8004134:	08004fe0 	.word	0x08004fe0
 8004138:	08005000 	.word	0x08005000
 800413c:	08004fc0 	.word	0x08004fc0
 8004140:	08004f8a 	.word	0x08004f8a
 8004144:	08004f90 	.word	0x08004f90
 8004148:	08004f94 	.word	0x08004f94
 800414c:	00000000 	.word	0x00000000
 8004150:	08003ecf 	.word	0x08003ecf

08004154 <_printf_common>:
 8004154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004158:	4616      	mov	r6, r2
 800415a:	4699      	mov	r9, r3
 800415c:	688a      	ldr	r2, [r1, #8]
 800415e:	690b      	ldr	r3, [r1, #16]
 8004160:	4607      	mov	r7, r0
 8004162:	4293      	cmp	r3, r2
 8004164:	bfb8      	it	lt
 8004166:	4613      	movlt	r3, r2
 8004168:	6033      	str	r3, [r6, #0]
 800416a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800416e:	460c      	mov	r4, r1
 8004170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004174:	b10a      	cbz	r2, 800417a <_printf_common+0x26>
 8004176:	3301      	adds	r3, #1
 8004178:	6033      	str	r3, [r6, #0]
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	0699      	lsls	r1, r3, #26
 800417e:	bf42      	ittt	mi
 8004180:	6833      	ldrmi	r3, [r6, #0]
 8004182:	3302      	addmi	r3, #2
 8004184:	6033      	strmi	r3, [r6, #0]
 8004186:	6825      	ldr	r5, [r4, #0]
 8004188:	f015 0506 	ands.w	r5, r5, #6
 800418c:	d106      	bne.n	800419c <_printf_common+0x48>
 800418e:	f104 0a19 	add.w	sl, r4, #25
 8004192:	68e3      	ldr	r3, [r4, #12]
 8004194:	6832      	ldr	r2, [r6, #0]
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	42ab      	cmp	r3, r5
 800419a:	dc28      	bgt.n	80041ee <_printf_common+0x9a>
 800419c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041a0:	1e13      	subs	r3, r2, #0
 80041a2:	6822      	ldr	r2, [r4, #0]
 80041a4:	bf18      	it	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	0692      	lsls	r2, r2, #26
 80041aa:	d42d      	bmi.n	8004208 <_printf_common+0xb4>
 80041ac:	4649      	mov	r1, r9
 80041ae:	4638      	mov	r0, r7
 80041b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041b4:	47c0      	blx	r8
 80041b6:	3001      	adds	r0, #1
 80041b8:	d020      	beq.n	80041fc <_printf_common+0xa8>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	68e5      	ldr	r5, [r4, #12]
 80041be:	f003 0306 	and.w	r3, r3, #6
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	bf18      	it	ne
 80041c6:	2500      	movne	r5, #0
 80041c8:	6832      	ldr	r2, [r6, #0]
 80041ca:	f04f 0600 	mov.w	r6, #0
 80041ce:	68a3      	ldr	r3, [r4, #8]
 80041d0:	bf08      	it	eq
 80041d2:	1aad      	subeq	r5, r5, r2
 80041d4:	6922      	ldr	r2, [r4, #16]
 80041d6:	bf08      	it	eq
 80041d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041dc:	4293      	cmp	r3, r2
 80041de:	bfc4      	itt	gt
 80041e0:	1a9b      	subgt	r3, r3, r2
 80041e2:	18ed      	addgt	r5, r5, r3
 80041e4:	341a      	adds	r4, #26
 80041e6:	42b5      	cmp	r5, r6
 80041e8:	d11a      	bne.n	8004220 <_printf_common+0xcc>
 80041ea:	2000      	movs	r0, #0
 80041ec:	e008      	b.n	8004200 <_printf_common+0xac>
 80041ee:	2301      	movs	r3, #1
 80041f0:	4652      	mov	r2, sl
 80041f2:	4649      	mov	r1, r9
 80041f4:	4638      	mov	r0, r7
 80041f6:	47c0      	blx	r8
 80041f8:	3001      	adds	r0, #1
 80041fa:	d103      	bne.n	8004204 <_printf_common+0xb0>
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004204:	3501      	adds	r5, #1
 8004206:	e7c4      	b.n	8004192 <_printf_common+0x3e>
 8004208:	2030      	movs	r0, #48	; 0x30
 800420a:	18e1      	adds	r1, r4, r3
 800420c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004216:	4422      	add	r2, r4
 8004218:	3302      	adds	r3, #2
 800421a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800421e:	e7c5      	b.n	80041ac <_printf_common+0x58>
 8004220:	2301      	movs	r3, #1
 8004222:	4622      	mov	r2, r4
 8004224:	4649      	mov	r1, r9
 8004226:	4638      	mov	r0, r7
 8004228:	47c0      	blx	r8
 800422a:	3001      	adds	r0, #1
 800422c:	d0e6      	beq.n	80041fc <_printf_common+0xa8>
 800422e:	3601      	adds	r6, #1
 8004230:	e7d9      	b.n	80041e6 <_printf_common+0x92>
	...

08004234 <_printf_i>:
 8004234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004238:	7e0f      	ldrb	r7, [r1, #24]
 800423a:	4691      	mov	r9, r2
 800423c:	2f78      	cmp	r7, #120	; 0x78
 800423e:	4680      	mov	r8, r0
 8004240:	460c      	mov	r4, r1
 8004242:	469a      	mov	sl, r3
 8004244:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004246:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800424a:	d807      	bhi.n	800425c <_printf_i+0x28>
 800424c:	2f62      	cmp	r7, #98	; 0x62
 800424e:	d80a      	bhi.n	8004266 <_printf_i+0x32>
 8004250:	2f00      	cmp	r7, #0
 8004252:	f000 80d9 	beq.w	8004408 <_printf_i+0x1d4>
 8004256:	2f58      	cmp	r7, #88	; 0x58
 8004258:	f000 80a4 	beq.w	80043a4 <_printf_i+0x170>
 800425c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004264:	e03a      	b.n	80042dc <_printf_i+0xa8>
 8004266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800426a:	2b15      	cmp	r3, #21
 800426c:	d8f6      	bhi.n	800425c <_printf_i+0x28>
 800426e:	a101      	add	r1, pc, #4	; (adr r1, 8004274 <_printf_i+0x40>)
 8004270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004274:	080042cd 	.word	0x080042cd
 8004278:	080042e1 	.word	0x080042e1
 800427c:	0800425d 	.word	0x0800425d
 8004280:	0800425d 	.word	0x0800425d
 8004284:	0800425d 	.word	0x0800425d
 8004288:	0800425d 	.word	0x0800425d
 800428c:	080042e1 	.word	0x080042e1
 8004290:	0800425d 	.word	0x0800425d
 8004294:	0800425d 	.word	0x0800425d
 8004298:	0800425d 	.word	0x0800425d
 800429c:	0800425d 	.word	0x0800425d
 80042a0:	080043ef 	.word	0x080043ef
 80042a4:	08004311 	.word	0x08004311
 80042a8:	080043d1 	.word	0x080043d1
 80042ac:	0800425d 	.word	0x0800425d
 80042b0:	0800425d 	.word	0x0800425d
 80042b4:	08004411 	.word	0x08004411
 80042b8:	0800425d 	.word	0x0800425d
 80042bc:	08004311 	.word	0x08004311
 80042c0:	0800425d 	.word	0x0800425d
 80042c4:	0800425d 	.word	0x0800425d
 80042c8:	080043d9 	.word	0x080043d9
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	1d1a      	adds	r2, r3, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	602a      	str	r2, [r5, #0]
 80042d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042dc:	2301      	movs	r3, #1
 80042de:	e0a4      	b.n	800442a <_printf_i+0x1f6>
 80042e0:	6820      	ldr	r0, [r4, #0]
 80042e2:	6829      	ldr	r1, [r5, #0]
 80042e4:	0606      	lsls	r6, r0, #24
 80042e6:	f101 0304 	add.w	r3, r1, #4
 80042ea:	d50a      	bpl.n	8004302 <_printf_i+0xce>
 80042ec:	680e      	ldr	r6, [r1, #0]
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	2e00      	cmp	r6, #0
 80042f2:	da03      	bge.n	80042fc <_printf_i+0xc8>
 80042f4:	232d      	movs	r3, #45	; 0x2d
 80042f6:	4276      	negs	r6, r6
 80042f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fc:	230a      	movs	r3, #10
 80042fe:	485e      	ldr	r0, [pc, #376]	; (8004478 <_printf_i+0x244>)
 8004300:	e019      	b.n	8004336 <_printf_i+0x102>
 8004302:	680e      	ldr	r6, [r1, #0]
 8004304:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004308:	602b      	str	r3, [r5, #0]
 800430a:	bf18      	it	ne
 800430c:	b236      	sxthne	r6, r6
 800430e:	e7ef      	b.n	80042f0 <_printf_i+0xbc>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	1d19      	adds	r1, r3, #4
 8004316:	6029      	str	r1, [r5, #0]
 8004318:	0601      	lsls	r1, r0, #24
 800431a:	d501      	bpl.n	8004320 <_printf_i+0xec>
 800431c:	681e      	ldr	r6, [r3, #0]
 800431e:	e002      	b.n	8004326 <_printf_i+0xf2>
 8004320:	0646      	lsls	r6, r0, #25
 8004322:	d5fb      	bpl.n	800431c <_printf_i+0xe8>
 8004324:	881e      	ldrh	r6, [r3, #0]
 8004326:	2f6f      	cmp	r7, #111	; 0x6f
 8004328:	bf0c      	ite	eq
 800432a:	2308      	moveq	r3, #8
 800432c:	230a      	movne	r3, #10
 800432e:	4852      	ldr	r0, [pc, #328]	; (8004478 <_printf_i+0x244>)
 8004330:	2100      	movs	r1, #0
 8004332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004336:	6865      	ldr	r5, [r4, #4]
 8004338:	2d00      	cmp	r5, #0
 800433a:	bfa8      	it	ge
 800433c:	6821      	ldrge	r1, [r4, #0]
 800433e:	60a5      	str	r5, [r4, #8]
 8004340:	bfa4      	itt	ge
 8004342:	f021 0104 	bicge.w	r1, r1, #4
 8004346:	6021      	strge	r1, [r4, #0]
 8004348:	b90e      	cbnz	r6, 800434e <_printf_i+0x11a>
 800434a:	2d00      	cmp	r5, #0
 800434c:	d04d      	beq.n	80043ea <_printf_i+0x1b6>
 800434e:	4615      	mov	r5, r2
 8004350:	fbb6 f1f3 	udiv	r1, r6, r3
 8004354:	fb03 6711 	mls	r7, r3, r1, r6
 8004358:	5dc7      	ldrb	r7, [r0, r7]
 800435a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800435e:	4637      	mov	r7, r6
 8004360:	42bb      	cmp	r3, r7
 8004362:	460e      	mov	r6, r1
 8004364:	d9f4      	bls.n	8004350 <_printf_i+0x11c>
 8004366:	2b08      	cmp	r3, #8
 8004368:	d10b      	bne.n	8004382 <_printf_i+0x14e>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	07de      	lsls	r6, r3, #31
 800436e:	d508      	bpl.n	8004382 <_printf_i+0x14e>
 8004370:	6923      	ldr	r3, [r4, #16]
 8004372:	6861      	ldr	r1, [r4, #4]
 8004374:	4299      	cmp	r1, r3
 8004376:	bfde      	ittt	le
 8004378:	2330      	movle	r3, #48	; 0x30
 800437a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800437e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004382:	1b52      	subs	r2, r2, r5
 8004384:	6122      	str	r2, [r4, #16]
 8004386:	464b      	mov	r3, r9
 8004388:	4621      	mov	r1, r4
 800438a:	4640      	mov	r0, r8
 800438c:	f8cd a000 	str.w	sl, [sp]
 8004390:	aa03      	add	r2, sp, #12
 8004392:	f7ff fedf 	bl	8004154 <_printf_common>
 8004396:	3001      	adds	r0, #1
 8004398:	d14c      	bne.n	8004434 <_printf_i+0x200>
 800439a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800439e:	b004      	add	sp, #16
 80043a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a4:	4834      	ldr	r0, [pc, #208]	; (8004478 <_printf_i+0x244>)
 80043a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043aa:	6829      	ldr	r1, [r5, #0]
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80043b2:	6029      	str	r1, [r5, #0]
 80043b4:	061d      	lsls	r5, r3, #24
 80043b6:	d514      	bpl.n	80043e2 <_printf_i+0x1ae>
 80043b8:	07df      	lsls	r7, r3, #31
 80043ba:	bf44      	itt	mi
 80043bc:	f043 0320 	orrmi.w	r3, r3, #32
 80043c0:	6023      	strmi	r3, [r4, #0]
 80043c2:	b91e      	cbnz	r6, 80043cc <_printf_i+0x198>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	f023 0320 	bic.w	r3, r3, #32
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	2310      	movs	r3, #16
 80043ce:	e7af      	b.n	8004330 <_printf_i+0xfc>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	f043 0320 	orr.w	r3, r3, #32
 80043d6:	6023      	str	r3, [r4, #0]
 80043d8:	2378      	movs	r3, #120	; 0x78
 80043da:	4828      	ldr	r0, [pc, #160]	; (800447c <_printf_i+0x248>)
 80043dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043e0:	e7e3      	b.n	80043aa <_printf_i+0x176>
 80043e2:	0659      	lsls	r1, r3, #25
 80043e4:	bf48      	it	mi
 80043e6:	b2b6      	uxthmi	r6, r6
 80043e8:	e7e6      	b.n	80043b8 <_printf_i+0x184>
 80043ea:	4615      	mov	r5, r2
 80043ec:	e7bb      	b.n	8004366 <_printf_i+0x132>
 80043ee:	682b      	ldr	r3, [r5, #0]
 80043f0:	6826      	ldr	r6, [r4, #0]
 80043f2:	1d18      	adds	r0, r3, #4
 80043f4:	6961      	ldr	r1, [r4, #20]
 80043f6:	6028      	str	r0, [r5, #0]
 80043f8:	0635      	lsls	r5, r6, #24
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	d501      	bpl.n	8004402 <_printf_i+0x1ce>
 80043fe:	6019      	str	r1, [r3, #0]
 8004400:	e002      	b.n	8004408 <_printf_i+0x1d4>
 8004402:	0670      	lsls	r0, r6, #25
 8004404:	d5fb      	bpl.n	80043fe <_printf_i+0x1ca>
 8004406:	8019      	strh	r1, [r3, #0]
 8004408:	2300      	movs	r3, #0
 800440a:	4615      	mov	r5, r2
 800440c:	6123      	str	r3, [r4, #16]
 800440e:	e7ba      	b.n	8004386 <_printf_i+0x152>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	2100      	movs	r1, #0
 8004414:	1d1a      	adds	r2, r3, #4
 8004416:	602a      	str	r2, [r5, #0]
 8004418:	681d      	ldr	r5, [r3, #0]
 800441a:	6862      	ldr	r2, [r4, #4]
 800441c:	4628      	mov	r0, r5
 800441e:	f000 fb13 	bl	8004a48 <memchr>
 8004422:	b108      	cbz	r0, 8004428 <_printf_i+0x1f4>
 8004424:	1b40      	subs	r0, r0, r5
 8004426:	6060      	str	r0, [r4, #4]
 8004428:	6863      	ldr	r3, [r4, #4]
 800442a:	6123      	str	r3, [r4, #16]
 800442c:	2300      	movs	r3, #0
 800442e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004432:	e7a8      	b.n	8004386 <_printf_i+0x152>
 8004434:	462a      	mov	r2, r5
 8004436:	4649      	mov	r1, r9
 8004438:	4640      	mov	r0, r8
 800443a:	6923      	ldr	r3, [r4, #16]
 800443c:	47d0      	blx	sl
 800443e:	3001      	adds	r0, #1
 8004440:	d0ab      	beq.n	800439a <_printf_i+0x166>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	079b      	lsls	r3, r3, #30
 8004446:	d413      	bmi.n	8004470 <_printf_i+0x23c>
 8004448:	68e0      	ldr	r0, [r4, #12]
 800444a:	9b03      	ldr	r3, [sp, #12]
 800444c:	4298      	cmp	r0, r3
 800444e:	bfb8      	it	lt
 8004450:	4618      	movlt	r0, r3
 8004452:	e7a4      	b.n	800439e <_printf_i+0x16a>
 8004454:	2301      	movs	r3, #1
 8004456:	4632      	mov	r2, r6
 8004458:	4649      	mov	r1, r9
 800445a:	4640      	mov	r0, r8
 800445c:	47d0      	blx	sl
 800445e:	3001      	adds	r0, #1
 8004460:	d09b      	beq.n	800439a <_printf_i+0x166>
 8004462:	3501      	adds	r5, #1
 8004464:	68e3      	ldr	r3, [r4, #12]
 8004466:	9903      	ldr	r1, [sp, #12]
 8004468:	1a5b      	subs	r3, r3, r1
 800446a:	42ab      	cmp	r3, r5
 800446c:	dcf2      	bgt.n	8004454 <_printf_i+0x220>
 800446e:	e7eb      	b.n	8004448 <_printf_i+0x214>
 8004470:	2500      	movs	r5, #0
 8004472:	f104 0619 	add.w	r6, r4, #25
 8004476:	e7f5      	b.n	8004464 <_printf_i+0x230>
 8004478:	08004f9b 	.word	0x08004f9b
 800447c:	08004fac 	.word	0x08004fac

08004480 <__swbuf_r>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	460e      	mov	r6, r1
 8004484:	4614      	mov	r4, r2
 8004486:	4605      	mov	r5, r0
 8004488:	b118      	cbz	r0, 8004492 <__swbuf_r+0x12>
 800448a:	6983      	ldr	r3, [r0, #24]
 800448c:	b90b      	cbnz	r3, 8004492 <__swbuf_r+0x12>
 800448e:	f000 f9d5 	bl	800483c <__sinit>
 8004492:	4b21      	ldr	r3, [pc, #132]	; (8004518 <__swbuf_r+0x98>)
 8004494:	429c      	cmp	r4, r3
 8004496:	d12b      	bne.n	80044f0 <__swbuf_r+0x70>
 8004498:	686c      	ldr	r4, [r5, #4]
 800449a:	69a3      	ldr	r3, [r4, #24]
 800449c:	60a3      	str	r3, [r4, #8]
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	071a      	lsls	r2, r3, #28
 80044a2:	d52f      	bpl.n	8004504 <__swbuf_r+0x84>
 80044a4:	6923      	ldr	r3, [r4, #16]
 80044a6:	b36b      	cbz	r3, 8004504 <__swbuf_r+0x84>
 80044a8:	6923      	ldr	r3, [r4, #16]
 80044aa:	6820      	ldr	r0, [r4, #0]
 80044ac:	b2f6      	uxtb	r6, r6
 80044ae:	1ac0      	subs	r0, r0, r3
 80044b0:	6963      	ldr	r3, [r4, #20]
 80044b2:	4637      	mov	r7, r6
 80044b4:	4283      	cmp	r3, r0
 80044b6:	dc04      	bgt.n	80044c2 <__swbuf_r+0x42>
 80044b8:	4621      	mov	r1, r4
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 f92a 	bl	8004714 <_fflush_r>
 80044c0:	bb30      	cbnz	r0, 8004510 <__swbuf_r+0x90>
 80044c2:	68a3      	ldr	r3, [r4, #8]
 80044c4:	3001      	adds	r0, #1
 80044c6:	3b01      	subs	r3, #1
 80044c8:	60a3      	str	r3, [r4, #8]
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	6022      	str	r2, [r4, #0]
 80044d0:	701e      	strb	r6, [r3, #0]
 80044d2:	6963      	ldr	r3, [r4, #20]
 80044d4:	4283      	cmp	r3, r0
 80044d6:	d004      	beq.n	80044e2 <__swbuf_r+0x62>
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	07db      	lsls	r3, r3, #31
 80044dc:	d506      	bpl.n	80044ec <__swbuf_r+0x6c>
 80044de:	2e0a      	cmp	r6, #10
 80044e0:	d104      	bne.n	80044ec <__swbuf_r+0x6c>
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f915 	bl	8004714 <_fflush_r>
 80044ea:	b988      	cbnz	r0, 8004510 <__swbuf_r+0x90>
 80044ec:	4638      	mov	r0, r7
 80044ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <__swbuf_r+0x9c>)
 80044f2:	429c      	cmp	r4, r3
 80044f4:	d101      	bne.n	80044fa <__swbuf_r+0x7a>
 80044f6:	68ac      	ldr	r4, [r5, #8]
 80044f8:	e7cf      	b.n	800449a <__swbuf_r+0x1a>
 80044fa:	4b09      	ldr	r3, [pc, #36]	; (8004520 <__swbuf_r+0xa0>)
 80044fc:	429c      	cmp	r4, r3
 80044fe:	bf08      	it	eq
 8004500:	68ec      	ldreq	r4, [r5, #12]
 8004502:	e7ca      	b.n	800449a <__swbuf_r+0x1a>
 8004504:	4621      	mov	r1, r4
 8004506:	4628      	mov	r0, r5
 8004508:	f000 f80c 	bl	8004524 <__swsetup_r>
 800450c:	2800      	cmp	r0, #0
 800450e:	d0cb      	beq.n	80044a8 <__swbuf_r+0x28>
 8004510:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004514:	e7ea      	b.n	80044ec <__swbuf_r+0x6c>
 8004516:	bf00      	nop
 8004518:	08004fe0 	.word	0x08004fe0
 800451c:	08005000 	.word	0x08005000
 8004520:	08004fc0 	.word	0x08004fc0

08004524 <__swsetup_r>:
 8004524:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <__swsetup_r+0xcc>)
 8004526:	b570      	push	{r4, r5, r6, lr}
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	4606      	mov	r6, r0
 800452c:	460c      	mov	r4, r1
 800452e:	b125      	cbz	r5, 800453a <__swsetup_r+0x16>
 8004530:	69ab      	ldr	r3, [r5, #24]
 8004532:	b913      	cbnz	r3, 800453a <__swsetup_r+0x16>
 8004534:	4628      	mov	r0, r5
 8004536:	f000 f981 	bl	800483c <__sinit>
 800453a:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <__swsetup_r+0xd0>)
 800453c:	429c      	cmp	r4, r3
 800453e:	d10f      	bne.n	8004560 <__swsetup_r+0x3c>
 8004540:	686c      	ldr	r4, [r5, #4]
 8004542:	89a3      	ldrh	r3, [r4, #12]
 8004544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004548:	0719      	lsls	r1, r3, #28
 800454a:	d42c      	bmi.n	80045a6 <__swsetup_r+0x82>
 800454c:	06dd      	lsls	r5, r3, #27
 800454e:	d411      	bmi.n	8004574 <__swsetup_r+0x50>
 8004550:	2309      	movs	r3, #9
 8004552:	6033      	str	r3, [r6, #0]
 8004554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	e03e      	b.n	80045de <__swsetup_r+0xba>
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <__swsetup_r+0xd4>)
 8004562:	429c      	cmp	r4, r3
 8004564:	d101      	bne.n	800456a <__swsetup_r+0x46>
 8004566:	68ac      	ldr	r4, [r5, #8]
 8004568:	e7eb      	b.n	8004542 <__swsetup_r+0x1e>
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <__swsetup_r+0xd8>)
 800456c:	429c      	cmp	r4, r3
 800456e:	bf08      	it	eq
 8004570:	68ec      	ldreq	r4, [r5, #12]
 8004572:	e7e6      	b.n	8004542 <__swsetup_r+0x1e>
 8004574:	0758      	lsls	r0, r3, #29
 8004576:	d512      	bpl.n	800459e <__swsetup_r+0x7a>
 8004578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800457a:	b141      	cbz	r1, 800458e <__swsetup_r+0x6a>
 800457c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004580:	4299      	cmp	r1, r3
 8004582:	d002      	beq.n	800458a <__swsetup_r+0x66>
 8004584:	4630      	mov	r0, r6
 8004586:	f7ff fc45 	bl	8003e14 <_free_r>
 800458a:	2300      	movs	r3, #0
 800458c:	6363      	str	r3, [r4, #52]	; 0x34
 800458e:	89a3      	ldrh	r3, [r4, #12]
 8004590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	2300      	movs	r3, #0
 8004598:	6063      	str	r3, [r4, #4]
 800459a:	6923      	ldr	r3, [r4, #16]
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	f043 0308 	orr.w	r3, r3, #8
 80045a4:	81a3      	strh	r3, [r4, #12]
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	b94b      	cbnz	r3, 80045be <__swsetup_r+0x9a>
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b4:	d003      	beq.n	80045be <__swsetup_r+0x9a>
 80045b6:	4621      	mov	r1, r4
 80045b8:	4630      	mov	r0, r6
 80045ba:	f000 fa05 	bl	80049c8 <__smakebuf_r>
 80045be:	89a0      	ldrh	r0, [r4, #12]
 80045c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045c4:	f010 0301 	ands.w	r3, r0, #1
 80045c8:	d00a      	beq.n	80045e0 <__swsetup_r+0xbc>
 80045ca:	2300      	movs	r3, #0
 80045cc:	60a3      	str	r3, [r4, #8]
 80045ce:	6963      	ldr	r3, [r4, #20]
 80045d0:	425b      	negs	r3, r3
 80045d2:	61a3      	str	r3, [r4, #24]
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	b943      	cbnz	r3, 80045ea <__swsetup_r+0xc6>
 80045d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045dc:	d1ba      	bne.n	8004554 <__swsetup_r+0x30>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	0781      	lsls	r1, r0, #30
 80045e2:	bf58      	it	pl
 80045e4:	6963      	ldrpl	r3, [r4, #20]
 80045e6:	60a3      	str	r3, [r4, #8]
 80045e8:	e7f4      	b.n	80045d4 <__swsetup_r+0xb0>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e7f7      	b.n	80045de <__swsetup_r+0xba>
 80045ee:	bf00      	nop
 80045f0:	20000008 	.word	0x20000008
 80045f4:	08004fe0 	.word	0x08004fe0
 80045f8:	08005000 	.word	0x08005000
 80045fc:	08004fc0 	.word	0x08004fc0

08004600 <abort>:
 8004600:	2006      	movs	r0, #6
 8004602:	b508      	push	{r3, lr}
 8004604:	f000 fa56 	bl	8004ab4 <raise>
 8004608:	2001      	movs	r0, #1
 800460a:	f7fd fe78 	bl	80022fe <_exit>
	...

08004610 <__sflush_r>:
 8004610:	898a      	ldrh	r2, [r1, #12]
 8004612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004614:	4605      	mov	r5, r0
 8004616:	0710      	lsls	r0, r2, #28
 8004618:	460c      	mov	r4, r1
 800461a:	d457      	bmi.n	80046cc <__sflush_r+0xbc>
 800461c:	684b      	ldr	r3, [r1, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	dc04      	bgt.n	800462c <__sflush_r+0x1c>
 8004622:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	dc01      	bgt.n	800462c <__sflush_r+0x1c>
 8004628:	2000      	movs	r0, #0
 800462a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800462c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800462e:	2e00      	cmp	r6, #0
 8004630:	d0fa      	beq.n	8004628 <__sflush_r+0x18>
 8004632:	2300      	movs	r3, #0
 8004634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004638:	682f      	ldr	r7, [r5, #0]
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	d032      	beq.n	80046a4 <__sflush_r+0x94>
 800463e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	075a      	lsls	r2, r3, #29
 8004644:	d505      	bpl.n	8004652 <__sflush_r+0x42>
 8004646:	6863      	ldr	r3, [r4, #4]
 8004648:	1ac0      	subs	r0, r0, r3
 800464a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800464c:	b10b      	cbz	r3, 8004652 <__sflush_r+0x42>
 800464e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004650:	1ac0      	subs	r0, r0, r3
 8004652:	2300      	movs	r3, #0
 8004654:	4602      	mov	r2, r0
 8004656:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004658:	4628      	mov	r0, r5
 800465a:	6a21      	ldr	r1, [r4, #32]
 800465c:	47b0      	blx	r6
 800465e:	1c43      	adds	r3, r0, #1
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	d106      	bne.n	8004672 <__sflush_r+0x62>
 8004664:	6829      	ldr	r1, [r5, #0]
 8004666:	291d      	cmp	r1, #29
 8004668:	d82c      	bhi.n	80046c4 <__sflush_r+0xb4>
 800466a:	4a29      	ldr	r2, [pc, #164]	; (8004710 <__sflush_r+0x100>)
 800466c:	40ca      	lsrs	r2, r1
 800466e:	07d6      	lsls	r6, r2, #31
 8004670:	d528      	bpl.n	80046c4 <__sflush_r+0xb4>
 8004672:	2200      	movs	r2, #0
 8004674:	6062      	str	r2, [r4, #4]
 8004676:	6922      	ldr	r2, [r4, #16]
 8004678:	04d9      	lsls	r1, r3, #19
 800467a:	6022      	str	r2, [r4, #0]
 800467c:	d504      	bpl.n	8004688 <__sflush_r+0x78>
 800467e:	1c42      	adds	r2, r0, #1
 8004680:	d101      	bne.n	8004686 <__sflush_r+0x76>
 8004682:	682b      	ldr	r3, [r5, #0]
 8004684:	b903      	cbnz	r3, 8004688 <__sflush_r+0x78>
 8004686:	6560      	str	r0, [r4, #84]	; 0x54
 8004688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800468a:	602f      	str	r7, [r5, #0]
 800468c:	2900      	cmp	r1, #0
 800468e:	d0cb      	beq.n	8004628 <__sflush_r+0x18>
 8004690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004694:	4299      	cmp	r1, r3
 8004696:	d002      	beq.n	800469e <__sflush_r+0x8e>
 8004698:	4628      	mov	r0, r5
 800469a:	f7ff fbbb 	bl	8003e14 <_free_r>
 800469e:	2000      	movs	r0, #0
 80046a0:	6360      	str	r0, [r4, #52]	; 0x34
 80046a2:	e7c2      	b.n	800462a <__sflush_r+0x1a>
 80046a4:	6a21      	ldr	r1, [r4, #32]
 80046a6:	2301      	movs	r3, #1
 80046a8:	4628      	mov	r0, r5
 80046aa:	47b0      	blx	r6
 80046ac:	1c41      	adds	r1, r0, #1
 80046ae:	d1c7      	bne.n	8004640 <__sflush_r+0x30>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0c4      	beq.n	8004640 <__sflush_r+0x30>
 80046b6:	2b1d      	cmp	r3, #29
 80046b8:	d001      	beq.n	80046be <__sflush_r+0xae>
 80046ba:	2b16      	cmp	r3, #22
 80046bc:	d101      	bne.n	80046c2 <__sflush_r+0xb2>
 80046be:	602f      	str	r7, [r5, #0]
 80046c0:	e7b2      	b.n	8004628 <__sflush_r+0x18>
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c8:	81a3      	strh	r3, [r4, #12]
 80046ca:	e7ae      	b.n	800462a <__sflush_r+0x1a>
 80046cc:	690f      	ldr	r7, [r1, #16]
 80046ce:	2f00      	cmp	r7, #0
 80046d0:	d0aa      	beq.n	8004628 <__sflush_r+0x18>
 80046d2:	0793      	lsls	r3, r2, #30
 80046d4:	bf18      	it	ne
 80046d6:	2300      	movne	r3, #0
 80046d8:	680e      	ldr	r6, [r1, #0]
 80046da:	bf08      	it	eq
 80046dc:	694b      	ldreq	r3, [r1, #20]
 80046de:	1bf6      	subs	r6, r6, r7
 80046e0:	600f      	str	r7, [r1, #0]
 80046e2:	608b      	str	r3, [r1, #8]
 80046e4:	2e00      	cmp	r6, #0
 80046e6:	dd9f      	ble.n	8004628 <__sflush_r+0x18>
 80046e8:	4633      	mov	r3, r6
 80046ea:	463a      	mov	r2, r7
 80046ec:	4628      	mov	r0, r5
 80046ee:	6a21      	ldr	r1, [r4, #32]
 80046f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80046f4:	47e0      	blx	ip
 80046f6:	2800      	cmp	r0, #0
 80046f8:	dc06      	bgt.n	8004708 <__sflush_r+0xf8>
 80046fa:	89a3      	ldrh	r3, [r4, #12]
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004704:	81a3      	strh	r3, [r4, #12]
 8004706:	e790      	b.n	800462a <__sflush_r+0x1a>
 8004708:	4407      	add	r7, r0
 800470a:	1a36      	subs	r6, r6, r0
 800470c:	e7ea      	b.n	80046e4 <__sflush_r+0xd4>
 800470e:	bf00      	nop
 8004710:	20400001 	.word	0x20400001

08004714 <_fflush_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	690b      	ldr	r3, [r1, #16]
 8004718:	4605      	mov	r5, r0
 800471a:	460c      	mov	r4, r1
 800471c:	b913      	cbnz	r3, 8004724 <_fflush_r+0x10>
 800471e:	2500      	movs	r5, #0
 8004720:	4628      	mov	r0, r5
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	b118      	cbz	r0, 800472e <_fflush_r+0x1a>
 8004726:	6983      	ldr	r3, [r0, #24]
 8004728:	b90b      	cbnz	r3, 800472e <_fflush_r+0x1a>
 800472a:	f000 f887 	bl	800483c <__sinit>
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <_fflush_r+0x6c>)
 8004730:	429c      	cmp	r4, r3
 8004732:	d11b      	bne.n	800476c <_fflush_r+0x58>
 8004734:	686c      	ldr	r4, [r5, #4]
 8004736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ef      	beq.n	800471e <_fflush_r+0xa>
 800473e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004740:	07d0      	lsls	r0, r2, #31
 8004742:	d404      	bmi.n	800474e <_fflush_r+0x3a>
 8004744:	0599      	lsls	r1, r3, #22
 8004746:	d402      	bmi.n	800474e <_fflush_r+0x3a>
 8004748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800474a:	f000 f915 	bl	8004978 <__retarget_lock_acquire_recursive>
 800474e:	4628      	mov	r0, r5
 8004750:	4621      	mov	r1, r4
 8004752:	f7ff ff5d 	bl	8004610 <__sflush_r>
 8004756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004758:	4605      	mov	r5, r0
 800475a:	07da      	lsls	r2, r3, #31
 800475c:	d4e0      	bmi.n	8004720 <_fflush_r+0xc>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	059b      	lsls	r3, r3, #22
 8004762:	d4dd      	bmi.n	8004720 <_fflush_r+0xc>
 8004764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004766:	f000 f908 	bl	800497a <__retarget_lock_release_recursive>
 800476a:	e7d9      	b.n	8004720 <_fflush_r+0xc>
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <_fflush_r+0x70>)
 800476e:	429c      	cmp	r4, r3
 8004770:	d101      	bne.n	8004776 <_fflush_r+0x62>
 8004772:	68ac      	ldr	r4, [r5, #8]
 8004774:	e7df      	b.n	8004736 <_fflush_r+0x22>
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <_fflush_r+0x74>)
 8004778:	429c      	cmp	r4, r3
 800477a:	bf08      	it	eq
 800477c:	68ec      	ldreq	r4, [r5, #12]
 800477e:	e7da      	b.n	8004736 <_fflush_r+0x22>
 8004780:	08004fe0 	.word	0x08004fe0
 8004784:	08005000 	.word	0x08005000
 8004788:	08004fc0 	.word	0x08004fc0

0800478c <std>:
 800478c:	2300      	movs	r3, #0
 800478e:	b510      	push	{r4, lr}
 8004790:	4604      	mov	r4, r0
 8004792:	e9c0 3300 	strd	r3, r3, [r0]
 8004796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800479a:	6083      	str	r3, [r0, #8]
 800479c:	8181      	strh	r1, [r0, #12]
 800479e:	6643      	str	r3, [r0, #100]	; 0x64
 80047a0:	81c2      	strh	r2, [r0, #14]
 80047a2:	6183      	str	r3, [r0, #24]
 80047a4:	4619      	mov	r1, r3
 80047a6:	2208      	movs	r2, #8
 80047a8:	305c      	adds	r0, #92	; 0x5c
 80047aa:	f7fd fec9 	bl	8002540 <memset>
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <std+0x38>)
 80047b0:	6224      	str	r4, [r4, #32]
 80047b2:	6263      	str	r3, [r4, #36]	; 0x24
 80047b4:	4b04      	ldr	r3, [pc, #16]	; (80047c8 <std+0x3c>)
 80047b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <std+0x40>)
 80047ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <std+0x44>)
 80047be:	6323      	str	r3, [r4, #48]	; 0x30
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	bf00      	nop
 80047c4:	08004aed 	.word	0x08004aed
 80047c8:	08004b0f 	.word	0x08004b0f
 80047cc:	08004b47 	.word	0x08004b47
 80047d0:	08004b6b 	.word	0x08004b6b

080047d4 <_cleanup_r>:
 80047d4:	4901      	ldr	r1, [pc, #4]	; (80047dc <_cleanup_r+0x8>)
 80047d6:	f000 b8af 	b.w	8004938 <_fwalk_reent>
 80047da:	bf00      	nop
 80047dc:	08004715 	.word	0x08004715

080047e0 <__sfmoreglue>:
 80047e0:	2268      	movs	r2, #104	; 0x68
 80047e2:	b570      	push	{r4, r5, r6, lr}
 80047e4:	1e4d      	subs	r5, r1, #1
 80047e6:	4355      	muls	r5, r2
 80047e8:	460e      	mov	r6, r1
 80047ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047ee:	f7fe fbb9 	bl	8002f64 <_malloc_r>
 80047f2:	4604      	mov	r4, r0
 80047f4:	b140      	cbz	r0, 8004808 <__sfmoreglue+0x28>
 80047f6:	2100      	movs	r1, #0
 80047f8:	e9c0 1600 	strd	r1, r6, [r0]
 80047fc:	300c      	adds	r0, #12
 80047fe:	60a0      	str	r0, [r4, #8]
 8004800:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004804:	f7fd fe9c 	bl	8002540 <memset>
 8004808:	4620      	mov	r0, r4
 800480a:	bd70      	pop	{r4, r5, r6, pc}

0800480c <__sfp_lock_acquire>:
 800480c:	4801      	ldr	r0, [pc, #4]	; (8004814 <__sfp_lock_acquire+0x8>)
 800480e:	f000 b8b3 	b.w	8004978 <__retarget_lock_acquire_recursive>
 8004812:	bf00      	nop
 8004814:	20000119 	.word	0x20000119

08004818 <__sfp_lock_release>:
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <__sfp_lock_release+0x8>)
 800481a:	f000 b8ae 	b.w	800497a <__retarget_lock_release_recursive>
 800481e:	bf00      	nop
 8004820:	20000119 	.word	0x20000119

08004824 <__sinit_lock_acquire>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__sinit_lock_acquire+0x8>)
 8004826:	f000 b8a7 	b.w	8004978 <__retarget_lock_acquire_recursive>
 800482a:	bf00      	nop
 800482c:	2000011a 	.word	0x2000011a

08004830 <__sinit_lock_release>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__sinit_lock_release+0x8>)
 8004832:	f000 b8a2 	b.w	800497a <__retarget_lock_release_recursive>
 8004836:	bf00      	nop
 8004838:	2000011a 	.word	0x2000011a

0800483c <__sinit>:
 800483c:	b510      	push	{r4, lr}
 800483e:	4604      	mov	r4, r0
 8004840:	f7ff fff0 	bl	8004824 <__sinit_lock_acquire>
 8004844:	69a3      	ldr	r3, [r4, #24]
 8004846:	b11b      	cbz	r3, 8004850 <__sinit+0x14>
 8004848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800484c:	f7ff bff0 	b.w	8004830 <__sinit_lock_release>
 8004850:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004854:	6523      	str	r3, [r4, #80]	; 0x50
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <__sinit+0x68>)
 8004858:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <__sinit+0x6c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	62a2      	str	r2, [r4, #40]	; 0x28
 800485e:	42a3      	cmp	r3, r4
 8004860:	bf08      	it	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	4620      	mov	r0, r4
 8004866:	bf08      	it	eq
 8004868:	61a3      	streq	r3, [r4, #24]
 800486a:	f000 f81f 	bl	80048ac <__sfp>
 800486e:	6060      	str	r0, [r4, #4]
 8004870:	4620      	mov	r0, r4
 8004872:	f000 f81b 	bl	80048ac <__sfp>
 8004876:	60a0      	str	r0, [r4, #8]
 8004878:	4620      	mov	r0, r4
 800487a:	f000 f817 	bl	80048ac <__sfp>
 800487e:	2200      	movs	r2, #0
 8004880:	2104      	movs	r1, #4
 8004882:	60e0      	str	r0, [r4, #12]
 8004884:	6860      	ldr	r0, [r4, #4]
 8004886:	f7ff ff81 	bl	800478c <std>
 800488a:	2201      	movs	r2, #1
 800488c:	2109      	movs	r1, #9
 800488e:	68a0      	ldr	r0, [r4, #8]
 8004890:	f7ff ff7c 	bl	800478c <std>
 8004894:	2202      	movs	r2, #2
 8004896:	2112      	movs	r1, #18
 8004898:	68e0      	ldr	r0, [r4, #12]
 800489a:	f7ff ff77 	bl	800478c <std>
 800489e:	2301      	movs	r3, #1
 80048a0:	61a3      	str	r3, [r4, #24]
 80048a2:	e7d1      	b.n	8004848 <__sinit+0xc>
 80048a4:	08004d60 	.word	0x08004d60
 80048a8:	080047d5 	.word	0x080047d5

080048ac <__sfp>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	4607      	mov	r7, r0
 80048b0:	f7ff ffac 	bl	800480c <__sfp_lock_acquire>
 80048b4:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <__sfp+0x84>)
 80048b6:	681e      	ldr	r6, [r3, #0]
 80048b8:	69b3      	ldr	r3, [r6, #24]
 80048ba:	b913      	cbnz	r3, 80048c2 <__sfp+0x16>
 80048bc:	4630      	mov	r0, r6
 80048be:	f7ff ffbd 	bl	800483c <__sinit>
 80048c2:	3648      	adds	r6, #72	; 0x48
 80048c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	d503      	bpl.n	80048d4 <__sfp+0x28>
 80048cc:	6833      	ldr	r3, [r6, #0]
 80048ce:	b30b      	cbz	r3, 8004914 <__sfp+0x68>
 80048d0:	6836      	ldr	r6, [r6, #0]
 80048d2:	e7f7      	b.n	80048c4 <__sfp+0x18>
 80048d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048d8:	b9d5      	cbnz	r5, 8004910 <__sfp+0x64>
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <__sfp+0x88>)
 80048dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048e0:	60e3      	str	r3, [r4, #12]
 80048e2:	6665      	str	r5, [r4, #100]	; 0x64
 80048e4:	f000 f847 	bl	8004976 <__retarget_lock_init_recursive>
 80048e8:	f7ff ff96 	bl	8004818 <__sfp_lock_release>
 80048ec:	2208      	movs	r2, #8
 80048ee:	4629      	mov	r1, r5
 80048f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048f8:	6025      	str	r5, [r4, #0]
 80048fa:	61a5      	str	r5, [r4, #24]
 80048fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004900:	f7fd fe1e 	bl	8002540 <memset>
 8004904:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004908:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800490c:	4620      	mov	r0, r4
 800490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004910:	3468      	adds	r4, #104	; 0x68
 8004912:	e7d9      	b.n	80048c8 <__sfp+0x1c>
 8004914:	2104      	movs	r1, #4
 8004916:	4638      	mov	r0, r7
 8004918:	f7ff ff62 	bl	80047e0 <__sfmoreglue>
 800491c:	4604      	mov	r4, r0
 800491e:	6030      	str	r0, [r6, #0]
 8004920:	2800      	cmp	r0, #0
 8004922:	d1d5      	bne.n	80048d0 <__sfp+0x24>
 8004924:	f7ff ff78 	bl	8004818 <__sfp_lock_release>
 8004928:	230c      	movs	r3, #12
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	e7ee      	b.n	800490c <__sfp+0x60>
 800492e:	bf00      	nop
 8004930:	08004d60 	.word	0x08004d60
 8004934:	ffff0001 	.word	0xffff0001

08004938 <_fwalk_reent>:
 8004938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800493c:	4606      	mov	r6, r0
 800493e:	4688      	mov	r8, r1
 8004940:	2700      	movs	r7, #0
 8004942:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004946:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800494a:	f1b9 0901 	subs.w	r9, r9, #1
 800494e:	d505      	bpl.n	800495c <_fwalk_reent+0x24>
 8004950:	6824      	ldr	r4, [r4, #0]
 8004952:	2c00      	cmp	r4, #0
 8004954:	d1f7      	bne.n	8004946 <_fwalk_reent+0xe>
 8004956:	4638      	mov	r0, r7
 8004958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800495c:	89ab      	ldrh	r3, [r5, #12]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d907      	bls.n	8004972 <_fwalk_reent+0x3a>
 8004962:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004966:	3301      	adds	r3, #1
 8004968:	d003      	beq.n	8004972 <_fwalk_reent+0x3a>
 800496a:	4629      	mov	r1, r5
 800496c:	4630      	mov	r0, r6
 800496e:	47c0      	blx	r8
 8004970:	4307      	orrs	r7, r0
 8004972:	3568      	adds	r5, #104	; 0x68
 8004974:	e7e9      	b.n	800494a <_fwalk_reent+0x12>

08004976 <__retarget_lock_init_recursive>:
 8004976:	4770      	bx	lr

08004978 <__retarget_lock_acquire_recursive>:
 8004978:	4770      	bx	lr

0800497a <__retarget_lock_release_recursive>:
 800497a:	4770      	bx	lr

0800497c <__swhatbuf_r>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	460e      	mov	r6, r1
 8004980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004984:	4614      	mov	r4, r2
 8004986:	2900      	cmp	r1, #0
 8004988:	461d      	mov	r5, r3
 800498a:	b096      	sub	sp, #88	; 0x58
 800498c:	da08      	bge.n	80049a0 <__swhatbuf_r+0x24>
 800498e:	2200      	movs	r2, #0
 8004990:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004994:	602a      	str	r2, [r5, #0]
 8004996:	061a      	lsls	r2, r3, #24
 8004998:	d410      	bmi.n	80049bc <__swhatbuf_r+0x40>
 800499a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800499e:	e00e      	b.n	80049be <__swhatbuf_r+0x42>
 80049a0:	466a      	mov	r2, sp
 80049a2:	f000 f909 	bl	8004bb8 <_fstat_r>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	dbf1      	blt.n	800498e <__swhatbuf_r+0x12>
 80049aa:	9a01      	ldr	r2, [sp, #4]
 80049ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049b4:	425a      	negs	r2, r3
 80049b6:	415a      	adcs	r2, r3
 80049b8:	602a      	str	r2, [r5, #0]
 80049ba:	e7ee      	b.n	800499a <__swhatbuf_r+0x1e>
 80049bc:	2340      	movs	r3, #64	; 0x40
 80049be:	2000      	movs	r0, #0
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	b016      	add	sp, #88	; 0x58
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080049c8 <__smakebuf_r>:
 80049c8:	898b      	ldrh	r3, [r1, #12]
 80049ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049cc:	079d      	lsls	r5, r3, #30
 80049ce:	4606      	mov	r6, r0
 80049d0:	460c      	mov	r4, r1
 80049d2:	d507      	bpl.n	80049e4 <__smakebuf_r+0x1c>
 80049d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	6123      	str	r3, [r4, #16]
 80049dc:	2301      	movs	r3, #1
 80049de:	6163      	str	r3, [r4, #20]
 80049e0:	b002      	add	sp, #8
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	466a      	mov	r2, sp
 80049e6:	ab01      	add	r3, sp, #4
 80049e8:	f7ff ffc8 	bl	800497c <__swhatbuf_r>
 80049ec:	9900      	ldr	r1, [sp, #0]
 80049ee:	4605      	mov	r5, r0
 80049f0:	4630      	mov	r0, r6
 80049f2:	f7fe fab7 	bl	8002f64 <_malloc_r>
 80049f6:	b948      	cbnz	r0, 8004a0c <__smakebuf_r+0x44>
 80049f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049fc:	059a      	lsls	r2, r3, #22
 80049fe:	d4ef      	bmi.n	80049e0 <__smakebuf_r+0x18>
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	f043 0302 	orr.w	r3, r3, #2
 8004a08:	81a3      	strh	r3, [r4, #12]
 8004a0a:	e7e3      	b.n	80049d4 <__smakebuf_r+0xc>
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <__smakebuf_r+0x7c>)
 8004a0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	6020      	str	r0, [r4, #0]
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	81a3      	strh	r3, [r4, #12]
 8004a1a:	9b00      	ldr	r3, [sp, #0]
 8004a1c:	6120      	str	r0, [r4, #16]
 8004a1e:	6163      	str	r3, [r4, #20]
 8004a20:	9b01      	ldr	r3, [sp, #4]
 8004a22:	b15b      	cbz	r3, 8004a3c <__smakebuf_r+0x74>
 8004a24:	4630      	mov	r0, r6
 8004a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a2a:	f000 f8d7 	bl	8004bdc <_isatty_r>
 8004a2e:	b128      	cbz	r0, 8004a3c <__smakebuf_r+0x74>
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	81a3      	strh	r3, [r4, #12]
 8004a3c:	89a0      	ldrh	r0, [r4, #12]
 8004a3e:	4305      	orrs	r5, r0
 8004a40:	81a5      	strh	r5, [r4, #12]
 8004a42:	e7cd      	b.n	80049e0 <__smakebuf_r+0x18>
 8004a44:	080047d5 	.word	0x080047d5

08004a48 <memchr>:
 8004a48:	4603      	mov	r3, r0
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	b2c9      	uxtb	r1, r1
 8004a4e:	4402      	add	r2, r0
 8004a50:	4293      	cmp	r3, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	d101      	bne.n	8004a5a <memchr+0x12>
 8004a56:	2000      	movs	r0, #0
 8004a58:	e003      	b.n	8004a62 <memchr+0x1a>
 8004a5a:	7804      	ldrb	r4, [r0, #0]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	428c      	cmp	r4, r1
 8004a60:	d1f6      	bne.n	8004a50 <memchr+0x8>
 8004a62:	bd10      	pop	{r4, pc}

08004a64 <_raise_r>:
 8004a64:	291f      	cmp	r1, #31
 8004a66:	b538      	push	{r3, r4, r5, lr}
 8004a68:	4604      	mov	r4, r0
 8004a6a:	460d      	mov	r5, r1
 8004a6c:	d904      	bls.n	8004a78 <_raise_r+0x14>
 8004a6e:	2316      	movs	r3, #22
 8004a70:	6003      	str	r3, [r0, #0]
 8004a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a7a:	b112      	cbz	r2, 8004a82 <_raise_r+0x1e>
 8004a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a80:	b94b      	cbnz	r3, 8004a96 <_raise_r+0x32>
 8004a82:	4620      	mov	r0, r4
 8004a84:	f000 f830 	bl	8004ae8 <_getpid_r>
 8004a88:	462a      	mov	r2, r5
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a92:	f000 b817 	b.w	8004ac4 <_kill_r>
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d00a      	beq.n	8004ab0 <_raise_r+0x4c>
 8004a9a:	1c59      	adds	r1, r3, #1
 8004a9c:	d103      	bne.n	8004aa6 <_raise_r+0x42>
 8004a9e:	2316      	movs	r3, #22
 8004aa0:	6003      	str	r3, [r0, #0]
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	e7e7      	b.n	8004a76 <_raise_r+0x12>
 8004aa6:	2400      	movs	r4, #0
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004aae:	4798      	blx	r3
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	e7e0      	b.n	8004a76 <_raise_r+0x12>

08004ab4 <raise>:
 8004ab4:	4b02      	ldr	r3, [pc, #8]	; (8004ac0 <raise+0xc>)
 8004ab6:	4601      	mov	r1, r0
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	f7ff bfd3 	b.w	8004a64 <_raise_r>
 8004abe:	bf00      	nop
 8004ac0:	20000008 	.word	0x20000008

08004ac4 <_kill_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	4d06      	ldr	r5, [pc, #24]	; (8004ae4 <_kill_r+0x20>)
 8004aca:	4604      	mov	r4, r0
 8004acc:	4608      	mov	r0, r1
 8004ace:	4611      	mov	r1, r2
 8004ad0:	602b      	str	r3, [r5, #0]
 8004ad2:	f7fd fc04 	bl	80022de <_kill>
 8004ad6:	1c43      	adds	r3, r0, #1
 8004ad8:	d102      	bne.n	8004ae0 <_kill_r+0x1c>
 8004ada:	682b      	ldr	r3, [r5, #0]
 8004adc:	b103      	cbz	r3, 8004ae0 <_kill_r+0x1c>
 8004ade:	6023      	str	r3, [r4, #0]
 8004ae0:	bd38      	pop	{r3, r4, r5, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000114 	.word	0x20000114

08004ae8 <_getpid_r>:
 8004ae8:	f7fd bbf2 	b.w	80022d0 <_getpid>

08004aec <__sread>:
 8004aec:	b510      	push	{r4, lr}
 8004aee:	460c      	mov	r4, r1
 8004af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af4:	f000 f894 	bl	8004c20 <_read_r>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	bfab      	itete	ge
 8004afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004afe:	89a3      	ldrhlt	r3, [r4, #12]
 8004b00:	181b      	addge	r3, r3, r0
 8004b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b06:	bfac      	ite	ge
 8004b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b0a:	81a3      	strhlt	r3, [r4, #12]
 8004b0c:	bd10      	pop	{r4, pc}

08004b0e <__swrite>:
 8004b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b12:	461f      	mov	r7, r3
 8004b14:	898b      	ldrh	r3, [r1, #12]
 8004b16:	4605      	mov	r5, r0
 8004b18:	05db      	lsls	r3, r3, #23
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	d505      	bpl.n	8004b2c <__swrite+0x1e>
 8004b20:	2302      	movs	r3, #2
 8004b22:	2200      	movs	r2, #0
 8004b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b28:	f000 f868 	bl	8004bfc <_lseek_r>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	4632      	mov	r2, r6
 8004b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b34:	81a3      	strh	r3, [r4, #12]
 8004b36:	4628      	mov	r0, r5
 8004b38:	463b      	mov	r3, r7
 8004b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b42:	f000 b817 	b.w	8004b74 <_write_r>

08004b46 <__sseek>:
 8004b46:	b510      	push	{r4, lr}
 8004b48:	460c      	mov	r4, r1
 8004b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4e:	f000 f855 	bl	8004bfc <_lseek_r>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	bf15      	itete	ne
 8004b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b62:	81a3      	strheq	r3, [r4, #12]
 8004b64:	bf18      	it	ne
 8004b66:	81a3      	strhne	r3, [r4, #12]
 8004b68:	bd10      	pop	{r4, pc}

08004b6a <__sclose>:
 8004b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6e:	f000 b813 	b.w	8004b98 <_close_r>
	...

08004b74 <_write_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4604      	mov	r4, r0
 8004b78:	4608      	mov	r0, r1
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4d05      	ldr	r5, [pc, #20]	; (8004b94 <_write_r+0x20>)
 8004b80:	602a      	str	r2, [r5, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f7fd fbe2 	bl	800234c <_write>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_write_r+0x1e>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_write_r+0x1e>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	20000114 	.word	0x20000114

08004b98 <_close_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	4d05      	ldr	r5, [pc, #20]	; (8004bb4 <_close_r+0x1c>)
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	f7fd fbee 	bl	8002384 <_close>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <_close_r+0x1a>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	b103      	cbz	r3, 8004bb2 <_close_r+0x1a>
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	20000114 	.word	0x20000114

08004bb8 <_fstat_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4d06      	ldr	r5, [pc, #24]	; (8004bd8 <_fstat_r+0x20>)
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	602b      	str	r3, [r5, #0]
 8004bc6:	f7fd fbe8 	bl	800239a <_fstat>
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	d102      	bne.n	8004bd4 <_fstat_r+0x1c>
 8004bce:	682b      	ldr	r3, [r5, #0]
 8004bd0:	b103      	cbz	r3, 8004bd4 <_fstat_r+0x1c>
 8004bd2:	6023      	str	r3, [r4, #0]
 8004bd4:	bd38      	pop	{r3, r4, r5, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000114 	.word	0x20000114

08004bdc <_isatty_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	2300      	movs	r3, #0
 8004be0:	4d05      	ldr	r5, [pc, #20]	; (8004bf8 <_isatty_r+0x1c>)
 8004be2:	4604      	mov	r4, r0
 8004be4:	4608      	mov	r0, r1
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	f7fd fbe6 	bl	80023b8 <_isatty>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d102      	bne.n	8004bf6 <_isatty_r+0x1a>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	b103      	cbz	r3, 8004bf6 <_isatty_r+0x1a>
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
 8004bf8:	20000114 	.word	0x20000114

08004bfc <_lseek_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4608      	mov	r0, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	2200      	movs	r2, #0
 8004c06:	4d05      	ldr	r5, [pc, #20]	; (8004c1c <_lseek_r+0x20>)
 8004c08:	602a      	str	r2, [r5, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f7fd fbde 	bl	80023cc <_lseek>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d102      	bne.n	8004c1a <_lseek_r+0x1e>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	b103      	cbz	r3, 8004c1a <_lseek_r+0x1e>
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	20000114 	.word	0x20000114

08004c20 <_read_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4604      	mov	r4, r0
 8004c24:	4608      	mov	r0, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4d05      	ldr	r5, [pc, #20]	; (8004c40 <_read_r+0x20>)
 8004c2c:	602a      	str	r2, [r5, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f7fd fb6f 	bl	8002312 <_read>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	d102      	bne.n	8004c3e <_read_r+0x1e>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	b103      	cbz	r3, 8004c3e <_read_r+0x1e>
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	20000114 	.word	0x20000114
 8004c44:	00000000 	.word	0x00000000

08004c48 <floor>:
 8004c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c4c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004c50:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8004c54:	2e13      	cmp	r6, #19
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4607      	mov	r7, r0
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	4605      	mov	r5, r0
 8004c60:	dc33      	bgt.n	8004cca <floor+0x82>
 8004c62:	2e00      	cmp	r6, #0
 8004c64:	da14      	bge.n	8004c90 <floor+0x48>
 8004c66:	a334      	add	r3, pc, #208	; (adr r3, 8004d38 <floor+0xf0>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f7fb fa86 	bl	800017c <__adddf3>
 8004c70:	2200      	movs	r2, #0
 8004c72:	2300      	movs	r3, #0
 8004c74:	f7fb fec8 	bl	8000a08 <__aeabi_dcmpgt>
 8004c78:	b138      	cbz	r0, 8004c8a <floor+0x42>
 8004c7a:	2c00      	cmp	r4, #0
 8004c7c:	da58      	bge.n	8004d30 <floor+0xe8>
 8004c7e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004c82:	431d      	orrs	r5, r3
 8004c84:	d001      	beq.n	8004c8a <floor+0x42>
 8004c86:	2500      	movs	r5, #0
 8004c88:	4c2d      	ldr	r4, [pc, #180]	; (8004d40 <floor+0xf8>)
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	462f      	mov	r7, r5
 8004c8e:	e025      	b.n	8004cdc <floor+0x94>
 8004c90:	4a2c      	ldr	r2, [pc, #176]	; (8004d44 <floor+0xfc>)
 8004c92:	fa42 f806 	asr.w	r8, r2, r6
 8004c96:	ea01 0208 	and.w	r2, r1, r8
 8004c9a:	4302      	orrs	r2, r0
 8004c9c:	d01e      	beq.n	8004cdc <floor+0x94>
 8004c9e:	a326      	add	r3, pc, #152	; (adr r3, 8004d38 <floor+0xf0>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb fa6a 	bl	800017c <__adddf3>
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2300      	movs	r3, #0
 8004cac:	f7fb feac 	bl	8000a08 <__aeabi_dcmpgt>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d0ea      	beq.n	8004c8a <floor+0x42>
 8004cb4:	2c00      	cmp	r4, #0
 8004cb6:	bfbe      	ittt	lt
 8004cb8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004cbc:	fa43 f606 	asrlt.w	r6, r3, r6
 8004cc0:	19a4      	addlt	r4, r4, r6
 8004cc2:	2500      	movs	r5, #0
 8004cc4:	ea24 0408 	bic.w	r4, r4, r8
 8004cc8:	e7df      	b.n	8004c8a <floor+0x42>
 8004cca:	2e33      	cmp	r6, #51	; 0x33
 8004ccc:	dd0a      	ble.n	8004ce4 <floor+0x9c>
 8004cce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004cd2:	d103      	bne.n	8004cdc <floor+0x94>
 8004cd4:	f7fb fa52 	bl	800017c <__adddf3>
 8004cd8:	4607      	mov	r7, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4638      	mov	r0, r7
 8004cde:	4619      	mov	r1, r3
 8004ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ce8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004cec:	fa22 f808 	lsr.w	r8, r2, r8
 8004cf0:	ea18 0f00 	tst.w	r8, r0
 8004cf4:	d0f2      	beq.n	8004cdc <floor+0x94>
 8004cf6:	a310      	add	r3, pc, #64	; (adr r3, 8004d38 <floor+0xf0>)
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f7fb fa3e 	bl	800017c <__adddf3>
 8004d00:	2200      	movs	r2, #0
 8004d02:	2300      	movs	r3, #0
 8004d04:	f7fb fe80 	bl	8000a08 <__aeabi_dcmpgt>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d0be      	beq.n	8004c8a <floor+0x42>
 8004d0c:	2c00      	cmp	r4, #0
 8004d0e:	da02      	bge.n	8004d16 <floor+0xce>
 8004d10:	2e14      	cmp	r6, #20
 8004d12:	d103      	bne.n	8004d1c <floor+0xd4>
 8004d14:	3401      	adds	r4, #1
 8004d16:	ea25 0508 	bic.w	r5, r5, r8
 8004d1a:	e7b6      	b.n	8004c8a <floor+0x42>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004d22:	fa03 f606 	lsl.w	r6, r3, r6
 8004d26:	4435      	add	r5, r6
 8004d28:	42bd      	cmp	r5, r7
 8004d2a:	bf38      	it	cc
 8004d2c:	18e4      	addcc	r4, r4, r3
 8004d2e:	e7f2      	b.n	8004d16 <floor+0xce>
 8004d30:	2500      	movs	r5, #0
 8004d32:	462c      	mov	r4, r5
 8004d34:	e7a9      	b.n	8004c8a <floor+0x42>
 8004d36:	bf00      	nop
 8004d38:	8800759c 	.word	0x8800759c
 8004d3c:	7e37e43c 	.word	0x7e37e43c
 8004d40:	bff00000 	.word	0xbff00000
 8004d44:	000fffff 	.word	0x000fffff

08004d48 <_init>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr

08004d54 <_fini>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	bf00      	nop
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr
