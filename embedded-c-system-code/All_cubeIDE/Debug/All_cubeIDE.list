
All_cubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bdc  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002d10  08002d10  00012d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d58  08002d58  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002d58  08002d58  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d58  08002d58  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000064  08002dc4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002dc4  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001936  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ba5  00000000  00000000  000219c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000350  00000000  00000000  00022568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000288  00000000  00000000  000228b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000026f3  00000000  00000000  00022b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022ae  00000000  00000000  00025233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009a7a  00000000  00000000  000274e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00030f5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ef0  00000000  00000000  00030fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	08002cf4 	.word	0x08002cf4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	08002cf4 	.word	0x08002cf4

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2iz>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d215      	bcs.n	8000a7e <__aeabi_d2iz+0x36>
 8000a52:	d511      	bpl.n	8000a78 <__aeabi_d2iz+0x30>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d912      	bls.n	8000a84 <__aeabi_d2iz+0x3c>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d105      	bne.n	8000a90 <__aeabi_d2iz+0x48>
 8000a84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	bf08      	it	eq
 8000a8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2uiz>:
 8000a98:	004a      	lsls	r2, r1, #1
 8000a9a:	d211      	bcs.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d211      	bcs.n	8000ac6 <__aeabi_d2uiz+0x2e>
 8000aa2:	d50d      	bpl.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d40e      	bmi.n	8000acc <__aeabi_d2uiz+0x34>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_d2uiz+0x3a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <MADC1_voidInit>:

//u16 arr[2] = {0,0};
//u16 arr[NumOfSequences] ;

void MADC1_voidInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	/* Enable interrupt at the end of conversion */
	//SET_BIT(ADC1 -> CR1 , 5);
	
	/* Enable scan mode */
	SET_BIT(ADC1 -> CR1 , 8);
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MADC1_voidInit+0x2c>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <MADC1_voidInit+0x2c>)
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae6:	6053      	str	r3, [r2, #4]
	
	/* Regular channel sequence length (# of channels) */
	ADC1->SQR1 |= ((NumOfSequences - 1) << 20);
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MADC1_voidInit+0x2c>)
 8000aea:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <MADC1_voidInit+0x2c>)
 8000aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aee:	62d3      	str	r3, [r2, #44]	; 0x2c
	
	/* Continous conversion mode */
	SET_BIT(ADC1 -> CR2 , 1);
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <MADC1_voidInit+0x2c>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <MADC1_voidInit+0x2c>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	6093      	str	r3, [r2, #8]
	
	/* Enable DMA mode */
	//SET_BIT(ADC1 -> CR2 , 8);
	
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	40012400 	.word	0x40012400

08000b08 <MADC1_voidStartConversion>:


void MADC1_voidStartConversion(u8 Copy_u8ChannelID , u8 Copy_u8SeqID)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	460a      	mov	r2, r1
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	4613      	mov	r3, r2
 8000b16:	71bb      	strb	r3, [r7, #6]
	/* Sampling time */
	ADC1->SMPR2 |= ((SamplingTimeValue) << (Copy_u8ChannelID * 3));
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b1a:	6919      	ldr	r1, [r3, #16]
 8000b1c:	79fa      	ldrb	r2, [r7, #7]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	2207      	movs	r2, #7
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b2c:	430b      	orrs	r3, r1
 8000b2e:	6113      	str	r3, [r2, #16]
	/* order of channels conversions */
	ADC1->SQR3 |= ((Copy_u8ChannelID) << ((Copy_u8SeqID - 1) * 5));
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b34:	79f8      	ldrb	r0, [r7, #7]
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	1e5a      	subs	r2, r3, #1
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	fa00 f303 	lsl.w	r3, r0, r3
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b46:	430b      	orrs	r3, r1
 8000b48:	6353      	str	r3, [r2, #52]	; 0x34
	
	//MDMA_voidChannel1Start(&(ADC1->DR), arr , NumOfSequences);
	
	/* Enable ADC1 */
	SET_BIT(ADC1 -> CR2 , 0);
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6093      	str	r3, [r2, #8]
	MSTK_voidSetBusyWait(1000);
 8000b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5a:	f000 fc9b 	bl	8001494 <MSTK_voidSetBusyWait>
	SET_BIT(ADC1 -> CR2 , 0);
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6093      	str	r3, [r2, #8]
	MSTK_voidSetBusyWait(1000);
 8000b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6e:	f000 fc91 	bl	8001494 <MSTK_voidSetBusyWait>
	/* Reset calibration */
	//SET_BIT(ADC1 -> CR2 , 3);
	//while((GET_BIT(ADC->CR2 , 3)) == 1);
	
	/* Enable calibration */
	SET_BIT(ADC1 -> CR2 , 2);
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6093      	str	r3, [r2, #8]
	while((GET_BIT(ADC1->CR2 , 2)) == 1);
 8000b7e:	bf00      	nop
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <MADC1_voidStartConversion+0x90>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d0f8      	beq.n	8000b80 <MADC1_voidStartConversion+0x78>
	
}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40012400 	.word	0x40012400

08000b9c <MAFIO_voidSetEXTIConfiguration>:
#include "AFIO/AFIO_config.h"
#include "AFIO/AFIO_private.h"


void	MAFIO_voidSetEXTIConfiguration(u8 Copy_u8EXTILine ,u8 Copy_u8PortMap)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8RegIndex = 0 ;		
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
	/* Assign to EXTICRX register									*/
	if(Copy_u8EXTILine <= 3 )
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d802      	bhi.n	8000bbc <MAFIO_voidSetEXTIConfiguration+0x20>
	{
			Local_u8RegIndex = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e019      	b.n	8000bf0 <MAFIO_voidSetEXTIConfiguration+0x54>
	}
	else if(Copy_u8EXTILine <= 7)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	d805      	bhi.n	8000bce <MAFIO_voidSetEXTIConfiguration+0x32>
	{	
		Local_u8RegIndex = 1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
		
		/*bit0 to bit3 not 4 to 7*/
		Copy_u8EXTILine -= 4;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3b04      	subs	r3, #4
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	e010      	b.n	8000bf0 <MAFIO_voidSetEXTIConfiguration+0x54>
	}
	else if(Copy_u8EXTILine <= 11)
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b0b      	cmp	r3, #11
 8000bd2:	d805      	bhi.n	8000be0 <MAFIO_voidSetEXTIConfiguration+0x44>
	{
		Local_u8RegIndex = 2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	73fb      	strb	r3, [r7, #15]
		/*4bits from 0 to 3*/
		Copy_u8EXTILine -= 8;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b08      	subs	r3, #8
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	e007      	b.n	8000bf0 <MAFIO_voidSetEXTIConfiguration+0x54>
	
	}
	else if(Copy_u8EXTILine <= 15)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b0f      	cmp	r3, #15
 8000be4:	d804      	bhi.n	8000bf0 <MAFIO_voidSetEXTIConfiguration+0x54>
	{
		Local_u8RegIndex = 3;
 8000be6:	2303      	movs	r3, #3
 8000be8:	73fb      	strb	r3, [r7, #15]
		/*4bits from 0 to 3*/
		Copy_u8EXTILine -= 12;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	3b0c      	subs	r3, #12
 8000bee:	71fb      	strb	r3, [r7, #7]
	}

	/*reset first --> (avoiding overwrite)*/
	AFIO->EXTICR[Local_u8RegIndex] &= ~((0b1111) << (Copy_u8EXTILine * 4));
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	210f      	movs	r1, #15
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	490d      	ldr	r1, [pc, #52]	; (8000c40 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	4002      	ands	r2, r0
 8000c0e:	3302      	adds	r3, #2
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	
	/*set*/
	AFIO->EXTICR[Local_u8RegIndex]  |= ((Copy_u8PortMap) << (Copy_u8EXTILine * 4));	
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	3302      	adds	r3, #2
 8000c1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c1e:	79b9      	ldrb	r1, [r7, #6]
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	4905      	ldr	r1, [pc, #20]	; (8000c40 <MAFIO_voidSetEXTIConfiguration+0xa4>)
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	4302      	orrs	r2, r0
 8000c30:	3302      	adds	r3, #2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	40010000 	.word	0x40010000

08000c44 <MGPIO_VoidSetPinDirection>:
#include "DIO/DIO_interface.h"
#include "DIO/DIO_private.h"
#include "DIO/DIO_config.h"

void MGPIO_VoidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	71bb      	strb	r3, [r7, #6]
 8000c52:	4613      	mov	r3, r2
 8000c54:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d07a      	beq.n	8000d52 <MGPIO_VoidSetPinDirection+0x10e>
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	f300 80b6 	bgt.w	8000dce <MGPIO_VoidSetPinDirection+0x18a>
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <MGPIO_VoidSetPinDirection+0x28>
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d03a      	beq.n	8000ce0 <MGPIO_VoidSetPinDirection+0x9c>
		}
		
		break;

	}
}
 8000c6a:	e0b0      	b.n	8000dce <MGPIO_VoidSetPinDirection+0x18a>
		if(Copy_u8Pin <= 7 )
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d817      	bhi.n	8000ca2 <MGPIO_VoidSetPinDirection+0x5e>
			GPIOA_CRL &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ));  /*Reset or clear pin (4bits)*/
 8000c72:	4b59      	ldr	r3, [pc, #356]	; (8000dd8 <MGPIO_VoidSetPinDirection+0x194>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	79ba      	ldrb	r2, [r7, #6]
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	43d2      	mvns	r2, r2
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a54      	ldr	r2, [pc, #336]	; (8000dd8 <MGPIO_VoidSetPinDirection+0x194>)
 8000c86:	400b      	ands	r3, r1
 8000c88:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 );   /*apply mode on pin (interface file)*/
 8000c8a:	4b53      	ldr	r3, [pc, #332]	; (8000dd8 <MGPIO_VoidSetPinDirection+0x194>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	7979      	ldrb	r1, [r7, #5]
 8000c90:	79ba      	ldrb	r2, [r7, #6]
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	fa01 f202 	lsl.w	r2, r1, r2
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4a4f      	ldr	r2, [pc, #316]	; (8000dd8 <MGPIO_VoidSetPinDirection+0x194>)
 8000c9c:	430b      	orrs	r3, r1
 8000c9e:	6013      	str	r3, [r2, #0]
		break;
 8000ca0:	e090      	b.n	8000dc4 <MGPIO_VoidSetPinDirection+0x180>
		else if(Copy_u8Pin <= 15 )
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	f200 808d 	bhi.w	8000dc4 <MGPIO_VoidSetPinDirection+0x180>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000caa:	79bb      	ldrb	r3, [r7, #6]
 8000cac:	3b08      	subs	r3, #8
 8000cae:	71bb      	strb	r3, [r7, #6]
			GPIOA_CRH &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );
 8000cb0:	4b4a      	ldr	r3, [pc, #296]	; (8000ddc <MGPIO_VoidSetPinDirection+0x198>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	79ba      	ldrb	r2, [r7, #6]
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	210f      	movs	r1, #15
 8000cba:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbe:	43d2      	mvns	r2, r2
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4a46      	ldr	r2, [pc, #280]	; (8000ddc <MGPIO_VoidSetPinDirection+0x198>)
 8000cc4:	400b      	ands	r3, r1
 8000cc6:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 8000cc8:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <MGPIO_VoidSetPinDirection+0x198>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	7979      	ldrb	r1, [r7, #5]
 8000cce:	79ba      	ldrb	r2, [r7, #6]
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <MGPIO_VoidSetPinDirection+0x198>)
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	6013      	str	r3, [r2, #0]
		break;
 8000cde:	e071      	b.n	8000dc4 <MGPIO_VoidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 )
 8000ce0:	79bb      	ldrb	r3, [r7, #6]
 8000ce2:	2b07      	cmp	r3, #7
 8000ce4:	d817      	bhi.n	8000d16 <MGPIO_VoidSetPinDirection+0xd2>
			GPIOB_CRL &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );    /*Reset or clear pin*/
 8000ce6:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <MGPIO_VoidSetPinDirection+0x19c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	210f      	movs	r1, #15
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	43d2      	mvns	r2, r2
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4a39      	ldr	r2, [pc, #228]	; (8000de0 <MGPIO_VoidSetPinDirection+0x19c>)
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;    /*apply mode on pin*/
 8000cfe:	4b38      	ldr	r3, [pc, #224]	; (8000de0 <MGPIO_VoidSetPinDirection+0x19c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	7979      	ldrb	r1, [r7, #5]
 8000d04:	79ba      	ldrb	r2, [r7, #6]
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4a34      	ldr	r2, [pc, #208]	; (8000de0 <MGPIO_VoidSetPinDirection+0x19c>)
 8000d10:	430b      	orrs	r3, r1
 8000d12:	6013      	str	r3, [r2, #0]
		break;
 8000d14:	e058      	b.n	8000dc8 <MGPIO_VoidSetPinDirection+0x184>
		else if(Copy_u8Pin <= 15 )
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d855      	bhi.n	8000dc8 <MGPIO_VoidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	3b08      	subs	r3, #8
 8000d20:	71bb      	strb	r3, [r7, #6]
			GPIOB_CRH &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );
 8000d22:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <MGPIO_VoidSetPinDirection+0x1a0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	79ba      	ldrb	r2, [r7, #6]
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	4611      	mov	r1, r2
 8000d34:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <MGPIO_VoidSetPinDirection+0x1a0>)
 8000d36:	400b      	ands	r3, r1
 8000d38:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <MGPIO_VoidSetPinDirection+0x1a0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	7979      	ldrb	r1, [r7, #5]
 8000d40:	79ba      	ldrb	r2, [r7, #6]
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	fa01 f202 	lsl.w	r2, r1, r2
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a26      	ldr	r2, [pc, #152]	; (8000de4 <MGPIO_VoidSetPinDirection+0x1a0>)
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6013      	str	r3, [r2, #0]
		break;
 8000d50:	e03a      	b.n	8000dc8 <MGPIO_VoidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 )
 8000d52:	79bb      	ldrb	r3, [r7, #6]
 8000d54:	2b07      	cmp	r3, #7
 8000d56:	d817      	bhi.n	8000d88 <MGPIO_VoidSetPinDirection+0x144>
			GPIOC_CRL &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );// R M W
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MGPIO_VoidSetPinDirection+0x1a4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	210f      	movs	r1, #15
 8000d62:	fa01 f202 	lsl.w	r2, r1, r2
 8000d66:	43d2      	mvns	r2, r2
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <MGPIO_VoidSetPinDirection+0x1a4>)
 8000d6c:	400b      	ands	r3, r1
 8000d6e:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <MGPIO_VoidSetPinDirection+0x1a4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	7979      	ldrb	r1, [r7, #5]
 8000d76:	79ba      	ldrb	r2, [r7, #6]
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <MGPIO_VoidSetPinDirection+0x1a4>)
 8000d82:	430b      	orrs	r3, r1
 8000d84:	6013      	str	r3, [r2, #0]
		break;
 8000d86:	e021      	b.n	8000dcc <MGPIO_VoidSetPinDirection+0x188>
		else if(Copy_u8Pin <= 15 )
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	d81e      	bhi.n	8000dcc <MGPIO_VoidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	3b08      	subs	r3, #8
 8000d92:	71bb      	strb	r3, [r7, #6]
			GPIOC_CRH &= ~ ( ( 0b1111 )  << ( Copy_u8Pin * 4 ) );
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MGPIO_VoidSetPinDirection+0x1a8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	79ba      	ldrb	r2, [r7, #6]
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000da2:	43d2      	mvns	r2, r2
 8000da4:	4611      	mov	r1, r2
 8000da6:	4a11      	ldr	r2, [pc, #68]	; (8000dec <MGPIO_VoidSetPinDirection+0x1a8>)
 8000da8:	400b      	ands	r3, r1
 8000daa:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |= ( Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MGPIO_VoidSetPinDirection+0x1a8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	7979      	ldrb	r1, [r7, #5]
 8000db2:	79ba      	ldrb	r2, [r7, #6]
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <MGPIO_VoidSetPinDirection+0x1a8>)
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	6013      	str	r3, [r2, #0]
		break;
 8000dc2:	e003      	b.n	8000dcc <MGPIO_VoidSetPinDirection+0x188>
		break;
 8000dc4:	bf00      	nop
 8000dc6:	e002      	b.n	8000dce <MGPIO_VoidSetPinDirection+0x18a>
		break;
 8000dc8:	bf00      	nop
 8000dca:	e000      	b.n	8000dce <MGPIO_VoidSetPinDirection+0x18a>
		break;
 8000dcc:	bf00      	nop
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40010804 	.word	0x40010804
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40010c04 	.word	0x40010c04
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40011004 	.word	0x40011004

08000df0 <MGPIO_VoidSetPinValue>:


void MGPIO_VoidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	71bb      	strb	r3, [r7, #6]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d02a      	beq.n	8000e5e <MGPIO_VoidSetPinValue+0x6e>
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	dc3f      	bgt.n	8000e8c <MGPIO_VoidSetPinValue+0x9c>
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <MGPIO_VoidSetPinValue+0x26>
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d012      	beq.n	8000e3a <MGPIO_VoidSetPinValue+0x4a>
			GPIOC_BRR = (1 << Copy_u8Pin);
		}
		break;

	}
}
 8000e14:	e03a      	b.n	8000e8c <MGPIO_VoidSetPinValue+0x9c>
		if( Copy_u8Value == HIGH )
 8000e16:	797b      	ldrb	r3, [r7, #5]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d105      	bne.n	8000e28 <MGPIO_VoidSetPinValue+0x38>
			GPIOA_BSRR = (1 << Copy_u8Pin);     /*speed up -- 0 has no effect*/
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	409a      	lsls	r2, r3
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <MGPIO_VoidSetPinValue+0xa8>)
 8000e24:	601a      	str	r2, [r3, #0]
		break;
 8000e26:	e02c      	b.n	8000e82 <MGPIO_VoidSetPinValue+0x92>
		else if( Copy_u8Value == LOW )
 8000e28:	797b      	ldrb	r3, [r7, #5]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d129      	bne.n	8000e82 <MGPIO_VoidSetPinValue+0x92>
			GPIOA_BRR = (1 << Copy_u8Pin);    /*speed up*/
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
 8000e30:	2201      	movs	r2, #1
 8000e32:	409a      	lsls	r2, r3
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MGPIO_VoidSetPinValue+0xac>)
 8000e36:	601a      	str	r2, [r3, #0]
		break;
 8000e38:	e023      	b.n	8000e82 <MGPIO_VoidSetPinValue+0x92>
		if( Copy_u8Value == HIGH )
 8000e3a:	797b      	ldrb	r3, [r7, #5]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d105      	bne.n	8000e4c <MGPIO_VoidSetPinValue+0x5c>
			GPIOB_BSRR = (1 << Copy_u8Pin);
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	2201      	movs	r2, #1
 8000e44:	409a      	lsls	r2, r3
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MGPIO_VoidSetPinValue+0xb0>)
 8000e48:	601a      	str	r2, [r3, #0]
		break;
 8000e4a:	e01c      	b.n	8000e86 <MGPIO_VoidSetPinValue+0x96>
		else if( Copy_u8Value == LOW )
 8000e4c:	797b      	ldrb	r3, [r7, #5]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d119      	bne.n	8000e86 <MGPIO_VoidSetPinValue+0x96>
			GPIOB_BRR = (1 << Copy_u8Pin);
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	2201      	movs	r2, #1
 8000e56:	409a      	lsls	r2, r3
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MGPIO_VoidSetPinValue+0xb4>)
 8000e5a:	601a      	str	r2, [r3, #0]
		break;
 8000e5c:	e013      	b.n	8000e86 <MGPIO_VoidSetPinValue+0x96>
		if( Copy_u8Value == HIGH )
 8000e5e:	797b      	ldrb	r3, [r7, #5]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d105      	bne.n	8000e70 <MGPIO_VoidSetPinValue+0x80>
			GPIOC_BSRR = (1 << Copy_u8Pin);
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	2201      	movs	r2, #1
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MGPIO_VoidSetPinValue+0xb8>)
 8000e6c:	601a      	str	r2, [r3, #0]
		break;
 8000e6e:	e00c      	b.n	8000e8a <MGPIO_VoidSetPinValue+0x9a>
		else if( Copy_u8Value == LOW )
 8000e70:	797b      	ldrb	r3, [r7, #5]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d109      	bne.n	8000e8a <MGPIO_VoidSetPinValue+0x9a>
			GPIOC_BRR = (1 << Copy_u8Pin);
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MGPIO_VoidSetPinValue+0xbc>)
 8000e7e:	601a      	str	r2, [r3, #0]
		break;
 8000e80:	e003      	b.n	8000e8a <MGPIO_VoidSetPinValue+0x9a>
		break;
 8000e82:	bf00      	nop
 8000e84:	e002      	b.n	8000e8c <MGPIO_VoidSetPinValue+0x9c>
		break;
 8000e86:	bf00      	nop
 8000e88:	e000      	b.n	8000e8c <MGPIO_VoidSetPinValue+0x9c>
		break;
 8000e8a:	bf00      	nop
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40010810 	.word	0x40010810
 8000e9c:	40010814 	.word	0x40010814
 8000ea0:	40010c10 	.word	0x40010c10
 8000ea4:	40010c14 	.word	0x40010c14
 8000ea8:	40011010 	.word	0x40011010
 8000eac:	40011014 	.word	0x40011014

08000eb0 <MGPIO_u8GetPinValue>:


u8 MGPIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Result = 0 ;   //return value
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]

	switch(Copy_u8Port)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d01a      	beq.n	8000f00 <MGPIO_u8GetPinValue+0x50>
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	dc22      	bgt.n	8000f14 <MGPIO_u8GetPinValue+0x64>
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <MGPIO_u8GetPinValue+0x28>
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d00a      	beq.n	8000eec <MGPIO_u8GetPinValue+0x3c>
 8000ed6:	e01d      	b.n	8000f14 <MGPIO_u8GetPinValue+0x64>
	{
	/*get input data*/
	case GPIOA:
		LOC_u8Result = GET_BIT( GPIOA_IDR , Copy_u8Pin );
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MGPIO_u8GetPinValue+0x70>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
		break;
 8000eea:	e013      	b.n	8000f14 <MGPIO_u8GetPinValue+0x64>
		
	case GPIOB:
		LOC_u8Result = GET_BIT( GPIOB_IDR , Copy_u8Pin );
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <MGPIO_u8GetPinValue+0x74>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
		break;
 8000efe:	e009      	b.n	8000f14 <MGPIO_u8GetPinValue+0x64>
		
	case GPIOC:
		LOC_u8Result = GET_BIT( GPIOC_IDR , Copy_u8Pin );
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MGPIO_u8GetPinValue+0x78>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
		break;
 8000f12:	bf00      	nop
	}
	
	return LOC_u8Result;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	40010808 	.word	0x40010808
 8000f24:	40010c08 	.word	0x40010c08
 8000f28:	40011008 	.word	0x40011008

08000f2c <MEXTI_voidInit>:
#include "EXTI/EXTI_private.h"



void MEXTI_voidInit()
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	#if 	EXTI_MODE	== 	RISING
		SET_BIT(EXTI -> RTSR , EXTI_LINE);
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <MEXTI_voidInit+0x24>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <MEXTI_voidInit+0x24>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6093      	str	r3, [r2, #8]
	#else 	
		#error "Wrong Mode"
	#endif
	
	/*Disable interrupt*/
	CLR_BIT(EXTI -> IMR , EXTI_LINE);
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <MEXTI_voidInit+0x24>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <MEXTI_voidInit+0x24>)
 8000f42:	f023 0301 	bic.w	r3, r3, #1
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	40010400 	.word	0x40010400

08000f54 <MEXTI_voidSetSignalLatch>:
}

 
             /*changing mode & line in run time*/
void MEXTI_voidSetSignalLatch(u8 Copy_u8EXTILine , u8 Copy_u8EXTIMode)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	4613      	mov	r3, r2
 8000f62:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8EXTIMode)
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d01c      	beq.n	8000fa4 <MEXTI_voidSetSignalLatch+0x50>
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	dc2f      	bgt.n	8000fce <MEXTI_voidSetSignalLatch+0x7a>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <MEXTI_voidSetSignalLatch+0x24>
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d00b      	beq.n	8000f8e <MEXTI_voidSetSignalLatch+0x3a>
 8000f76:	e02a      	b.n	8000fce <MEXTI_voidSetSignalLatch+0x7a>
	{
		case RISING :
			SET_BIT(EXTI -> RTSR , Copy_u8EXTILine);
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MEXTI_voidSetSignalLatch+0x98>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	79fa      	ldrb	r2, [r7, #7]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	fa01 f202 	lsl.w	r2, r1, r2
 8000f84:	4611      	mov	r1, r2
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <MEXTI_voidSetSignalLatch+0x98>)
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	6093      	str	r3, [r2, #8]
			break;
 8000f8c:	e01f      	b.n	8000fce <MEXTI_voidSetSignalLatch+0x7a>
		
		case FALLING :
			SET_BIT(EXTI -> FTSR , Copy_u8EXTILine); 	
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MEXTI_voidSetSignalLatch+0x98>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	2101      	movs	r1, #1
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4a13      	ldr	r2, [pc, #76]	; (8000fec <MEXTI_voidSetSignalLatch+0x98>)
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	60d3      	str	r3, [r2, #12]
			break;
 8000fa2:	e014      	b.n	8000fce <MEXTI_voidSetSignalLatch+0x7a>
		
		case ON_CHANGE :
			SET_BIT(EXTI -> RTSR , Copy_u8EXTILine);
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MEXTI_voidSetSignalLatch+0x98>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <MEXTI_voidSetSignalLatch+0x98>)
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI -> FTSR , Copy_u8EXTILine); 	
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MEXTI_voidSetSignalLatch+0x98>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	79fa      	ldrb	r2, [r7, #7]
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <MEXTI_voidSetSignalLatch+0x98>)
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	60d3      	str	r3, [r2, #12]
			break;
 8000fcc:	bf00      	nop
	}
	SET_BIT(EXTI -> IMR , Copy_u8EXTILine);
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MEXTI_voidSetSignalLatch+0x98>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <MEXTI_voidSetSignalLatch+0x98>)
 8000fde:	430b      	orrs	r3, r1
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40010400 	.word	0x40010400

08000ff0 <EXTI_voidSetCallBack>:


void EXTI_voidSetCallBack(void (*ptr) (void) , u8 Copy_u8EXTILine)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	EXTI_GlobalPtr[Copy_u8EXTILine] = ptr;
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	4904      	ldr	r1, [pc, #16]	; (8001010 <EXTI_voidSetCallBack+0x20>)
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	20000080 	.word	0x20000080

08001014 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[0]();
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <EXTI0_IRQHandler+0x1c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 0);
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <EXTI0_IRQHandler+0x20>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <EXTI0_IRQHandler+0x20>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6153      	str	r3, [r2, #20]
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000080 	.word	0x20000080
 8001034:	40010400 	.word	0x40010400

08001038 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[1]();
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <EXTI1_IRQHandler+0x1c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 1);
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <EXTI1_IRQHandler+0x20>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a04      	ldr	r2, [pc, #16]	; (8001058 <EXTI1_IRQHandler+0x20>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6153      	str	r3, [r2, #20]
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000080 	.word	0x20000080
 8001058:	40010400 	.word	0x40010400

0800105c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[2]();
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <EXTI2_IRQHandler+0x1c>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 2);
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <EXTI2_IRQHandler+0x20>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <EXTI2_IRQHandler+0x20>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6153      	str	r3, [r2, #20]
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000080 	.word	0x20000080
 800107c:	40010400 	.word	0x40010400

08001080 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[3]();
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <EXTI3_IRQHandler+0x1c>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 3);
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <EXTI3_IRQHandler+0x20>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <EXTI3_IRQHandler+0x20>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6153      	str	r3, [r2, #20]
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000080 	.word	0x20000080
 80010a0:	40010400 	.word	0x40010400

080010a4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	EXTI_GlobalPtr[4]();
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <EXTI4_IRQHandler+0x1c>)
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	4798      	blx	r3
	/*clear pending bit*/
	SET_BIT(EXTI -> PR , 4);
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <EXTI4_IRQHandler+0x20>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <EXTI4_IRQHandler+0x20>)
 80010b4:	f043 0310 	orr.w	r3, r3, #16
 80010b8:	6153      	str	r3, [r2, #20]
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000080 	.word	0x20000080
 80010c4:	40010400 	.word	0x40010400

080010c8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	u8 PinValue_5 , PinValue_6 , PinValue_7 , PinValue_8 , PinValue_9;

	PinValue_5 = GET_BIT(EXTI->PR,5);
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	71fb      	strb	r3, [r7, #7]
	PinValue_6 = GET_BIT(EXTI->PR,6);
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	099b      	lsrs	r3, r3, #6
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	71bb      	strb	r3, [r7, #6]
	PinValue_7 = GET_BIT(EXTI->PR,7);
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	09db      	lsrs	r3, r3, #7
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	717b      	strb	r3, [r7, #5]
	PinValue_8 = GET_BIT(EXTI->PR,8);
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	713b      	strb	r3, [r7, #4]
	PinValue_9 = GET_BIT(EXTI->PR,9);
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	0a5b      	lsrs	r3, r3, #9
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	70fb      	strb	r3, [r7, #3]

	if (PinValue_5 == 1)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <EXTI9_5_IRQHandler+0x64>
	{
		EXTI_GlobalPtr[5]();
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <EXTI9_5_IRQHandler+0xd0>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 5);
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_6 == 1)
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI_GlobalPtr[6]();
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <EXTI9_5_IRQHandler+0xd0>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 6);
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	4a15      	ldr	r2, [pc, #84]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 800113e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001142:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_7 == 1)
 8001144:	797b      	ldrb	r3, [r7, #5]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d108      	bne.n	800115c <EXTI9_5_IRQHandler+0x94>
	{
		EXTI_GlobalPtr[7]();
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <EXTI9_5_IRQHandler+0xd0>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 7);
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 8001156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115a:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_8 == 1)
 800115c:	793b      	ldrb	r3, [r7, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d108      	bne.n	8001174 <EXTI9_5_IRQHandler+0xac>
	{
		EXTI_GlobalPtr[8]();
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <EXTI9_5_IRQHandler+0xd0>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 8);
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	4a09      	ldr	r2, [pc, #36]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_9 == 1)
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <EXTI9_5_IRQHandler+0xc4>
	{
		EXTI_GlobalPtr[9]();
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <EXTI9_5_IRQHandler+0xd0>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 9);
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	4a03      	ldr	r2, [pc, #12]	; (8001194 <EXTI9_5_IRQHandler+0xcc>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6153      	str	r3, [r2, #20]
	}

}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40010400 	.word	0x40010400
 8001198:	20000080 	.word	0x20000080

0800119c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	u8 PinValue_10 , PinValue_11 , PinValue_12 , PinValue_13 , PinValue_14 , PinValue_15;

	PinValue_10 = GET_BIT(EXTI->PR,10);
 80011a2:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	0a9b      	lsrs	r3, r3, #10
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	71fb      	strb	r3, [r7, #7]
	PinValue_11 = GET_BIT(EXTI->PR,11);
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	0adb      	lsrs	r3, r3, #11
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	71bb      	strb	r3, [r7, #6]
	PinValue_12 = GET_BIT(EXTI->PR,12);
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	0b1b      	lsrs	r3, r3, #12
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	717b      	strb	r3, [r7, #5]
	PinValue_13 = GET_BIT(EXTI->PR,13);
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	0b5b      	lsrs	r3, r3, #13
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	713b      	strb	r3, [r7, #4]
	PinValue_14 = GET_BIT(EXTI->PR,14);
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	0b9b      	lsrs	r3, r3, #14
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	70fb      	strb	r3, [r7, #3]
	PinValue_15 = GET_BIT(EXTI->PR,14);
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	0b9b      	lsrs	r3, r3, #14
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	70bb      	strb	r3, [r7, #2]

	if (PinValue_10 == 1)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <EXTI15_10_IRQHandler+0x72>
	{
		EXTI_GlobalPtr[10]();
 80011fc:	4b25      	ldr	r3, [pc, #148]	; (8001294 <EXTI15_10_IRQHandler+0xf8>)
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 10);
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	4a22      	ldr	r2, [pc, #136]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 8001208:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120c:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_11 == 1)
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d108      	bne.n	8001226 <EXTI15_10_IRQHandler+0x8a>
	{
		EXTI_GlobalPtr[11]();
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <EXTI15_10_IRQHandler+0xf8>)
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 11);
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 8001220:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001224:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_12 == 1)
 8001226:	797b      	ldrb	r3, [r7, #5]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d108      	bne.n	800123e <EXTI15_10_IRQHandler+0xa2>
	{
		EXTI_GlobalPtr[12]();
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <EXTI15_10_IRQHandler+0xf8>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 12);
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 8001238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800123c:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_13 == 1)
 800123e:	793b      	ldrb	r3, [r7, #4]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d108      	bne.n	8001256 <EXTI15_10_IRQHandler+0xba>
	{
		EXTI_GlobalPtr[13]();
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <EXTI15_10_IRQHandler+0xf8>)
 8001246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001248:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 13);
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 8001250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001254:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_14 == 1)
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d108      	bne.n	800126e <EXTI15_10_IRQHandler+0xd2>
	{
		EXTI_GlobalPtr[14]();
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <EXTI15_10_IRQHandler+0xf8>)
 800125e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001260:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 14);
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6153      	str	r3, [r2, #20]
	}

	if (PinValue_15 == 1)
 800126e:	78bb      	ldrb	r3, [r7, #2]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d108      	bne.n	8001286 <EXTI15_10_IRQHandler+0xea>
	{
		EXTI_GlobalPtr[15]();
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <EXTI15_10_IRQHandler+0xf8>)
 8001276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001278:	4798      	blx	r3
		SET_BIT(EXTI -> PR , 15);
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <EXTI15_10_IRQHandler+0xf4>)
 8001280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001284:	6153      	str	r3, [r2, #20]
	}

}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010400 	.word	0x40010400
 8001294:	20000080 	.word	0x20000080

08001298 <HENCODER_voidEncoderCounts>:
		return Global_u8MotorRightDirection;
	}
}

s32 HENCODER_voidEncoderCounts(u8 Copy_u8Channel2Port ,u8 Copy_u8Channel2Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	//u8 MotorDirection ;
	u8 Local_u8ChannelState ;

	Local_u8ChannelState = MGPIO_u8GetPinValue(Copy_u8Channel2Port ,Copy_u8Channel2Pin+1);
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fdfc 	bl	8000eb0 <MGPIO_u8GetPinValue>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]
	
	if (Copy_u8Channel2Pin == 8)
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d119      	bne.n	80012f6 <HENCODER_voidEncoderCounts+0x5e>
	{
		if(Local_u8ChannelState == HIGH)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d108      	bne.n	80012da <HENCODER_voidEncoderCounts+0x42>
		{
			Global_u8MotorLeftDirection = ClockwiseDirection;
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HENCODER_voidEncoderCounts+0x98>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfLeftCounts--;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HENCODER_voidEncoderCounts+0x9c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HENCODER_voidEncoderCounts+0x9c>)
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e00a      	b.n	80012f0 <HENCODER_voidEncoderCounts+0x58>
		}
		else if (Local_u8ChannelState == LOW)
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d107      	bne.n	80012f0 <HENCODER_voidEncoderCounts+0x58>
		{
			Global_u8MotorLeftDirection = CounterClockwiseDirection;
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HENCODER_voidEncoderCounts+0x98>)
 80012e2:	2202      	movs	r2, #2
 80012e4:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfLeftCounts++;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HENCODER_voidEncoderCounts+0x9c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a11      	ldr	r2, [pc, #68]	; (8001334 <HENCODER_voidEncoderCounts+0x9c>)
 80012ee:	6013      	str	r3, [r2, #0]
		}

	return Global_s32NumOfLeftCounts;
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HENCODER_voidEncoderCounts+0x9c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	e018      	b.n	8001328 <HENCODER_voidEncoderCounts+0x90>
	}

	else //if (Copy_u8Channel2Pin == 10)
	{
		if(Local_u8ChannelState == HIGH)
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d108      	bne.n	800130e <HENCODER_voidEncoderCounts+0x76>
		{
			Global_u8MotorRightDirection = ClockwiseDirection;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HENCODER_voidEncoderCounts+0xa0>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfRightCounts--;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HENCODER_voidEncoderCounts+0xa4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3b01      	subs	r3, #1
 8001308:	4a0c      	ldr	r2, [pc, #48]	; (800133c <HENCODER_voidEncoderCounts+0xa4>)
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	e00a      	b.n	8001324 <HENCODER_voidEncoderCounts+0x8c>
		}
		else if (Local_u8ChannelState == LOW)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d107      	bne.n	8001324 <HENCODER_voidEncoderCounts+0x8c>
		{
			Global_u8MotorRightDirection = CounterClockwiseDirection;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HENCODER_voidEncoderCounts+0xa0>)
 8001316:	2202      	movs	r2, #2
 8001318:	701a      	strb	r2, [r3, #0]
			Global_s32NumOfRightCounts++;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HENCODER_voidEncoderCounts+0xa4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <HENCODER_voidEncoderCounts+0xa4>)
 8001322:	6013      	str	r3, [r2, #0]
		}

	return Global_s32NumOfRightCounts;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HENCODER_voidEncoderCounts+0xa4>)
 8001326:	681b      	ldr	r3, [r3, #0]
	}
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200000c1 	.word	0x200000c1
 8001334:	200000c8 	.word	0x200000c8
 8001338:	200000c0 	.word	0x200000c0
 800133c:	200000c4 	.word	0x200000c4

08001340 <HENCODER_s32GetZeroCounts>:


void HENCODER_s32GetZeroCounts(u8 Copy_u8Channel2Pin)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8Channel2Pin == 8)
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b08      	cmp	r3, #8
 800134e:	d103      	bne.n	8001358 <HENCODER_s32GetZeroCounts+0x18>
	{
		Global_s32NumOfLeftCounts = 0;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <HENCODER_s32GetZeroCounts+0x30>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
	else if (Copy_u8Channel2Pin == 10)
	{
		Global_s32NumOfRightCounts = 0;
	}
	//return Global_s32NumOfCounts;
}
 8001356:	e005      	b.n	8001364 <HENCODER_s32GetZeroCounts+0x24>
	else if (Copy_u8Channel2Pin == 10)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b0a      	cmp	r3, #10
 800135c:	d102      	bne.n	8001364 <HENCODER_s32GetZeroCounts+0x24>
		Global_s32NumOfRightCounts = 0;
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HENCODER_s32GetZeroCounts+0x34>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200000c8 	.word	0x200000c8
 8001374:	200000c4 	.word	0x200000c4

08001378 <HENCODER_f32GetZeroDistance>:
	Global_f32Distance = Global_f32Distance + (Copy_s32EncoderCounts*2*Pi*WheelRadius)/EncoderResolution;
	return Global_f32Distance;
}

void HENCODER_f32GetZeroDistance(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	Global_f32Distance = 0;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HENCODER_f32GetZeroDistance+0x14>)
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	200000cc 	.word	0x200000cc

08001390 <MNVIC_voidEnableInterrupt>:
#include "NVIC/NVIC_config.h"
#include "NVIC/NVIC_private.h"


void MNVIC_voidEnableInterrupt (u8 Copy_u8IntNumber)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	if ( Copy_u8IntNumber <= 31)
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b1f      	cmp	r3, #31
 800139e:	d805      	bhi.n	80013ac <MNVIC_voidEnableInterrupt+0x1c>
	{
		NVIC_ISER0 = (1 << Copy_u8IntNumber);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	2201      	movs	r2, #1
 80013a4:	409a      	lsls	r2, r3
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MNVIC_voidEnableInterrupt+0x3c>)
 80013a8:	601a      	str	r2, [r3, #0]
	{
		Copy_u8IntNumber -= 32;
		NVIC_ISER1 = (1 << Copy_u8IntNumber);
	}
	
}
 80013aa:	e00a      	b.n	80013c2 <MNVIC_voidEnableInterrupt+0x32>
	else if (  Copy_u8IntNumber <= 59)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	2b3b      	cmp	r3, #59	; 0x3b
 80013b0:	d807      	bhi.n	80013c2 <MNVIC_voidEnableInterrupt+0x32>
		Copy_u8IntNumber -= 32;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	3b20      	subs	r3, #32
 80013b6:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << Copy_u8IntNumber);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2201      	movs	r2, #1
 80013bc:	409a      	lsls	r2, r3
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <MNVIC_voidEnableInterrupt+0x40>)
 80013c0:	601a      	str	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000e104 	.word	0xe000e104

080013d4 <RCC_voidInitSysClock>:
#include "RCC/RCC_interface.h"
#include "RCC/RCC_private.h"
#include "RCC/RCC_config.h"

void RCC_voidInitSysClock(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
	#if     RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		RCC_CR   = 0x00010000; /* Enable HSE with no bypass */
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <RCC_voidInitSysClock+0x1c>)
 80013da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013de:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0x00000001;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <RCC_voidInitSysClock+0x20>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
		#endif
	
	#else
		#error("You chosed Wrong Clock type")
	#endif
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40021004 	.word	0x40021004

080013f8 <RCC_voidEnableClock>:


void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PeripheralId)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	4613      	mov	r3, r2
 8001406:	71bb      	strb	r3, [r7, #6]
	/*check input validation (32 bits)*/
	if (Copy_u8PeripheralId <= 31)     
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	2b1f      	cmp	r3, #31
 800140c:	d82a      	bhi.n	8001464 <RCC_voidEnableClock+0x6c>
	{
		switch (Copy_u8BusId)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d01c      	beq.n	800144e <RCC_voidEnableClock+0x56>
 8001414:	2b02      	cmp	r3, #2
 8001416:	dc26      	bgt.n	8001466 <RCC_voidEnableClock+0x6e>
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <RCC_voidEnableClock+0x2a>
 800141c:	2b01      	cmp	r3, #1
 800141e:	d00b      	beq.n	8001438 <RCC_voidEnableClock+0x40>
	/*else
	{
		// Return Error 
	}*/

}
 8001420:	e021      	b.n	8001466 <RCC_voidEnableClock+0x6e>
			case RCC_AHB  : SET_BIT(RCC_AHBENR  ,Copy_u8PeripheralId);   
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <RCC_voidEnableClock+0x78>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	79ba      	ldrb	r2, [r7, #6]
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	4611      	mov	r1, r2
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <RCC_voidEnableClock+0x78>)
 8001432:	430b      	orrs	r3, r1
 8001434:	6013      	str	r3, [r2, #0]
			break;
 8001436:	e016      	b.n	8001466 <RCC_voidEnableClock+0x6e>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR ,Copy_u8PeripheralId);   
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <RCC_voidEnableClock+0x7c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	79ba      	ldrb	r2, [r7, #6]
 800143e:	2101      	movs	r1, #1
 8001440:	fa01 f202 	lsl.w	r2, r1, r2
 8001444:	4611      	mov	r1, r2
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <RCC_voidEnableClock+0x7c>)
 8001448:	430b      	orrs	r3, r1
 800144a:	6013      	str	r3, [r2, #0]
			break;
 800144c:	e00b      	b.n	8001466 <RCC_voidEnableClock+0x6e>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR ,Copy_u8PeripheralId);   
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <RCC_voidEnableClock+0x80>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	79ba      	ldrb	r2, [r7, #6]
 8001454:	2101      	movs	r1, #1
 8001456:	fa01 f202 	lsl.w	r2, r1, r2
 800145a:	4611      	mov	r1, r2
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <RCC_voidEnableClock+0x80>)
 800145e:	430b      	orrs	r3, r1
 8001460:	6013      	str	r3, [r2, #0]
			break;
 8001462:	e000      	b.n	8001466 <RCC_voidEnableClock+0x6e>
	}
 8001464:	bf00      	nop
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40021014 	.word	0x40021014
 8001474:	4002101c 	.word	0x4002101c
 8001478:	40021018 	.word	0x40021018

0800147c <MSTK_voidInit>:
/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;


void MSTK_voidInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;	
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <MSTK_voidInit+0x14>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
#endif
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <MSTK_voidSetBusyWait>:

		/*synchronous function*/
void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 800149c:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <MSTK_voidSetBusyWait+0x4c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6053      	str	r3, [r2, #4]
	/* Start Timer */
	SET_BIT(MSTK -> CTRL, 0);
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MSTK_voidSetBusyWait+0x4c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <MSTK_voidSetBusyWait+0x4c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6013      	str	r3, [r2, #0]
	/* Wait till flag is raised */
	while( (GET_BIT(MSTK -> CTRL,16)) == 0);
 80014ae:	bf00      	nop
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MSTK_voidSetBusyWait+0x4c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f8      	beq.n	80014b0 <MSTK_voidSetBusyWait+0x1c>
	/* Stop Timer */
	SET_BIT(MSTK -> CTRL, 0);
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MSTK_voidSetBusyWait+0x4c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <MSTK_voidSetBusyWait+0x4c>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <MSTK_voidSetBusyWait+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;	
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <MSTK_voidSetBusyWait+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <SysTick_Handler>:
	return Local_u32RemainTime;
}


void SysTick_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary;

	if (MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL)
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <SysTick_Handler+0x50>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d111      	bne.n	8001516 <SysTick_Handler+0x32>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK -> CTRL, 1);
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <SysTick_Handler+0x54>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <SysTick_Handler+0x54>)
 80014f8:	f023 0302 	bic.w	r3, r3, #2
 80014fc:	6013      	str	r3, [r2, #0]
		/* Stop Timer */
		SET_BIT(MSTK -> CTRL, 0);
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <SysTick_Handler+0x54>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <SysTick_Handler+0x54>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <SysTick_Handler+0x54>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <SysTick_Handler+0x54>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
	}

	/* Callback notification */
	MSTK_GlobalPtr();
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <SysTick_Handler+0x58>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4798      	blx	r3

	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK -> CTRL,16);
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <SysTick_Handler+0x54>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0c1b      	lsrs	r3, r3, #16
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200000d4 	.word	0x200000d4
 8001538:	e000e010 	.word	0xe000e010
 800153c:	200000d0 	.word	0x200000d0

08001540 <MTIM2_voidInitC2>:
#include "TIM2/TIM2_interface.h"
#include "TIM2/TIM2_private.h"
#include "TIM2/TIM2_config.h"

void MTIM2_voidInitC2 (void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	
	/*direction of counter when it is edge aligned mode , no need for this bit if centered aligned*/
	CLR_BIT(TIM2 -> CR1 , 4);
 8001544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154e:	f023 0310 	bic.w	r3, r3, #16
 8001552:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= (CR1_DIR << 4);
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6013      	str	r3, [r2, #0]
	
	/*prescaler value*/
	TIM2->PSC = TIM_PRESCALER;
 8001564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001568:	2208      	movs	r2, #8
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
	
	/*if there is interrupt then DIER_UIE must be enabled*/
	SET_BIT(TIM2 -> DIER , 0);
 800156c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	60d3      	str	r3, [r2, #12]
	
	/*enable channel2*/
	SET_BIT(TIM2->CCER , 4);
 800157c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001586:	f043 0310 	orr.w	r3, r3, #16
 800158a:	6213      	str	r3, [r2, #32]

	/*enable pwm mode 1 - channel 2*/
	CLR_BIT(TIM2->CCMR1 , 12);
 800158c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800159a:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM2->CCMR1 , 13);
 800159c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015aa:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM2->CCMR1 , 14);
 80015ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ba:	6193      	str	r3, [r2, #24]

	/*enable output compare -- update value after overflow or immediately*/
	CLR_BIT(TIM2->CCMR1 , 11);   //immediately
 80015bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015ca:	6193      	str	r3, [r2, #24]

	/*enable auto reload preload for PWM*/
	SET_BIT(TIM2 -> CR1 , 7);
 80015cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015da:	6013      	str	r3, [r2, #0]

	/*load desired value of ARR*/
	TIM2->ARR  = 100;
 80015dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e0:	2264      	movs	r2, #100	; 0x64
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c

	/*enable counter*/
	SET_BIT(TIM2 -> CR1 , 0);
 80015e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]
	/*enable update generation*/
	SET_BIT(TIM2 -> EGR , 0);
 80015f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6153      	str	r3, [r2, #20]

}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <MTIM2_voidOutputPWM_C2>:
	CLR_BIT(TIM2 -> SR , 0);
	
}

void MTIM2_voidOutputPWM_C2 (u16 Copy_16CompareValue)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
	/*load the desired value -- channel2*/
	CCR2 = Copy_16CompareValue;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <MTIM2_voidOutputPWM_C2+0x1c>)
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40000038 	.word	0x40000038

0800162c <MTIM3_voidInit>:
#include "TIM3/TIM3_interface.h"
#include "TIM3/TIM3_private.h"
#include "TIM3/TIM3_config.h"

void MTIM3_voidInit (void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
	
	/*direction of counter when it is edge aligned mode , no need for this bit if centered aligned*/
	CLR_BIT(TIM3 -> CR1 , 4);
 8001630:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001636:	f023 0310 	bic.w	r3, r3, #16
 800163a:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= (CR1_DIR << 4);
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <MTIM3_voidInit+0x98>)
 800163e:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6013      	str	r3, [r2, #0]
	
	/*prescaler value*/
	TIM3->PSC = TIM_PRESCALER;
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001646:	2208      	movs	r2, #8
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
	
	/*if there is interrupt then DIER_UIE must be enabled*/
	SET_BIT(TIM3 -> DIER , 0);
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <MTIM3_voidInit+0x98>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	60d3      	str	r3, [r2, #12]
	
	/*enable channel1*/
	SET_BIT(TIM3->CCER , 0);
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a1a      	ldr	r2, [pc, #104]	; (80016c4 <MTIM3_voidInit+0x98>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6213      	str	r3, [r2, #32]

	/*enable pwm mode 1 , channel1*/
	CLR_BIT(TIM3->CCMR1 , 4);
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001668:	f023 0310 	bic.w	r3, r3, #16
 800166c:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM3->CCMR1 , 5);
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001674:	f043 0320 	orr.w	r3, r3, #32
 8001678:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM3->CCMR1 , 6);
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <MTIM3_voidInit+0x98>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001684:	6193      	str	r3, [r2, #24]

	/*enable output compare -- update value after overflow or immediately*/
	CLR_BIT(TIM3->CCMR1 , 3);   //immediately , channel1
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <MTIM3_voidInit+0x98>)
 800168c:	f023 0308 	bic.w	r3, r3, #8
 8001690:	6193      	str	r3, [r2, #24]

	/*enable auto reload preload for PWM*/
	SET_BIT(TIM3 -> CR1 , 7);
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <MTIM3_voidInit+0x98>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169c:	6013      	str	r3, [r2, #0]

	/*load desired value in ARR*/
	TIM3->ARR  = 100;
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MTIM3_voidInit+0x98>)
 80016a0:	2264      	movs	r2, #100	; 0x64
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c

	/*enable counter*/
	SET_BIT(TIM3 -> CR1 , 0);
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <MTIM3_voidInit+0x98>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <MTIM3_voidInit+0x98>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]
	/*enable update generation*/
	SET_BIT(TIM3 -> EGR , 0);
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <MTIM3_voidInit+0x98>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <MTIM3_voidInit+0x98>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6153      	str	r3, [r2, #20]

}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40000400 	.word	0x40000400

080016c8 <MTIM3_voidOutputPWM>:

}


void MTIM3_voidOutputPWM (u16 Copy_u16CompareValue)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	80fb      	strh	r3, [r7, #6]
	/* load desired value in channel 1 */
	CCR1 = Copy_u16CompareValue;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <MTIM3_voidOutputPWM+0x1c>)
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40000434 	.word	0x40000434

080016e8 <MUSART2_voidInit>:
#include <string.h>

//u8 Global_u8ReceivedData = 0;

void MUSART2_voidInit(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	/*Enable clock of GPIO, AFIO , USART2*/
	RCC_voidEnableClock(RCC_APB2,2);
 80016ec:	2102      	movs	r1, #2
 80016ee:	2002      	movs	r0, #2
 80016f0:	f7ff fe82 	bl	80013f8 <RCC_voidEnableClock>
	//RCC_voidEnableClock(RCC_APB2,3);
	RCC_voidEnableClock(RCC_APB2,0);
 80016f4:	2100      	movs	r1, #0
 80016f6:	2002      	movs	r0, #2
 80016f8:	f7ff fe7e 	bl	80013f8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB1,17);
 80016fc:	2111      	movs	r1, #17
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fe7a 	bl	80013f8 <RCC_voidEnableClock>

	/*pin mode*/
	MGPIO_VoidSetPinDirection(GPIOA,PIN2,OUTPUT_10MHZ_AFPP);   // TX
 8001704:	2209      	movs	r2, #9
 8001706:	2102      	movs	r1, #2
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff fa9b 	bl	8000c44 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN3,INPUT_FLOATING);   // RX
 800170e:	2204      	movs	r2, #4
 8001710:	2103      	movs	r1, #3
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff fa96 	bl	8000c44 <MGPIO_VoidSetPinDirection>

	/*	baud rate = 9600		*/
	USART2 -> BRR = 0x341;
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <MUSART2_voidInit+0x68>)
 800171a:	f240 3241 	movw	r2, #833	; 0x341
 800171e:	609a      	str	r2, [r3, #8]

	SET_BIT((USART2-> CR1), 3);			/* Enabling Transmitter */
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MUSART2_voidInit+0x68>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <MUSART2_voidInit+0x68>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART2-> CR1), 2);			/* Enabling Receiver */
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MUSART2_voidInit+0x68>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <MUSART2_voidInit+0x68>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART2-> CR1), 13);     	/* Enabling USART */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <MUSART2_voidInit+0x68>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <MUSART2_voidInit+0x68>)
 800173e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001742:	60d3      	str	r3, [r2, #12]
	
	USART2 -> SR = 0;					/* Clearing status register */
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <MUSART2_voidInit+0x68>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40004400 	.word	0x40004400

08001754 <MUSART2_voidSendData>:

void MUSART2_voidSendData(u8 Copy_u16Data)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	USART2 -> DR = Copy_u16Data;
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <MUSART2_voidSendData+0x38>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	6053      	str	r3, [r2, #4]
	while((GET_BIT((USART2 -> SR), 6)) == 0);
 8001764:	bf00      	nop
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MUSART2_voidSendData+0x38>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	099b      	lsrs	r3, r3, #6
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f8      	beq.n	8001766 <MUSART2_voidSendData+0x12>
	CLR_BIT(USART2->SR,6);
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <MUSART2_voidSendData+0x38>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <MUSART2_voidSendData+0x38>)
 800177a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800177e:	6013      	str	r3, [r2, #0]

}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40004400 	.word	0x40004400

08001790 <MUSART2_voidSendString>:

void MUSART2_voidSendString(u8 *Copy_u8String)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	while( (*Copy_u8String) != '\0' )
 8001798:	e007      	b.n	80017aa <MUSART2_voidSendString+0x1a>
		{
			MUSART2_voidSendData(*Copy_u8String);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ffd8 	bl	8001754 <MUSART2_voidSendData>
			Copy_u8String++;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3301      	adds	r3, #1
 80017a8:	607b      	str	r3, [r7, #4]
	while( (*Copy_u8String) != '\0' )
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f3      	bne.n	800179a <MUSART2_voidSendString+0xa>
		}
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <MUSART2_u8ReceiveData>:

	MUSART2_voidSendString(string);
}

u8 MUSART2_u8ReceiveData(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
	u8 Loc_u8ReceivedData = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	71fb      	strb	r3, [r7, #7]
	/* wait until receive complete*/
	while((GET_BIT((USART2 -> SR), 5)) == 0);
 80017c6:	bf00      	nop
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MUSART2_u8ReceiveData+0x2c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	095b      	lsrs	r3, r3, #5
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f8      	beq.n	80017c8 <MUSART2_u8ReceiveData+0xc>
	Loc_u8ReceivedData = USART2 -> DR;
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <MUSART2_u8ReceiveData+0x2c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	71fb      	strb	r3, [r7, #7]
	return (Loc_u8ReceivedData);
 80017dc:	79fb      	ldrb	r3, [r7, #7]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40004400 	.word	0x40004400

080017ec <MUSART2_u8ReceiveDataBlock>:

u8 MUSART2_u8ReceiveDataBlock(u8* Copy_u8DataArr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	u8 Loc_u8Data = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
	u8 Loc_u8Index = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73bb      	strb	r3, [r7, #14]

	Loc_u8Data = MUSART2_u8ReceiveData();
 80017fc:	f7ff ffde 	bl	80017bc <MUSART2_u8ReceiveData>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]

	while(Loc_u8Data != '\0')
 8001804:	e00b      	b.n	800181e <MUSART2_u8ReceiveDataBlock+0x32>
	{
		Copy_u8DataArr[Loc_u8Index] = Loc_u8Data;
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	701a      	strb	r2, [r3, #0]
		Loc_u8Index++;
 8001810:	7bbb      	ldrb	r3, [r7, #14]
 8001812:	3301      	adds	r3, #1
 8001814:	73bb      	strb	r3, [r7, #14]
		Loc_u8Data = MUSART2_u8ReceiveData();
 8001816:	f7ff ffd1 	bl	80017bc <MUSART2_u8ReceiveData>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
	while(Loc_u8Data != '\0')
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <MUSART2_u8ReceiveDataBlock+0x1a>
	}

	return Loc_u8Index;
 8001824:	7bbb      	ldrb	r3, [r7, #14]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <LeftEncoderGetReading>:
s16 Local_Reading = 0;


/*ISR of EXTI8 (left encoder)*/
void LeftEncoderGetReading (void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	left_counts = HENCODER_voidEncoderCounts(GPIOA,PIN8);
 8001834:	2108      	movs	r1, #8
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fd2e 	bl	8001298 <HENCODER_voidEncoderCounts>
 800183c:	4603      	mov	r3, r0
 800183e:	4a02      	ldr	r2, [pc, #8]	; (8001848 <LeftEncoderGetReading+0x18>)
 8001840:	6013      	str	r3, [r2, #0]
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200000dc 	.word	0x200000dc

0800184c <RightEncoderGetReading>:

/*ISR of EXTI10 (right encoder)*/
void RightEncoderGetReading (void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	right_counts = HENCODER_voidEncoderCounts(GPIOB,PIN10);
 8001850:	210a      	movs	r1, #10
 8001852:	2001      	movs	r0, #1
 8001854:	f7ff fd20 	bl	8001298 <HENCODER_voidEncoderCounts>
 8001858:	4603      	mov	r3, r0
 800185a:	4a02      	ldr	r2, [pc, #8]	; (8001864 <RightEncoderGetReading+0x18>)
 800185c:	6013      	str	r3, [r2, #0]
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200000d8 	.word	0x200000d8

08001868 <Get_Reading>:



s16 Get_Reading(void)
{
 8001868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
	Rx_arrlength = MUSART2_u8ReceiveDataBlock(data_arr);
 8001870:	4853      	ldr	r0, [pc, #332]	; (80019c0 <Get_Reading+0x158>)
 8001872:	f7ff ffbb 	bl	80017ec <MUSART2_u8ReceiveDataBlock>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b52      	ldr	r3, [pc, #328]	; (80019c4 <Get_Reading+0x15c>)
 800187c:	701a      	strb	r2, [r3, #0]
	Rx_mpu = 0;
 800187e:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <Get_Reading+0x160>)
 8001880:	2200      	movs	r2, #0
 8001882:	801a      	strh	r2, [r3, #0]

	if(data_arr[0] == 'a')
 8001884:	4b4e      	ldr	r3, [pc, #312]	; (80019c0 <Get_Reading+0x158>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b61      	cmp	r3, #97	; 0x61
 800188a:	f040 8090 	bne.w	80019ae <Get_Reading+0x146>
	{
		if (data_arr[1] == '-')
 800188e:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <Get_Reading+0x158>)
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	2b2d      	cmp	r3, #45	; 0x2d
 8001894:	d14a      	bne.n	800192c <Get_Reading+0xc4>
		{
			for(u8 i = 2 ; i<Rx_arrlength ; i++)
 8001896:	2302      	movs	r3, #2
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	e038      	b.n	800190e <Get_Reading+0xa6>
			{
				Rx_mpu = Rx_mpu + (data_arr[i]-48)*pow(10,Rx_arrlength-1-i);
 800189c:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <Get_Reading+0x160>)
 800189e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fdb6 	bl	8000414 <__aeabi_i2d>
 80018a8:	4604      	mov	r4, r0
 80018aa:	460d      	mov	r5, r1
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4a44      	ldr	r2, [pc, #272]	; (80019c0 <Get_Reading+0x158>)
 80018b0:	5cd3      	ldrb	r3, [r2, r3]
 80018b2:	3b30      	subs	r3, #48	; 0x30
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fdad 	bl	8000414 <__aeabi_i2d>
 80018ba:	4680      	mov	r8, r0
 80018bc:	4689      	mov	r9, r1
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <Get_Reading+0x15c>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	1e5a      	subs	r2, r3, #1
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fda3 	bl	8000414 <__aeabi_i2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	f04f 0000 	mov.w	r0, #0
 80018d6:	493d      	ldr	r1, [pc, #244]	; (80019cc <Get_Reading+0x164>)
 80018d8:	f000 fb28 	bl	8001f2c <pow>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4640      	mov	r0, r8
 80018e2:	4649      	mov	r1, r9
 80018e4:	f7fe fe00 	bl	80004e8 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7fe fc44 	bl	800017c <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f8a4 	bl	8000a48 <__aeabi_d2iz>
 8001900:	4603      	mov	r3, r0
 8001902:	b21a      	sxth	r2, r3
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <Get_Reading+0x160>)
 8001906:	801a      	strh	r2, [r3, #0]
			for(u8 i = 2 ; i<Rx_arrlength ; i++)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	3301      	adds	r3, #1
 800190c:	71fb      	strb	r3, [r7, #7]
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <Get_Reading+0x15c>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	429a      	cmp	r2, r3
 8001916:	d3c1      	bcc.n	800189c <Get_Reading+0x34>
			}
			Rx_mpu = Rx_mpu*-1;
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <Get_Reading+0x160>)
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	b29b      	uxth	r3, r3
 8001920:	425b      	negs	r3, r3
 8001922:	b29b      	uxth	r3, r3
 8001924:	b21a      	sxth	r2, r3
 8001926:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <Get_Reading+0x160>)
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	e040      	b.n	80019ae <Get_Reading+0x146>

		}
		else
		{
			for(u8 i = 1 ; i<Rx_arrlength ; i++)
 800192c:	2301      	movs	r3, #1
 800192e:	71bb      	strb	r3, [r7, #6]
 8001930:	e038      	b.n	80019a4 <Get_Reading+0x13c>
			{
				Rx_mpu = Rx_mpu + (data_arr[i]-48)*pow(10,Rx_arrlength-1-i);
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <Get_Reading+0x160>)
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fd6b 	bl	8000414 <__aeabi_i2d>
 800193e:	4604      	mov	r4, r0
 8001940:	460d      	mov	r5, r1
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <Get_Reading+0x158>)
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	3b30      	subs	r3, #48	; 0x30
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fd62 	bl	8000414 <__aeabi_i2d>
 8001950:	4680      	mov	r8, r0
 8001952:	4689      	mov	r9, r1
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <Get_Reading+0x15c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	1e5a      	subs	r2, r3, #1
 800195a:	79bb      	ldrb	r3, [r7, #6]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fd58 	bl	8000414 <__aeabi_i2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	f04f 0000 	mov.w	r0, #0
 800196c:	4917      	ldr	r1, [pc, #92]	; (80019cc <Get_Reading+0x164>)
 800196e:	f000 fadd 	bl	8001f2c <pow>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4640      	mov	r0, r8
 8001978:	4649      	mov	r1, r9
 800197a:	f7fe fdb5 	bl	80004e8 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4620      	mov	r0, r4
 8001984:	4629      	mov	r1, r5
 8001986:	f7fe fbf9 	bl	800017c <__adddf3>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f7ff f859 	bl	8000a48 <__aeabi_d2iz>
 8001996:	4603      	mov	r3, r0
 8001998:	b21a      	sxth	r2, r3
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <Get_Reading+0x160>)
 800199c:	801a      	strh	r2, [r3, #0]
			for(u8 i = 1 ; i<Rx_arrlength ; i++)
 800199e:	79bb      	ldrb	r3, [r7, #6]
 80019a0:	3301      	adds	r3, #1
 80019a2:	71bb      	strb	r3, [r7, #6]
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <Get_Reading+0x15c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	79ba      	ldrb	r2, [r7, #6]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d3c1      	bcc.n	8001932 <Get_Reading+0xca>
			}
		}
	}
		return Rx_mpu ;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <Get_Reading+0x160>)
 80019b0:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019be:	bf00      	nop
 80019c0:	200000e4 	.word	0x200000e4
 80019c4:	200000e0 	.word	0x200000e0
 80019c8:	200000fa 	.word	0x200000fa
 80019cc:	40240000 	.word	0x40240000

080019d0 <RotateRight>:




void RotateRight()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

	s16 Reading = 0 ;
 80019d6:	2300      	movs	r3, #0
 80019d8:	807b      	strh	r3, [r7, #2]
	s16 Final_Value = 0 ;
 80019da:	2300      	movs	r3, #0
 80019dc:	80fb      	strh	r3, [r7, #6]
	s16 error = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	80bb      	strh	r3, [r7, #4]


	Reading = Get_Reading() ;
 80019e2:	f7ff ff41 	bl	8001868 <Get_Reading>
 80019e6:	4603      	mov	r3, r0
 80019e8:	807b      	strh	r3, [r7, #2]
//	MUSART2_voidSendNumbers(Reading);
//	MUSART2_voidSendString((u8*)"/r/n");

	Final_Value = Reading + 90 ;
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	335a      	adds	r3, #90	; 0x5a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	80fb      	strh	r3, [r7, #6]


	if (Final_Value > 180 )
 80019f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f6:	2bb4      	cmp	r3, #180	; 0xb4
 80019f8:	dd04      	ble.n	8001a04 <RotateRight+0x34>
	{
		Final_Value = Final_Value - 360 ;
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	80fb      	strh	r3, [r7, #6]
	}

	error = Final_Value - Reading ;
 8001a04:	88fa      	ldrh	r2, [r7, #6]
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	80bb      	strh	r3, [r7, #4]

	while (1)
	{
		MGPIO_VoidSetPinValue(GPIOA, 0, HIGH);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2100      	movs	r1, #0
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff f9ec 	bl	8000df0 <MGPIO_VoidSetPinValue>
		MGPIO_VoidSetPinValue(GPIOA, 5, LOW);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2105      	movs	r1, #5
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff f9e7 	bl	8000df0 <MGPIO_VoidSetPinValue>

		MTIM2_voidOutputPWM_C2(30);
 8001a22:	201e      	movs	r0, #30
 8001a24:	f7ff fdf2 	bl	800160c <MTIM2_voidOutputPWM_C2>
		MTIM3_voidOutputPWM(30);
 8001a28:	201e      	movs	r0, #30
 8001a2a:	f7ff fe4d 	bl	80016c8 <MTIM3_voidOutputPWM>

	  if (error < -180 )
 8001a2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a32:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001a36:	da04      	bge.n	8001a42 <RotateRight+0x72>
	  {
		  error += 360 ;
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	80bb      	strh	r3, [r7, #4]

	  }

	if ( error <= 0 )
 8001a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	dc0c      	bgt.n	8001a64 <RotateRight+0x94>
	{

		MTIM3_voidOutputPWM(0);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fe3c 	bl	80016c8 <MTIM3_voidOutputPWM>
		MTIM2_voidOutputPWM_C2(0);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fddb 	bl	800160c <MTIM2_voidOutputPWM_C2>

		HENCODER_s32GetZeroCounts(PIN8);
 8001a56:	2008      	movs	r0, #8
 8001a58:	f7ff fc72 	bl	8001340 <HENCODER_s32GetZeroCounts>
		HENCODER_s32GetZeroCounts(PIN10);
 8001a5c:	200a      	movs	r0, #10
 8001a5e:	f7ff fc6f 	bl	8001340 <HENCODER_s32GetZeroCounts>

//		MUSART2_voidSendString((u8*)"s2");
//		MUSART2_voidSendString((u8*)"/r/n");
		break ;
 8001a62:	e009      	b.n	8001a78 <RotateRight+0xa8>
	}
	Reading = Get_Reading() ;
 8001a64:	f7ff ff00 	bl	8001868 <Get_Reading>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	807b      	strh	r3, [r7, #2]
	error = Final_Value - Reading ;
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	80bb      	strh	r3, [r7, #4]
		MGPIO_VoidSetPinValue(GPIOA, 0, HIGH);
 8001a76:	e7ca      	b.n	8001a0e <RotateRight+0x3e>
//	MUSART2_voidSendString((u8*)"/r/n");

    }


}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <RotateLeft>:



void RotateLeft()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0

	s16 Reading = 0 ;
 8001a86:	2300      	movs	r3, #0
 8001a88:	807b      	strh	r3, [r7, #2]
	s16 Final_Value = 0 ;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	80fb      	strh	r3, [r7, #6]
	s16 error = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	80bb      	strh	r3, [r7, #4]


	Reading = Get_Reading() ;
 8001a92:	f7ff fee9 	bl	8001868 <Get_Reading>
 8001a96:	4603      	mov	r3, r0
 8001a98:	807b      	strh	r3, [r7, #2]
//	MUSART2_voidSendString((u8*)"/r/n");

//	MGPIO_VoidSetPinValue(GPIOA, 0, HIGH);
//	MGPIO_VoidSetPinValue(GPIOA, 5, LOW);

	Final_Value = Reading - 90 ;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	3b5a      	subs	r3, #90	; 0x5a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	80fb      	strh	r3, [r7, #6]


	if (Final_Value < -180 )
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001aaa:	da04      	bge.n	8001ab6 <RotateLeft+0x36>
	{
		Final_Value = Final_Value + 360 ;
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	80fb      	strh	r3, [r7, #6]
	}

	error = Final_Value - Reading ;
 8001ab6:	88fa      	ldrh	r2, [r7, #6]
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	80bb      	strh	r3, [r7, #4]

	while (1)
	{
		MGPIO_VoidSetPinValue(GPIOA, 0, HIGH);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff f993 	bl	8000df0 <MGPIO_VoidSetPinValue>
		MGPIO_VoidSetPinValue(GPIOA, 5, LOW);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2105      	movs	r1, #5
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff f98e 	bl	8000df0 <MGPIO_VoidSetPinValue>

		MTIM2_voidOutputPWM_C2(30);
 8001ad4:	201e      	movs	r0, #30
 8001ad6:	f7ff fd99 	bl	800160c <MTIM2_voidOutputPWM_C2>
		MTIM3_voidOutputPWM(30);
 8001ada:	201e      	movs	r0, #30
 8001adc:	f7ff fdf4 	bl	80016c8 <MTIM3_voidOutputPWM>

	  if (error  > 180 )
 8001ae0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ae4:	2bb4      	cmp	r3, #180	; 0xb4
 8001ae6:	dd04      	ble.n	8001af2 <RotateLeft+0x72>
	  {
		  error -= 360 ;
 8001ae8:	88bb      	ldrh	r3, [r7, #4]
 8001aea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	80bb      	strh	r3, [r7, #4]

	  }

	if ( error >= 0 )
 8001af2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db0c      	blt.n	8001b14 <RotateLeft+0x94>
	{

		MTIM3_voidOutputPWM(0);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fde4 	bl	80016c8 <MTIM3_voidOutputPWM>
		MTIM2_voidOutputPWM_C2(0);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fd83 	bl	800160c <MTIM2_voidOutputPWM_C2>

		HENCODER_s32GetZeroCounts(PIN8);
 8001b06:	2008      	movs	r0, #8
 8001b08:	f7ff fc1a 	bl	8001340 <HENCODER_s32GetZeroCounts>
		HENCODER_s32GetZeroCounts(PIN10);
 8001b0c:	200a      	movs	r0, #10
 8001b0e:	f7ff fc17 	bl	8001340 <HENCODER_s32GetZeroCounts>

//		MUSART2_voidSendString((u8*)"s2");
//		MUSART2_voidSendString((u8*)"/r/n");
		break ;
 8001b12:	e009      	b.n	8001b28 <RotateLeft+0xa8>
	}
	Reading = Get_Reading() ;
 8001b14:	f7ff fea8 	bl	8001868 <Get_Reading>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	807b      	strh	r3, [r7, #2]
	error = Final_Value - Reading ;
 8001b1c:	88fa      	ldrh	r2, [r7, #6]
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	80bb      	strh	r3, [r7, #4]
		MGPIO_VoidSetPinValue(GPIOA, 0, HIGH);
 8001b26:	e7cb      	b.n	8001ac0 <RotateLeft+0x40>
//	MUSART2_voidSendNumbers(Reading);
//	MUSART2_voidSendString((u8*)"/r/n");
    }


}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <TargetDistance>:



void TargetDistance()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
	u32 target_count = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
	HENCODER_s32GetZeroCounts(PIN8);
 8001b3a:	2008      	movs	r0, #8
 8001b3c:	f7ff fc00 	bl	8001340 <HENCODER_s32GetZeroCounts>
	HENCODER_s32GetZeroCounts(PIN10);
 8001b40:	200a      	movs	r0, #10
 8001b42:	f7ff fbfd 	bl	8001340 <HENCODER_s32GetZeroCounts>
	HENCODER_f32GetZeroDistance();
 8001b46:	f7ff fc17 	bl	8001378 <HENCODER_f32GetZeroDistance>

	target_count = step_distance*10.23;
 8001b4a:	f44f 7333 	mov.w	r3, #716	; 0x2cc
 8001b4e:	607b      	str	r3, [r7, #4]

	while(1)
	{
		MTIM2_voidOutputPWM_C2((u16)Rx_pwm);
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <TargetDistance+0x7c>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fd59 	bl	800160c <MTIM2_voidOutputPWM_C2>
		MTIM3_voidOutputPWM((u16)Rx_pwm);
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <TargetDistance+0x7c>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fdb2 	bl	80016c8 <MTIM3_voidOutputPWM>

//		MUSART2_voidSendNumbers(right_counts);
//		MUSART2_voidSendString((u8*)"\r\n");

		if(abs(right_counts) >= target_count)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <TargetDistance+0x80>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bfb8      	it	lt
 8001b6c:	425b      	neglt	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d8ec      	bhi.n	8001b50 <TargetDistance+0x20>
		{
			HENCODER_s32GetZeroCounts(PIN8);
 8001b76:	2008      	movs	r0, #8
 8001b78:	f7ff fbe2 	bl	8001340 <HENCODER_s32GetZeroCounts>
			HENCODER_s32GetZeroCounts(PIN10);
 8001b7c:	200a      	movs	r0, #10
 8001b7e:	f7ff fbdf 	bl	8001340 <HENCODER_s32GetZeroCounts>

			Rx_pwm = 0;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <TargetDistance+0x7c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	801a      	strh	r2, [r3, #0]
			MTIM3_voidOutputPWM(0);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fd9d 	bl	80016c8 <MTIM3_voidOutputPWM>
			MTIM2_voidOutputPWM_C2(0);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fd3c 	bl	800160c <MTIM2_voidOutputPWM_C2>


			MUSART2_voidSendString((u8*) "s1");
 8001b94:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <TargetDistance+0x84>)
 8001b96:	f7ff fdfb 	bl	8001790 <MUSART2_voidSendString>
			MUSART2_voidSendString((u8*)"\r\n");
 8001b9a:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <TargetDistance+0x88>)
 8001b9c:	f7ff fdf8 	bl	8001790 <MUSART2_voidSendString>
//			MUSART2_voidSendNumbers(reading);
//			MUSART2_voidSendString((u8*)"\r\n");

			break;
 8001ba0:	bf00      	nop
		}
	}
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200000f8 	.word	0x200000f8
 8001bb0:	200000d8 	.word	0x200000d8
 8001bb4:	08002d10 	.word	0x08002d10
 8001bb8:	08002d14 	.word	0x08002d14

08001bbc <main>:
////	MUSART2_voidSendNumbers(reading);
////	MUSART2_voidSendString((u8*)"\r\n");
//}

int main (void)
{
 8001bbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
	/*initialize RCC*/
	RCC_voidInitSysClock();
 8001bc4:	f7ff fc06 	bl	80013d4 <RCC_voidInitSysClock>

	/*initialize peripherals clock - GPIO, AFIO, TIM2, TIM3, ADC1*/
	RCC_voidEnableClock(RCC_APB2 , 2);
 8001bc8:	2102      	movs	r1, #2
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f7ff fc14 	bl	80013f8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 3);
 8001bd0:	2103      	movs	r1, #3
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f7ff fc10 	bl	80013f8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 0);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f7ff fc0c 	bl	80013f8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB1 , 0);
 8001be0:	2100      	movs	r1, #0
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff fc08 	bl	80013f8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB1 , 1);
 8001be8:	2101      	movs	r1, #1
 8001bea:	2001      	movs	r0, #1
 8001bec:	f7ff fc04 	bl	80013f8 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 9);
 8001bf0:	2109      	movs	r1, #9
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f7ff fc00 	bl	80013f8 <RCC_voidEnableClock>

	/* cytron 1 */
	//MGPIO_VoidSetPinDirection(GPIOA,PIN3,OUTPUT_2MHZ_AFPP);
	//MGPIO_VoidSetPinDirection(GPIOA,PIN2,OUTPUT_2MHZ_PP);
	MGPIO_VoidSetPinDirection(GPIOA,PIN1,OUTPUT_2MHZ_AFPP);		//pwm
 8001bf8:	220a      	movs	r2, #10
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff f821 	bl	8000c44 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN0,OUTPUT_2MHZ_PP);       //direction
 8001c02:	2202      	movs	r2, #2
 8001c04:	2100      	movs	r1, #0
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff f81c 	bl	8000c44 <MGPIO_VoidSetPinDirection>

	/* cytron 2 */
	MGPIO_VoidSetPinDirection(GPIOA,PIN6,OUTPUT_2MHZ_AFPP);		//pwm
 8001c0c:	220a      	movs	r2, #10
 8001c0e:	2106      	movs	r1, #6
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff f817 	bl	8000c44 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN5,OUTPUT_2MHZ_PP);		//direction
 8001c16:	2202      	movs	r2, #2
 8001c18:	2105      	movs	r1, #5
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff f812 	bl	8000c44 <MGPIO_VoidSetPinDirection>

	/* Right encoder */
	MGPIO_VoidSetPinDirection(GPIOA,PIN8,INPUT_FLOATING);
 8001c20:	2204      	movs	r2, #4
 8001c22:	2108      	movs	r1, #8
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff f80d 	bl	8000c44 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOA,PIN9,INPUT_FLOATING);
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	2109      	movs	r1, #9
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f7ff f808 	bl	8000c44 <MGPIO_VoidSetPinDirection>

	/* Left encoder */
	MGPIO_VoidSetPinDirection(GPIOB,PIN10,INPUT_FLOATING);
 8001c34:	2204      	movs	r2, #4
 8001c36:	210a      	movs	r1, #10
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7ff f803 	bl	8000c44 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(GPIOB,PIN11,INPUT_FLOATING);
 8001c3e:	2204      	movs	r2, #4
 8001c40:	210b      	movs	r1, #11
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7fe fffe 	bl	8000c44 <MGPIO_VoidSetPinDirection>

	/* voltage sensor */
	MGPIO_VoidSetPinDirection(GPIOB, PIN0, INPUT_ANALOG);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7fe fff9 	bl	8000c44 <MGPIO_VoidSetPinDirection>

	/* AFIO for EXTI (Encoders) */
	MAFIO_voidSetEXTIConfiguration(LINE8 , AFIOA);
 8001c52:	2100      	movs	r1, #0
 8001c54:	2008      	movs	r0, #8
 8001c56:	f7fe ffa1 	bl	8000b9c <MAFIO_voidSetEXTIConfiguration>
	MAFIO_voidSetEXTIConfiguration(LINE10 , AFIOB);
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	200a      	movs	r0, #10
 8001c5e:	f7fe ff9d 	bl	8000b9c <MAFIO_voidSetEXTIConfiguration>

	/* call back for EXTI8,10*/
	EXTI_voidSetCallBack(LeftEncoderGetReading,LINE8);
 8001c62:	2108      	movs	r1, #8
 8001c64:	487f      	ldr	r0, [pc, #508]	; (8001e64 <main+0x2a8>)
 8001c66:	f7ff f9c3 	bl	8000ff0 <EXTI_voidSetCallBack>
	EXTI_voidSetCallBack(RightEncoderGetReading,LINE10);
 8001c6a:	210a      	movs	r1, #10
 8001c6c:	487e      	ldr	r0, [pc, #504]	; (8001e68 <main+0x2ac>)
 8001c6e:	f7ff f9bf 	bl	8000ff0 <EXTI_voidSetCallBack>

	/* EXTI initialization */
	MEXTI_voidInit();
 8001c72:	f7ff f95b 	bl	8000f2c <MEXTI_voidInit>
	MEXTI_voidSetSignalLatch(LINE8,RISING);
 8001c76:	2100      	movs	r1, #0
 8001c78:	2008      	movs	r0, #8
 8001c7a:	f7ff f96b 	bl	8000f54 <MEXTI_voidSetSignalLatch>
	MEXTI_voidSetSignalLatch(LINE10,RISING);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	200a      	movs	r0, #10
 8001c82:	f7ff f967 	bl	8000f54 <MEXTI_voidSetSignalLatch>

	/* ADC initialization & conversion */
	MADC1_voidInit();
 8001c86:	f7fe ff27 	bl	8000ad8 <MADC1_voidInit>
	MADC1_voidStartConversion(8,1);
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2008      	movs	r0, #8
 8001c8e:	f7fe ff3b 	bl	8000b08 <MADC1_voidStartConversion>

	/*Enable EXTI from NVIC*/
	MNVIC_voidEnableInterrupt(23);
 8001c92:	2017      	movs	r0, #23
 8001c94:	f7ff fb7c 	bl	8001390 <MNVIC_voidEnableInterrupt>
	MNVIC_voidEnableInterrupt(40);
 8001c98:	2028      	movs	r0, #40	; 0x28
 8001c9a:	f7ff fb79 	bl	8001390 <MNVIC_voidEnableInterrupt>

	/* Initialization */
	MSTK_voidInit();
 8001c9e:	f7ff fbed 	bl	800147c <MSTK_voidInit>
	MTIM2_voidInitC2();
 8001ca2:	f7ff fc4d 	bl	8001540 <MTIM2_voidInitC2>
	MTIM3_voidInit();
 8001ca6:	f7ff fcc1 	bl	800162c <MTIM3_voidInit>
	MUSART2_voidInit();
 8001caa:	f7ff fd1d 	bl	80016e8 <MUSART2_voidInit>
//	MTIM2_voidOutputPWM_C2(0);
//	MTIM3_voidOutputPWM(0);

	while(1)
	{
		Rx_arrlength = MUSART2_u8ReceiveDataBlock(data_arr);
 8001cae:	486f      	ldr	r0, [pc, #444]	; (8001e6c <main+0x2b0>)
 8001cb0:	f7ff fd9c 	bl	80017ec <MUSART2_u8ReceiveDataBlock>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b6d      	ldr	r3, [pc, #436]	; (8001e70 <main+0x2b4>)
 8001cba:	701a      	strb	r2, [r3, #0]

		if (data_arr[0] == 'y')
 8001cbc:	4b6b      	ldr	r3, [pc, #428]	; (8001e6c <main+0x2b0>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b79      	cmp	r3, #121	; 0x79
 8001cc2:	f040 80a7 	bne.w	8001e14 <main+0x258>
		{
			MTIM2_voidOutputPWM_C2(0);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff fca0 	bl	800160c <MTIM2_voidOutputPWM_C2>
			MTIM3_voidOutputPWM(0);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f7ff fcfb 	bl	80016c8 <MTIM3_voidOutputPWM>

			if (data_arr[1] == '-')
 8001cd2:	4b66      	ldr	r3, [pc, #408]	; (8001e6c <main+0x2b0>)
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	2b2d      	cmp	r3, #45	; 0x2d
 8001cd8:	d14c      	bne.n	8001d74 <main+0x1b8>
			{
				MGPIO_VoidSetPinValue(GPIOA, 0, LOW);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7ff f886 	bl	8000df0 <MGPIO_VoidSetPinValue>
				MGPIO_VoidSetPinValue(GPIOA, 5, LOW);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2105      	movs	r1, #5
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff f881 	bl	8000df0 <MGPIO_VoidSetPinValue>

				for(u8 i = 2 ; i<Rx_arrlength ; i++)
 8001cee:	2302      	movs	r3, #2
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	e037      	b.n	8001d64 <main+0x1a8>
				{
					Rx_pwm = Rx_pwm + (data_arr[i]-48)*pow(10,Rx_arrlength-1-i);
 8001cf4:	4b5f      	ldr	r3, [pc, #380]	; (8001e74 <main+0x2b8>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fb8b 	bl	8000414 <__aeabi_i2d>
 8001cfe:	4604      	mov	r4, r0
 8001d00:	460d      	mov	r5, r1
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	4a59      	ldr	r2, [pc, #356]	; (8001e6c <main+0x2b0>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	3b30      	subs	r3, #48	; 0x30
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fb82 	bl	8000414 <__aeabi_i2d>
 8001d10:	4680      	mov	r8, r0
 8001d12:	4689      	mov	r9, r1
 8001d14:	4b56      	ldr	r3, [pc, #344]	; (8001e70 <main+0x2b4>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fb78 	bl	8000414 <__aeabi_i2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	f04f 0000 	mov.w	r0, #0
 8001d2c:	4952      	ldr	r1, [pc, #328]	; (8001e78 <main+0x2bc>)
 8001d2e:	f000 f8fd 	bl	8001f2c <pow>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4640      	mov	r0, r8
 8001d38:	4649      	mov	r1, r9
 8001d3a:	f7fe fbd5 	bl	80004e8 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4620      	mov	r0, r4
 8001d44:	4629      	mov	r1, r5
 8001d46:	f7fe fa19 	bl	800017c <__adddf3>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f7fe fea1 	bl	8000a98 <__aeabi_d2uiz>
 8001d56:	4603      	mov	r3, r0
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <main+0x2b8>)
 8001d5c:	801a      	strh	r2, [r3, #0]
				for(u8 i = 2 ; i<Rx_arrlength ; i++)
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	3301      	adds	r3, #1
 8001d62:	71fb      	strb	r3, [r7, #7]
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <main+0x2b4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d3c2      	bcc.n	8001cf4 <main+0x138>
				}

				TargetDistance();
 8001d6e:	f7ff fedf 	bl	8001b30 <TargetDistance>
 8001d72:	e79c      	b.n	8001cae <main+0xf2>
				//Rx_pwm = 0;
			}
			else
			{
				MGPIO_VoidSetPinValue(GPIOA, 0, HIGH);
 8001d74:	2201      	movs	r2, #1
 8001d76:	2100      	movs	r1, #0
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff f839 	bl	8000df0 <MGPIO_VoidSetPinValue>
				MGPIO_VoidSetPinValue(GPIOA, 5, HIGH);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2105      	movs	r1, #5
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff f834 	bl	8000df0 <MGPIO_VoidSetPinValue>

				for(u8 i = 1 ; i<Rx_arrlength ; i++)
 8001d88:	2301      	movs	r3, #1
 8001d8a:	71bb      	strb	r3, [r7, #6]
 8001d8c:	e037      	b.n	8001dfe <main+0x242>
				{
					Rx_pwm = Rx_pwm + (data_arr[i]-48)*pow(10,Rx_arrlength-1-i);
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <main+0x2b8>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fb3e 	bl	8000414 <__aeabi_i2d>
 8001d98:	4604      	mov	r4, r0
 8001d9a:	460d      	mov	r5, r1
 8001d9c:	79bb      	ldrb	r3, [r7, #6]
 8001d9e:	4a33      	ldr	r2, [pc, #204]	; (8001e6c <main+0x2b0>)
 8001da0:	5cd3      	ldrb	r3, [r2, r3]
 8001da2:	3b30      	subs	r3, #48	; 0x30
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fb35 	bl	8000414 <__aeabi_i2d>
 8001daa:	4680      	mov	r8, r0
 8001dac:	4689      	mov	r9, r1
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <main+0x2b4>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	1e5a      	subs	r2, r3, #1
 8001db4:	79bb      	ldrb	r3, [r7, #6]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fb2b 	bl	8000414 <__aeabi_i2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	f04f 0000 	mov.w	r0, #0
 8001dc6:	492c      	ldr	r1, [pc, #176]	; (8001e78 <main+0x2bc>)
 8001dc8:	f000 f8b0 	bl	8001f2c <pow>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	f7fe fb88 	bl	80004e8 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe f9cc 	bl	800017c <__adddf3>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fe54 	bl	8000a98 <__aeabi_d2uiz>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <main+0x2b8>)
 8001df6:	801a      	strh	r2, [r3, #0]
				for(u8 i = 1 ; i<Rx_arrlength ; i++)
 8001df8:	79bb      	ldrb	r3, [r7, #6]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	71bb      	strb	r3, [r7, #6]
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <main+0x2b4>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	79ba      	ldrb	r2, [r7, #6]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d3c2      	bcc.n	8001d8e <main+0x1d2>
				}

				TargetDistance(Rx_pwm);
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <main+0x2b8>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fe8f 	bl	8001b30 <TargetDistance>
 8001e12:	e74c      	b.n	8001cae <main+0xf2>
				//Rx_pwm = 0;
			}

		}

		else if(data_arr[0] == 'm')
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <main+0x2b0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b6d      	cmp	r3, #109	; 0x6d
 8001e1a:	d11b      	bne.n	8001e54 <main+0x298>
		{
			MTIM2_voidOutputPWM_C2(0);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff fbf5 	bl	800160c <MTIM2_voidOutputPWM_C2>
			MTIM3_voidOutputPWM(0);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff fc50 	bl	80016c8 <MTIM3_voidOutputPWM>

			if(data_arr[1] == '-')
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <main+0x2b0>)
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	2b2d      	cmp	r3, #45	; 0x2d
 8001e2e:	d108      	bne.n	8001e42 <main+0x286>
			{
				/* rotate right */
				RotateRight();
 8001e30:	f7ff fdce 	bl	80019d0 <RotateRight>

				MUSART2_voidSendString((u8*)"s2");
 8001e34:	4811      	ldr	r0, [pc, #68]	; (8001e7c <main+0x2c0>)
 8001e36:	f7ff fcab 	bl	8001790 <MUSART2_voidSendString>
				MUSART2_voidSendString((u8*)"/r/n");
 8001e3a:	4811      	ldr	r0, [pc, #68]	; (8001e80 <main+0x2c4>)
 8001e3c:	f7ff fca8 	bl	8001790 <MUSART2_voidSendString>
 8001e40:	e735      	b.n	8001cae <main+0xf2>
			{
				/* rotate left */
//				MUSART2_voidSendString((u8*)"high");
//				MUSART2_voidSendString((u8*)"/r/n");

				RotateLeft();
 8001e42:	f7ff fe1d 	bl	8001a80 <RotateLeft>

				MUSART2_voidSendString((u8*)"s2");
 8001e46:	480d      	ldr	r0, [pc, #52]	; (8001e7c <main+0x2c0>)
 8001e48:	f7ff fca2 	bl	8001790 <MUSART2_voidSendString>
				MUSART2_voidSendString((u8*)"/r/n");
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <main+0x2c4>)
 8001e4e:	f7ff fc9f 	bl	8001790 <MUSART2_voidSendString>
 8001e52:	e72c      	b.n	8001cae <main+0xf2>
			}
		}

		else
		{
			MTIM3_voidOutputPWM(0);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fc37 	bl	80016c8 <MTIM3_voidOutputPWM>
			MTIM2_voidOutputPWM_C2(0);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff fbd6 	bl	800160c <MTIM2_voidOutputPWM_C2>
		Rx_arrlength = MUSART2_u8ReceiveDataBlock(data_arr);
 8001e60:	e725      	b.n	8001cae <main+0xf2>
 8001e62:	bf00      	nop
 8001e64:	08001831 	.word	0x08001831
 8001e68:	0800184d 	.word	0x0800184d
 8001e6c:	200000e4 	.word	0x200000e4
 8001e70:	200000e0 	.word	0x200000e0
 8001e74:	200000f8 	.word	0x200000f8
 8001e78:	40240000 	.word	0x40240000
 8001e7c:	08002d18 	.word	0x08002d18
 8001e80:	08002d1c 	.word	0x08002d1c

08001e84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e88:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e8c:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e8e:	490d      	ldr	r1, [pc, #52]	; (8001ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e90:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <LoopForever+0xe>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea4:	4c0a      	ldr	r4, [pc, #40]	; (8001ed0 <LoopForever+0x16>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eb2:	f000 f817 	bl	8001ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eb6:	f7ff fe81 	bl	8001bbc <main>

08001eba <LoopForever>:

LoopForever:
  b LoopForever
 8001eba:	e7fe      	b.n	8001eba <LoopForever>
  ldr   r0, =_estack
 8001ebc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001ec8:	08002d60 	.word	0x08002d60
  ldr r2, =_sbss
 8001ecc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001ed0:	200000fc 	.word	0x200000fc

08001ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC1_2_IRQHandler>
	...

08001ed8 <__errno>:
 8001ed8:	4b01      	ldr	r3, [pc, #4]	; (8001ee0 <__errno+0x8>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <__libc_init_array>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	2600      	movs	r6, #0
 8001ee8:	4d0c      	ldr	r5, [pc, #48]	; (8001f1c <__libc_init_array+0x38>)
 8001eea:	4c0d      	ldr	r4, [pc, #52]	; (8001f20 <__libc_init_array+0x3c>)
 8001eec:	1b64      	subs	r4, r4, r5
 8001eee:	10a4      	asrs	r4, r4, #2
 8001ef0:	42a6      	cmp	r6, r4
 8001ef2:	d109      	bne.n	8001f08 <__libc_init_array+0x24>
 8001ef4:	f000 fefe 	bl	8002cf4 <_init>
 8001ef8:	2600      	movs	r6, #0
 8001efa:	4d0a      	ldr	r5, [pc, #40]	; (8001f24 <__libc_init_array+0x40>)
 8001efc:	4c0a      	ldr	r4, [pc, #40]	; (8001f28 <__libc_init_array+0x44>)
 8001efe:	1b64      	subs	r4, r4, r5
 8001f00:	10a4      	asrs	r4, r4, #2
 8001f02:	42a6      	cmp	r6, r4
 8001f04:	d105      	bne.n	8001f12 <__libc_init_array+0x2e>
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f0c:	4798      	blx	r3
 8001f0e:	3601      	adds	r6, #1
 8001f10:	e7ee      	b.n	8001ef0 <__libc_init_array+0xc>
 8001f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f16:	4798      	blx	r3
 8001f18:	3601      	adds	r6, #1
 8001f1a:	e7f2      	b.n	8001f02 <__libc_init_array+0x1e>
 8001f1c:	08002d58 	.word	0x08002d58
 8001f20:	08002d58 	.word	0x08002d58
 8001f24:	08002d58 	.word	0x08002d58
 8001f28:	08002d5c 	.word	0x08002d5c

08001f2c <pow>:
 8001f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f30:	4614      	mov	r4, r2
 8001f32:	461d      	mov	r5, r3
 8001f34:	4680      	mov	r8, r0
 8001f36:	4689      	mov	r9, r1
 8001f38:	f000 f862 	bl	8002000 <__ieee754_pow>
 8001f3c:	4622      	mov	r2, r4
 8001f3e:	4606      	mov	r6, r0
 8001f40:	460f      	mov	r7, r1
 8001f42:	462b      	mov	r3, r5
 8001f44:	4620      	mov	r0, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7fe fd68 	bl	8000a1c <__aeabi_dcmpun>
 8001f4c:	bbc8      	cbnz	r0, 8001fc2 <pow+0x96>
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2300      	movs	r3, #0
 8001f52:	4640      	mov	r0, r8
 8001f54:	4649      	mov	r1, r9
 8001f56:	f7fe fd2f 	bl	80009b8 <__aeabi_dcmpeq>
 8001f5a:	b1b8      	cbz	r0, 8001f8c <pow+0x60>
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2300      	movs	r3, #0
 8001f60:	4620      	mov	r0, r4
 8001f62:	4629      	mov	r1, r5
 8001f64:	f7fe fd28 	bl	80009b8 <__aeabi_dcmpeq>
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d141      	bne.n	8001ff0 <pow+0xc4>
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f000 fe3b 	bl	8002bea <finite>
 8001f74:	b328      	cbz	r0, 8001fc2 <pow+0x96>
 8001f76:	2200      	movs	r2, #0
 8001f78:	2300      	movs	r3, #0
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe fd25 	bl	80009cc <__aeabi_dcmplt>
 8001f82:	b1f0      	cbz	r0, 8001fc2 <pow+0x96>
 8001f84:	f7ff ffa8 	bl	8001ed8 <__errno>
 8001f88:	2322      	movs	r3, #34	; 0x22
 8001f8a:	e019      	b.n	8001fc0 <pow+0x94>
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	4639      	mov	r1, r7
 8001f90:	f000 fe2b 	bl	8002bea <finite>
 8001f94:	b9c8      	cbnz	r0, 8001fca <pow+0x9e>
 8001f96:	4640      	mov	r0, r8
 8001f98:	4649      	mov	r1, r9
 8001f9a:	f000 fe26 	bl	8002bea <finite>
 8001f9e:	b1a0      	cbz	r0, 8001fca <pow+0x9e>
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	f000 fe21 	bl	8002bea <finite>
 8001fa8:	b178      	cbz	r0, 8001fca <pow+0x9e>
 8001faa:	4632      	mov	r2, r6
 8001fac:	463b      	mov	r3, r7
 8001fae:	4630      	mov	r0, r6
 8001fb0:	4639      	mov	r1, r7
 8001fb2:	f7fe fd33 	bl	8000a1c <__aeabi_dcmpun>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d0e4      	beq.n	8001f84 <pow+0x58>
 8001fba:	f7ff ff8d 	bl	8001ed8 <__errno>
 8001fbe:	2321      	movs	r3, #33	; 0x21
 8001fc0:	6003      	str	r3, [r0, #0]
 8001fc2:	4630      	mov	r0, r6
 8001fc4:	4639      	mov	r1, r7
 8001fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2300      	movs	r3, #0
 8001fce:	4630      	mov	r0, r6
 8001fd0:	4639      	mov	r1, r7
 8001fd2:	f7fe fcf1 	bl	80009b8 <__aeabi_dcmpeq>
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	d0f3      	beq.n	8001fc2 <pow+0x96>
 8001fda:	4640      	mov	r0, r8
 8001fdc:	4649      	mov	r1, r9
 8001fde:	f000 fe04 	bl	8002bea <finite>
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	d0ed      	beq.n	8001fc2 <pow+0x96>
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	f000 fdfe 	bl	8002bea <finite>
 8001fee:	e7c8      	b.n	8001f82 <pow+0x56>
 8001ff0:	2600      	movs	r6, #0
 8001ff2:	4f01      	ldr	r7, [pc, #4]	; (8001ff8 <pow+0xcc>)
 8001ff4:	e7e5      	b.n	8001fc2 <pow+0x96>
 8001ff6:	bf00      	nop
 8001ff8:	3ff00000 	.word	0x3ff00000
 8001ffc:	00000000 	.word	0x00000000

08002000 <__ieee754_pow>:
 8002000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002004:	b093      	sub	sp, #76	; 0x4c
 8002006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800200a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800200e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8002012:	4689      	mov	r9, r1
 8002014:	ea56 0102 	orrs.w	r1, r6, r2
 8002018:	4680      	mov	r8, r0
 800201a:	d111      	bne.n	8002040 <__ieee754_pow+0x40>
 800201c:	1803      	adds	r3, r0, r0
 800201e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8002022:	4152      	adcs	r2, r2
 8002024:	4299      	cmp	r1, r3
 8002026:	4b82      	ldr	r3, [pc, #520]	; (8002230 <__ieee754_pow+0x230>)
 8002028:	4193      	sbcs	r3, r2
 800202a:	f080 84b9 	bcs.w	80029a0 <__ieee754_pow+0x9a0>
 800202e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002032:	4640      	mov	r0, r8
 8002034:	4649      	mov	r1, r9
 8002036:	f7fe f8a1 	bl	800017c <__adddf3>
 800203a:	4683      	mov	fp, r0
 800203c:	468c      	mov	ip, r1
 800203e:	e06f      	b.n	8002120 <__ieee754_pow+0x120>
 8002040:	4b7c      	ldr	r3, [pc, #496]	; (8002234 <__ieee754_pow+0x234>)
 8002042:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8002046:	429c      	cmp	r4, r3
 8002048:	464d      	mov	r5, r9
 800204a:	4682      	mov	sl, r0
 800204c:	dc06      	bgt.n	800205c <__ieee754_pow+0x5c>
 800204e:	d101      	bne.n	8002054 <__ieee754_pow+0x54>
 8002050:	2800      	cmp	r0, #0
 8002052:	d1ec      	bne.n	800202e <__ieee754_pow+0x2e>
 8002054:	429e      	cmp	r6, r3
 8002056:	dc01      	bgt.n	800205c <__ieee754_pow+0x5c>
 8002058:	d10f      	bne.n	800207a <__ieee754_pow+0x7a>
 800205a:	b172      	cbz	r2, 800207a <__ieee754_pow+0x7a>
 800205c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002060:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002064:	ea55 050a 	orrs.w	r5, r5, sl
 8002068:	d1e1      	bne.n	800202e <__ieee754_pow+0x2e>
 800206a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800206e:	18db      	adds	r3, r3, r3
 8002070:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002074:	4152      	adcs	r2, r2
 8002076:	429d      	cmp	r5, r3
 8002078:	e7d5      	b.n	8002026 <__ieee754_pow+0x26>
 800207a:	2d00      	cmp	r5, #0
 800207c:	da39      	bge.n	80020f2 <__ieee754_pow+0xf2>
 800207e:	4b6e      	ldr	r3, [pc, #440]	; (8002238 <__ieee754_pow+0x238>)
 8002080:	429e      	cmp	r6, r3
 8002082:	dc52      	bgt.n	800212a <__ieee754_pow+0x12a>
 8002084:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002088:	429e      	cmp	r6, r3
 800208a:	f340 849c 	ble.w	80029c6 <__ieee754_pow+0x9c6>
 800208e:	1533      	asrs	r3, r6, #20
 8002090:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002094:	2b14      	cmp	r3, #20
 8002096:	dd0f      	ble.n	80020b8 <__ieee754_pow+0xb8>
 8002098:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800209c:	fa22 f103 	lsr.w	r1, r2, r3
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	4293      	cmp	r3, r2
 80020a6:	f040 848e 	bne.w	80029c6 <__ieee754_pow+0x9c6>
 80020aa:	f001 0101 	and.w	r1, r1, #1
 80020ae:	f1c1 0302 	rsb	r3, r1, #2
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	b182      	cbz	r2, 80020d8 <__ieee754_pow+0xd8>
 80020b6:	e05d      	b.n	8002174 <__ieee754_pow+0x174>
 80020b8:	2a00      	cmp	r2, #0
 80020ba:	d159      	bne.n	8002170 <__ieee754_pow+0x170>
 80020bc:	f1c3 0314 	rsb	r3, r3, #20
 80020c0:	fa46 f103 	asr.w	r1, r6, r3
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	f040 8479 	bne.w	80029c0 <__ieee754_pow+0x9c0>
 80020ce:	f001 0101 	and.w	r1, r1, #1
 80020d2:	f1c1 0302 	rsb	r3, r1, #2
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <__ieee754_pow+0x23c>)
 80020da:	429e      	cmp	r6, r3
 80020dc:	d132      	bne.n	8002144 <__ieee754_pow+0x144>
 80020de:	2f00      	cmp	r7, #0
 80020e0:	f280 846a 	bge.w	80029b8 <__ieee754_pow+0x9b8>
 80020e4:	4642      	mov	r2, r8
 80020e6:	464b      	mov	r3, r9
 80020e8:	2000      	movs	r0, #0
 80020ea:	4954      	ldr	r1, [pc, #336]	; (800223c <__ieee754_pow+0x23c>)
 80020ec:	f7fe fb26 	bl	800073c <__aeabi_ddiv>
 80020f0:	e7a3      	b.n	800203a <__ieee754_pow+0x3a>
 80020f2:	2300      	movs	r3, #0
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2a00      	cmp	r2, #0
 80020f8:	d13c      	bne.n	8002174 <__ieee754_pow+0x174>
 80020fa:	4b4e      	ldr	r3, [pc, #312]	; (8002234 <__ieee754_pow+0x234>)
 80020fc:	429e      	cmp	r6, r3
 80020fe:	d1eb      	bne.n	80020d8 <__ieee754_pow+0xd8>
 8002100:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002104:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002108:	ea53 030a 	orrs.w	r3, r3, sl
 800210c:	f000 8448 	beq.w	80029a0 <__ieee754_pow+0x9a0>
 8002110:	4b4b      	ldr	r3, [pc, #300]	; (8002240 <__ieee754_pow+0x240>)
 8002112:	429c      	cmp	r4, r3
 8002114:	dd0b      	ble.n	800212e <__ieee754_pow+0x12e>
 8002116:	2f00      	cmp	r7, #0
 8002118:	f2c0 8448 	blt.w	80029ac <__ieee754_pow+0x9ac>
 800211c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8002120:	4658      	mov	r0, fp
 8002122:	4661      	mov	r1, ip
 8002124:	b013      	add	sp, #76	; 0x4c
 8002126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800212a:	2302      	movs	r3, #2
 800212c:	e7e2      	b.n	80020f4 <__ieee754_pow+0xf4>
 800212e:	2f00      	cmp	r7, #0
 8002130:	f04f 0b00 	mov.w	fp, #0
 8002134:	f04f 0c00 	mov.w	ip, #0
 8002138:	daf2      	bge.n	8002120 <__ieee754_pow+0x120>
 800213a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800213e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002142:	e7ed      	b.n	8002120 <__ieee754_pow+0x120>
 8002144:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002148:	d106      	bne.n	8002158 <__ieee754_pow+0x158>
 800214a:	4642      	mov	r2, r8
 800214c:	464b      	mov	r3, r9
 800214e:	4640      	mov	r0, r8
 8002150:	4649      	mov	r1, r9
 8002152:	f7fe f9c9 	bl	80004e8 <__aeabi_dmul>
 8002156:	e770      	b.n	800203a <__ieee754_pow+0x3a>
 8002158:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <__ieee754_pow+0x244>)
 800215a:	429f      	cmp	r7, r3
 800215c:	d10a      	bne.n	8002174 <__ieee754_pow+0x174>
 800215e:	2d00      	cmp	r5, #0
 8002160:	db08      	blt.n	8002174 <__ieee754_pow+0x174>
 8002162:	4640      	mov	r0, r8
 8002164:	4649      	mov	r1, r9
 8002166:	b013      	add	sp, #76	; 0x4c
 8002168:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800216c:	f000 bc5e 	b.w	8002a2c <__ieee754_sqrt>
 8002170:	2300      	movs	r3, #0
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4640      	mov	r0, r8
 8002176:	4649      	mov	r1, r9
 8002178:	f000 fd34 	bl	8002be4 <fabs>
 800217c:	4683      	mov	fp, r0
 800217e:	468c      	mov	ip, r1
 8002180:	f1ba 0f00 	cmp.w	sl, #0
 8002184:	d128      	bne.n	80021d8 <__ieee754_pow+0x1d8>
 8002186:	b124      	cbz	r4, 8002192 <__ieee754_pow+0x192>
 8002188:	4b2c      	ldr	r3, [pc, #176]	; (800223c <__ieee754_pow+0x23c>)
 800218a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800218e:	429a      	cmp	r2, r3
 8002190:	d122      	bne.n	80021d8 <__ieee754_pow+0x1d8>
 8002192:	2f00      	cmp	r7, #0
 8002194:	da07      	bge.n	80021a6 <__ieee754_pow+0x1a6>
 8002196:	465a      	mov	r2, fp
 8002198:	4663      	mov	r3, ip
 800219a:	2000      	movs	r0, #0
 800219c:	4927      	ldr	r1, [pc, #156]	; (800223c <__ieee754_pow+0x23c>)
 800219e:	f7fe facd 	bl	800073c <__aeabi_ddiv>
 80021a2:	4683      	mov	fp, r0
 80021a4:	468c      	mov	ip, r1
 80021a6:	2d00      	cmp	r5, #0
 80021a8:	daba      	bge.n	8002120 <__ieee754_pow+0x120>
 80021aa:	9b00      	ldr	r3, [sp, #0]
 80021ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80021b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80021b4:	4323      	orrs	r3, r4
 80021b6:	d108      	bne.n	80021ca <__ieee754_pow+0x1ca>
 80021b8:	465a      	mov	r2, fp
 80021ba:	4663      	mov	r3, ip
 80021bc:	4658      	mov	r0, fp
 80021be:	4661      	mov	r1, ip
 80021c0:	f7fd ffda 	bl	8000178 <__aeabi_dsub>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	e790      	b.n	80020ec <__ieee754_pow+0xec>
 80021ca:	9b00      	ldr	r3, [sp, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d1a7      	bne.n	8002120 <__ieee754_pow+0x120>
 80021d0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80021d4:	469c      	mov	ip, r3
 80021d6:	e7a3      	b.n	8002120 <__ieee754_pow+0x120>
 80021d8:	0feb      	lsrs	r3, r5, #31
 80021da:	3b01      	subs	r3, #1
 80021dc:	930c      	str	r3, [sp, #48]	; 0x30
 80021de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80021e0:	9b00      	ldr	r3, [sp, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	d104      	bne.n	80021f0 <__ieee754_pow+0x1f0>
 80021e6:	4642      	mov	r2, r8
 80021e8:	464b      	mov	r3, r9
 80021ea:	4640      	mov	r0, r8
 80021ec:	4649      	mov	r1, r9
 80021ee:	e7e7      	b.n	80021c0 <__ieee754_pow+0x1c0>
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <__ieee754_pow+0x248>)
 80021f2:	429e      	cmp	r6, r3
 80021f4:	f340 80f6 	ble.w	80023e4 <__ieee754_pow+0x3e4>
 80021f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80021fc:	429e      	cmp	r6, r3
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <__ieee754_pow+0x240>)
 8002200:	dd09      	ble.n	8002216 <__ieee754_pow+0x216>
 8002202:	429c      	cmp	r4, r3
 8002204:	dc0c      	bgt.n	8002220 <__ieee754_pow+0x220>
 8002206:	2f00      	cmp	r7, #0
 8002208:	da0c      	bge.n	8002224 <__ieee754_pow+0x224>
 800220a:	2000      	movs	r0, #0
 800220c:	b013      	add	sp, #76	; 0x4c
 800220e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002212:	f000 bce2 	b.w	8002bda <__math_oflow>
 8002216:	429c      	cmp	r4, r3
 8002218:	dbf5      	blt.n	8002206 <__ieee754_pow+0x206>
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <__ieee754_pow+0x23c>)
 800221c:	429c      	cmp	r4, r3
 800221e:	dd15      	ble.n	800224c <__ieee754_pow+0x24c>
 8002220:	2f00      	cmp	r7, #0
 8002222:	dcf2      	bgt.n	800220a <__ieee754_pow+0x20a>
 8002224:	2000      	movs	r0, #0
 8002226:	b013      	add	sp, #76	; 0x4c
 8002228:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222c:	f000 bcd0 	b.w	8002bd0 <__math_uflow>
 8002230:	fff00000 	.word	0xfff00000
 8002234:	7ff00000 	.word	0x7ff00000
 8002238:	433fffff 	.word	0x433fffff
 800223c:	3ff00000 	.word	0x3ff00000
 8002240:	3fefffff 	.word	0x3fefffff
 8002244:	3fe00000 	.word	0x3fe00000
 8002248:	41e00000 	.word	0x41e00000
 800224c:	4661      	mov	r1, ip
 800224e:	2200      	movs	r2, #0
 8002250:	4658      	mov	r0, fp
 8002252:	4b5f      	ldr	r3, [pc, #380]	; (80023d0 <__ieee754_pow+0x3d0>)
 8002254:	f7fd ff90 	bl	8000178 <__aeabi_dsub>
 8002258:	a355      	add	r3, pc, #340	; (adr r3, 80023b0 <__ieee754_pow+0x3b0>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	4604      	mov	r4, r0
 8002260:	460d      	mov	r5, r1
 8002262:	f7fe f941 	bl	80004e8 <__aeabi_dmul>
 8002266:	a354      	add	r3, pc, #336	; (adr r3, 80023b8 <__ieee754_pow+0x3b8>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	4606      	mov	r6, r0
 800226e:	460f      	mov	r7, r1
 8002270:	4620      	mov	r0, r4
 8002272:	4629      	mov	r1, r5
 8002274:	f7fe f938 	bl	80004e8 <__aeabi_dmul>
 8002278:	2200      	movs	r2, #0
 800227a:	4682      	mov	sl, r0
 800227c:	468b      	mov	fp, r1
 800227e:	4620      	mov	r0, r4
 8002280:	4629      	mov	r1, r5
 8002282:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <__ieee754_pow+0x3d4>)
 8002284:	f7fe f930 	bl	80004e8 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	a14c      	add	r1, pc, #304	; (adr r1, 80023c0 <__ieee754_pow+0x3c0>)
 800228e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002292:	f7fd ff71 	bl	8000178 <__aeabi_dsub>
 8002296:	4622      	mov	r2, r4
 8002298:	462b      	mov	r3, r5
 800229a:	f7fe f925 	bl	80004e8 <__aeabi_dmul>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	2000      	movs	r0, #0
 80022a4:	494c      	ldr	r1, [pc, #304]	; (80023d8 <__ieee754_pow+0x3d8>)
 80022a6:	f7fd ff67 	bl	8000178 <__aeabi_dsub>
 80022aa:	4622      	mov	r2, r4
 80022ac:	462b      	mov	r3, r5
 80022ae:	4680      	mov	r8, r0
 80022b0:	4689      	mov	r9, r1
 80022b2:	4620      	mov	r0, r4
 80022b4:	4629      	mov	r1, r5
 80022b6:	f7fe f917 	bl	80004e8 <__aeabi_dmul>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4640      	mov	r0, r8
 80022c0:	4649      	mov	r1, r9
 80022c2:	f7fe f911 	bl	80004e8 <__aeabi_dmul>
 80022c6:	a340      	add	r3, pc, #256	; (adr r3, 80023c8 <__ieee754_pow+0x3c8>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	f7fe f90c 	bl	80004e8 <__aeabi_dmul>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4650      	mov	r0, sl
 80022d6:	4659      	mov	r1, fp
 80022d8:	f7fd ff4e 	bl	8000178 <__aeabi_dsub>
 80022dc:	f04f 0a00 	mov.w	sl, #0
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4604      	mov	r4, r0
 80022e6:	460d      	mov	r5, r1
 80022e8:	4630      	mov	r0, r6
 80022ea:	4639      	mov	r1, r7
 80022ec:	f7fd ff46 	bl	800017c <__adddf3>
 80022f0:	4632      	mov	r2, r6
 80022f2:	463b      	mov	r3, r7
 80022f4:	4650      	mov	r0, sl
 80022f6:	468b      	mov	fp, r1
 80022f8:	f7fd ff3e 	bl	8000178 <__aeabi_dsub>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4620      	mov	r0, r4
 8002302:	4629      	mov	r1, r5
 8002304:	f7fd ff38 	bl	8000178 <__aeabi_dsub>
 8002308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800230c:	9b00      	ldr	r3, [sp, #0]
 800230e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002310:	3b01      	subs	r3, #1
 8002312:	4313      	orrs	r3, r2
 8002314:	f04f 0600 	mov.w	r6, #0
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	bf0c      	ite	eq
 800231e:	4b2f      	ldreq	r3, [pc, #188]	; (80023dc <__ieee754_pow+0x3dc>)
 8002320:	4b2b      	ldrne	r3, [pc, #172]	; (80023d0 <__ieee754_pow+0x3d0>)
 8002322:	4604      	mov	r4, r0
 8002324:	460d      	mov	r5, r1
 8002326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800232a:	e9cd 2300 	strd	r2, r3, [sp]
 800232e:	4632      	mov	r2, r6
 8002330:	463b      	mov	r3, r7
 8002332:	f7fd ff21 	bl	8000178 <__aeabi_dsub>
 8002336:	4652      	mov	r2, sl
 8002338:	465b      	mov	r3, fp
 800233a:	f7fe f8d5 	bl	80004e8 <__aeabi_dmul>
 800233e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002342:	4680      	mov	r8, r0
 8002344:	4689      	mov	r9, r1
 8002346:	4620      	mov	r0, r4
 8002348:	4629      	mov	r1, r5
 800234a:	f7fe f8cd 	bl	80004e8 <__aeabi_dmul>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4640      	mov	r0, r8
 8002354:	4649      	mov	r1, r9
 8002356:	f7fd ff11 	bl	800017c <__adddf3>
 800235a:	4632      	mov	r2, r6
 800235c:	463b      	mov	r3, r7
 800235e:	4680      	mov	r8, r0
 8002360:	4689      	mov	r9, r1
 8002362:	4650      	mov	r0, sl
 8002364:	4659      	mov	r1, fp
 8002366:	f7fe f8bf 	bl	80004e8 <__aeabi_dmul>
 800236a:	4604      	mov	r4, r0
 800236c:	460d      	mov	r5, r1
 800236e:	460b      	mov	r3, r1
 8002370:	4602      	mov	r2, r0
 8002372:	4649      	mov	r1, r9
 8002374:	4640      	mov	r0, r8
 8002376:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800237a:	f7fd feff 	bl	800017c <__adddf3>
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <__ieee754_pow+0x3e0>)
 8002380:	4682      	mov	sl, r0
 8002382:	4299      	cmp	r1, r3
 8002384:	460f      	mov	r7, r1
 8002386:	460e      	mov	r6, r1
 8002388:	f340 82e5 	ble.w	8002956 <__ieee754_pow+0x956>
 800238c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002390:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002394:	4303      	orrs	r3, r0
 8002396:	f000 81df 	beq.w	8002758 <__ieee754_pow+0x758>
 800239a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800239e:	2200      	movs	r2, #0
 80023a0:	2300      	movs	r3, #0
 80023a2:	f7fe fb13 	bl	80009cc <__aeabi_dcmplt>
 80023a6:	3800      	subs	r0, #0
 80023a8:	bf18      	it	ne
 80023aa:	2001      	movne	r0, #1
 80023ac:	e72e      	b.n	800220c <__ieee754_pow+0x20c>
 80023ae:	bf00      	nop
 80023b0:	60000000 	.word	0x60000000
 80023b4:	3ff71547 	.word	0x3ff71547
 80023b8:	f85ddf44 	.word	0xf85ddf44
 80023bc:	3e54ae0b 	.word	0x3e54ae0b
 80023c0:	55555555 	.word	0x55555555
 80023c4:	3fd55555 	.word	0x3fd55555
 80023c8:	652b82fe 	.word	0x652b82fe
 80023cc:	3ff71547 	.word	0x3ff71547
 80023d0:	3ff00000 	.word	0x3ff00000
 80023d4:	3fd00000 	.word	0x3fd00000
 80023d8:	3fe00000 	.word	0x3fe00000
 80023dc:	bff00000 	.word	0xbff00000
 80023e0:	408fffff 	.word	0x408fffff
 80023e4:	4bd2      	ldr	r3, [pc, #840]	; (8002730 <__ieee754_pow+0x730>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	402b      	ands	r3, r5
 80023ea:	b943      	cbnz	r3, 80023fe <__ieee754_pow+0x3fe>
 80023ec:	4658      	mov	r0, fp
 80023ee:	4661      	mov	r1, ip
 80023f0:	4bd0      	ldr	r3, [pc, #832]	; (8002734 <__ieee754_pow+0x734>)
 80023f2:	f7fe f879 	bl	80004e8 <__aeabi_dmul>
 80023f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80023fa:	4683      	mov	fp, r0
 80023fc:	460c      	mov	r4, r1
 80023fe:	1523      	asrs	r3, r4, #20
 8002400:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002404:	4413      	add	r3, r2
 8002406:	930b      	str	r3, [sp, #44]	; 0x2c
 8002408:	4bcb      	ldr	r3, [pc, #812]	; (8002738 <__ieee754_pow+0x738>)
 800240a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800240e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002412:	429c      	cmp	r4, r3
 8002414:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002418:	dd08      	ble.n	800242c <__ieee754_pow+0x42c>
 800241a:	4bc8      	ldr	r3, [pc, #800]	; (800273c <__ieee754_pow+0x73c>)
 800241c:	429c      	cmp	r4, r3
 800241e:	f340 8199 	ble.w	8002754 <__ieee754_pow+0x754>
 8002422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002424:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002428:	3301      	adds	r3, #1
 800242a:	930b      	str	r3, [sp, #44]	; 0x2c
 800242c:	2600      	movs	r6, #0
 800242e:	00f3      	lsls	r3, r6, #3
 8002430:	930d      	str	r3, [sp, #52]	; 0x34
 8002432:	4bc3      	ldr	r3, [pc, #780]	; (8002740 <__ieee754_pow+0x740>)
 8002434:	4658      	mov	r0, fp
 8002436:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800243a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800243e:	4629      	mov	r1, r5
 8002440:	461a      	mov	r2, r3
 8002442:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002446:	4623      	mov	r3, r4
 8002448:	f7fd fe96 	bl	8000178 <__aeabi_dsub>
 800244c:	46da      	mov	sl, fp
 800244e:	462b      	mov	r3, r5
 8002450:	4652      	mov	r2, sl
 8002452:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002456:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800245a:	f7fd fe8f 	bl	800017c <__adddf3>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	2000      	movs	r0, #0
 8002464:	49b7      	ldr	r1, [pc, #732]	; (8002744 <__ieee754_pow+0x744>)
 8002466:	f7fe f969 	bl	800073c <__aeabi_ddiv>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002472:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002476:	f7fe f837 	bl	80004e8 <__aeabi_dmul>
 800247a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800247e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8002482:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002486:	2300      	movs	r3, #0
 8002488:	2200      	movs	r2, #0
 800248a:	46ab      	mov	fp, r5
 800248c:	106d      	asrs	r5, r5, #1
 800248e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002492:	9304      	str	r3, [sp, #16]
 8002494:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002498:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800249c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80024a0:	4640      	mov	r0, r8
 80024a2:	4649      	mov	r1, r9
 80024a4:	4614      	mov	r4, r2
 80024a6:	461d      	mov	r5, r3
 80024a8:	f7fe f81e 	bl	80004e8 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80024b4:	f7fd fe60 	bl	8000178 <__aeabi_dsub>
 80024b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80024bc:	4606      	mov	r6, r0
 80024be:	460f      	mov	r7, r1
 80024c0:	4620      	mov	r0, r4
 80024c2:	4629      	mov	r1, r5
 80024c4:	f7fd fe58 	bl	8000178 <__aeabi_dsub>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4650      	mov	r0, sl
 80024ce:	4659      	mov	r1, fp
 80024d0:	f7fd fe52 	bl	8000178 <__aeabi_dsub>
 80024d4:	4642      	mov	r2, r8
 80024d6:	464b      	mov	r3, r9
 80024d8:	f7fe f806 	bl	80004e8 <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4630      	mov	r0, r6
 80024e2:	4639      	mov	r1, r7
 80024e4:	f7fd fe48 	bl	8000178 <__aeabi_dsub>
 80024e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80024ec:	f7fd fffc 	bl	80004e8 <__aeabi_dmul>
 80024f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80024f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fd fff4 	bl	80004e8 <__aeabi_dmul>
 8002500:	a379      	add	r3, pc, #484	; (adr r3, 80026e8 <__ieee754_pow+0x6e8>)
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	f7fd ffed 	bl	80004e8 <__aeabi_dmul>
 800250e:	a378      	add	r3, pc, #480	; (adr r3, 80026f0 <__ieee754_pow+0x6f0>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f7fd fe32 	bl	800017c <__adddf3>
 8002518:	4622      	mov	r2, r4
 800251a:	462b      	mov	r3, r5
 800251c:	f7fd ffe4 	bl	80004e8 <__aeabi_dmul>
 8002520:	a375      	add	r3, pc, #468	; (adr r3, 80026f8 <__ieee754_pow+0x6f8>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fd fe29 	bl	800017c <__adddf3>
 800252a:	4622      	mov	r2, r4
 800252c:	462b      	mov	r3, r5
 800252e:	f7fd ffdb 	bl	80004e8 <__aeabi_dmul>
 8002532:	a373      	add	r3, pc, #460	; (adr r3, 8002700 <__ieee754_pow+0x700>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fd fe20 	bl	800017c <__adddf3>
 800253c:	4622      	mov	r2, r4
 800253e:	462b      	mov	r3, r5
 8002540:	f7fd ffd2 	bl	80004e8 <__aeabi_dmul>
 8002544:	a370      	add	r3, pc, #448	; (adr r3, 8002708 <__ieee754_pow+0x708>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fd fe17 	bl	800017c <__adddf3>
 800254e:	4622      	mov	r2, r4
 8002550:	462b      	mov	r3, r5
 8002552:	f7fd ffc9 	bl	80004e8 <__aeabi_dmul>
 8002556:	a36e      	add	r3, pc, #440	; (adr r3, 8002710 <__ieee754_pow+0x710>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	f7fd fe0e 	bl	800017c <__adddf3>
 8002560:	4622      	mov	r2, r4
 8002562:	4606      	mov	r6, r0
 8002564:	460f      	mov	r7, r1
 8002566:	462b      	mov	r3, r5
 8002568:	4620      	mov	r0, r4
 800256a:	4629      	mov	r1, r5
 800256c:	f7fd ffbc 	bl	80004e8 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4630      	mov	r0, r6
 8002576:	4639      	mov	r1, r7
 8002578:	f7fd ffb6 	bl	80004e8 <__aeabi_dmul>
 800257c:	4604      	mov	r4, r0
 800257e:	460d      	mov	r5, r1
 8002580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002584:	4642      	mov	r2, r8
 8002586:	464b      	mov	r3, r9
 8002588:	f7fd fdf8 	bl	800017c <__adddf3>
 800258c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002590:	f7fd ffaa 	bl	80004e8 <__aeabi_dmul>
 8002594:	4622      	mov	r2, r4
 8002596:	462b      	mov	r3, r5
 8002598:	f7fd fdf0 	bl	800017c <__adddf3>
 800259c:	4642      	mov	r2, r8
 800259e:	4606      	mov	r6, r0
 80025a0:	460f      	mov	r7, r1
 80025a2:	464b      	mov	r3, r9
 80025a4:	4640      	mov	r0, r8
 80025a6:	4649      	mov	r1, r9
 80025a8:	f7fd ff9e 	bl	80004e8 <__aeabi_dmul>
 80025ac:	2200      	movs	r2, #0
 80025ae:	4b66      	ldr	r3, [pc, #408]	; (8002748 <__ieee754_pow+0x748>)
 80025b0:	4682      	mov	sl, r0
 80025b2:	468b      	mov	fp, r1
 80025b4:	f7fd fde2 	bl	800017c <__adddf3>
 80025b8:	4632      	mov	r2, r6
 80025ba:	463b      	mov	r3, r7
 80025bc:	f7fd fdde 	bl	800017c <__adddf3>
 80025c0:	2400      	movs	r4, #0
 80025c2:	460d      	mov	r5, r1
 80025c4:	4622      	mov	r2, r4
 80025c6:	460b      	mov	r3, r1
 80025c8:	4640      	mov	r0, r8
 80025ca:	4649      	mov	r1, r9
 80025cc:	f7fd ff8c 	bl	80004e8 <__aeabi_dmul>
 80025d0:	2200      	movs	r2, #0
 80025d2:	4680      	mov	r8, r0
 80025d4:	4689      	mov	r9, r1
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <__ieee754_pow+0x748>)
 80025dc:	f7fd fdcc 	bl	8000178 <__aeabi_dsub>
 80025e0:	4652      	mov	r2, sl
 80025e2:	465b      	mov	r3, fp
 80025e4:	f7fd fdc8 	bl	8000178 <__aeabi_dsub>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4630      	mov	r0, r6
 80025ee:	4639      	mov	r1, r7
 80025f0:	f7fd fdc2 	bl	8000178 <__aeabi_dsub>
 80025f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80025f8:	f7fd ff76 	bl	80004e8 <__aeabi_dmul>
 80025fc:	4622      	mov	r2, r4
 80025fe:	4606      	mov	r6, r0
 8002600:	460f      	mov	r7, r1
 8002602:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002606:	462b      	mov	r3, r5
 8002608:	f7fd ff6e 	bl	80004e8 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4630      	mov	r0, r6
 8002612:	4639      	mov	r1, r7
 8002614:	f7fd fdb2 	bl	800017c <__adddf3>
 8002618:	2400      	movs	r4, #0
 800261a:	4606      	mov	r6, r0
 800261c:	460f      	mov	r7, r1
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4640      	mov	r0, r8
 8002624:	4649      	mov	r1, r9
 8002626:	f7fd fda9 	bl	800017c <__adddf3>
 800262a:	a33b      	add	r3, pc, #236	; (adr r3, 8002718 <__ieee754_pow+0x718>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	4620      	mov	r0, r4
 8002632:	460d      	mov	r5, r1
 8002634:	f7fd ff58 	bl	80004e8 <__aeabi_dmul>
 8002638:	4642      	mov	r2, r8
 800263a:	464b      	mov	r3, r9
 800263c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002640:	4620      	mov	r0, r4
 8002642:	4629      	mov	r1, r5
 8002644:	f7fd fd98 	bl	8000178 <__aeabi_dsub>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4630      	mov	r0, r6
 800264e:	4639      	mov	r1, r7
 8002650:	f7fd fd92 	bl	8000178 <__aeabi_dsub>
 8002654:	a332      	add	r3, pc, #200	; (adr r3, 8002720 <__ieee754_pow+0x720>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ff45 	bl	80004e8 <__aeabi_dmul>
 800265e:	a332      	add	r3, pc, #200	; (adr r3, 8002728 <__ieee754_pow+0x728>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	4606      	mov	r6, r0
 8002666:	460f      	mov	r7, r1
 8002668:	4620      	mov	r0, r4
 800266a:	4629      	mov	r1, r5
 800266c:	f7fd ff3c 	bl	80004e8 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4630      	mov	r0, r6
 8002676:	4639      	mov	r1, r7
 8002678:	f7fd fd80 	bl	800017c <__adddf3>
 800267c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800267e:	4b33      	ldr	r3, [pc, #204]	; (800274c <__ieee754_pow+0x74c>)
 8002680:	f04f 0a00 	mov.w	sl, #0
 8002684:	4413      	add	r3, r2
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	f7fd fd77 	bl	800017c <__adddf3>
 800268e:	4680      	mov	r8, r0
 8002690:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002692:	4689      	mov	r9, r1
 8002694:	f7fd febe 	bl	8000414 <__aeabi_i2d>
 8002698:	4604      	mov	r4, r0
 800269a:	460d      	mov	r5, r1
 800269c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <__ieee754_pow+0x750>)
 80026a0:	4413      	add	r3, r2
 80026a2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80026a6:	4642      	mov	r2, r8
 80026a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80026ac:	464b      	mov	r3, r9
 80026ae:	f7fd fd65 	bl	800017c <__adddf3>
 80026b2:	4632      	mov	r2, r6
 80026b4:	463b      	mov	r3, r7
 80026b6:	f7fd fd61 	bl	800017c <__adddf3>
 80026ba:	4622      	mov	r2, r4
 80026bc:	462b      	mov	r3, r5
 80026be:	f7fd fd5d 	bl	800017c <__adddf3>
 80026c2:	4622      	mov	r2, r4
 80026c4:	462b      	mov	r3, r5
 80026c6:	4650      	mov	r0, sl
 80026c8:	468b      	mov	fp, r1
 80026ca:	f7fd fd55 	bl	8000178 <__aeabi_dsub>
 80026ce:	4632      	mov	r2, r6
 80026d0:	463b      	mov	r3, r7
 80026d2:	f7fd fd51 	bl	8000178 <__aeabi_dsub>
 80026d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80026da:	f7fd fd4d 	bl	8000178 <__aeabi_dsub>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4640      	mov	r0, r8
 80026e4:	4649      	mov	r1, r9
 80026e6:	e60d      	b.n	8002304 <__ieee754_pow+0x304>
 80026e8:	4a454eef 	.word	0x4a454eef
 80026ec:	3fca7e28 	.word	0x3fca7e28
 80026f0:	93c9db65 	.word	0x93c9db65
 80026f4:	3fcd864a 	.word	0x3fcd864a
 80026f8:	a91d4101 	.word	0xa91d4101
 80026fc:	3fd17460 	.word	0x3fd17460
 8002700:	518f264d 	.word	0x518f264d
 8002704:	3fd55555 	.word	0x3fd55555
 8002708:	db6fabff 	.word	0xdb6fabff
 800270c:	3fdb6db6 	.word	0x3fdb6db6
 8002710:	33333303 	.word	0x33333303
 8002714:	3fe33333 	.word	0x3fe33333
 8002718:	e0000000 	.word	0xe0000000
 800271c:	3feec709 	.word	0x3feec709
 8002720:	dc3a03fd 	.word	0xdc3a03fd
 8002724:	3feec709 	.word	0x3feec709
 8002728:	145b01f5 	.word	0x145b01f5
 800272c:	be3e2fe0 	.word	0xbe3e2fe0
 8002730:	7ff00000 	.word	0x7ff00000
 8002734:	43400000 	.word	0x43400000
 8002738:	0003988e 	.word	0x0003988e
 800273c:	000bb679 	.word	0x000bb679
 8002740:	08002d28 	.word	0x08002d28
 8002744:	3ff00000 	.word	0x3ff00000
 8002748:	40080000 	.word	0x40080000
 800274c:	08002d48 	.word	0x08002d48
 8002750:	08002d38 	.word	0x08002d38
 8002754:	2601      	movs	r6, #1
 8002756:	e66a      	b.n	800242e <__ieee754_pow+0x42e>
 8002758:	a39d      	add	r3, pc, #628	; (adr r3, 80029d0 <__ieee754_pow+0x9d0>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	4640      	mov	r0, r8
 8002760:	4649      	mov	r1, r9
 8002762:	f7fd fd0b 	bl	800017c <__adddf3>
 8002766:	4622      	mov	r2, r4
 8002768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800276c:	462b      	mov	r3, r5
 800276e:	4650      	mov	r0, sl
 8002770:	4639      	mov	r1, r7
 8002772:	f7fd fd01 	bl	8000178 <__aeabi_dsub>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800277e:	f7fe f943 	bl	8000a08 <__aeabi_dcmpgt>
 8002782:	2800      	cmp	r0, #0
 8002784:	f47f ae09 	bne.w	800239a <__ieee754_pow+0x39a>
 8002788:	4aa3      	ldr	r2, [pc, #652]	; (8002a18 <__ieee754_pow+0xa18>)
 800278a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800278e:	4293      	cmp	r3, r2
 8002790:	f340 8101 	ble.w	8002996 <__ieee754_pow+0x996>
 8002794:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002798:	2000      	movs	r0, #0
 800279a:	151b      	asrs	r3, r3, #20
 800279c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80027a0:	fa4a f303 	asr.w	r3, sl, r3
 80027a4:	4433      	add	r3, r6
 80027a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80027aa:	4f9c      	ldr	r7, [pc, #624]	; (8002a1c <__ieee754_pow+0xa1c>)
 80027ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80027b0:	4117      	asrs	r7, r2
 80027b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80027b6:	ea23 0107 	bic.w	r1, r3, r7
 80027ba:	f1c2 0214 	rsb	r2, r2, #20
 80027be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80027c2:	460b      	mov	r3, r1
 80027c4:	fa4a fa02 	asr.w	sl, sl, r2
 80027c8:	2e00      	cmp	r6, #0
 80027ca:	4602      	mov	r2, r0
 80027cc:	4629      	mov	r1, r5
 80027ce:	4620      	mov	r0, r4
 80027d0:	bfb8      	it	lt
 80027d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80027d6:	f7fd fccf 	bl	8000178 <__aeabi_dsub>
 80027da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80027de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80027e2:	2400      	movs	r4, #0
 80027e4:	4642      	mov	r2, r8
 80027e6:	464b      	mov	r3, r9
 80027e8:	f7fd fcc8 	bl	800017c <__adddf3>
 80027ec:	a37a      	add	r3, pc, #488	; (adr r3, 80029d8 <__ieee754_pow+0x9d8>)
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	4620      	mov	r0, r4
 80027f4:	460d      	mov	r5, r1
 80027f6:	f7fd fe77 	bl	80004e8 <__aeabi_dmul>
 80027fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80027fe:	4606      	mov	r6, r0
 8002800:	460f      	mov	r7, r1
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fd fcb7 	bl	8000178 <__aeabi_dsub>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4640      	mov	r0, r8
 8002810:	4649      	mov	r1, r9
 8002812:	f7fd fcb1 	bl	8000178 <__aeabi_dsub>
 8002816:	a372      	add	r3, pc, #456	; (adr r3, 80029e0 <__ieee754_pow+0x9e0>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd fe64 	bl	80004e8 <__aeabi_dmul>
 8002820:	a371      	add	r3, pc, #452	; (adr r3, 80029e8 <__ieee754_pow+0x9e8>)
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	4680      	mov	r8, r0
 8002828:	4689      	mov	r9, r1
 800282a:	4620      	mov	r0, r4
 800282c:	4629      	mov	r1, r5
 800282e:	f7fd fe5b 	bl	80004e8 <__aeabi_dmul>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4640      	mov	r0, r8
 8002838:	4649      	mov	r1, r9
 800283a:	f7fd fc9f 	bl	800017c <__adddf3>
 800283e:	4604      	mov	r4, r0
 8002840:	460d      	mov	r5, r1
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4630      	mov	r0, r6
 8002848:	4639      	mov	r1, r7
 800284a:	f7fd fc97 	bl	800017c <__adddf3>
 800284e:	4632      	mov	r2, r6
 8002850:	463b      	mov	r3, r7
 8002852:	4680      	mov	r8, r0
 8002854:	4689      	mov	r9, r1
 8002856:	f7fd fc8f 	bl	8000178 <__aeabi_dsub>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4620      	mov	r0, r4
 8002860:	4629      	mov	r1, r5
 8002862:	f7fd fc89 	bl	8000178 <__aeabi_dsub>
 8002866:	4642      	mov	r2, r8
 8002868:	4606      	mov	r6, r0
 800286a:	460f      	mov	r7, r1
 800286c:	464b      	mov	r3, r9
 800286e:	4640      	mov	r0, r8
 8002870:	4649      	mov	r1, r9
 8002872:	f7fd fe39 	bl	80004e8 <__aeabi_dmul>
 8002876:	a35e      	add	r3, pc, #376	; (adr r3, 80029f0 <__ieee754_pow+0x9f0>)
 8002878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287c:	4604      	mov	r4, r0
 800287e:	460d      	mov	r5, r1
 8002880:	f7fd fe32 	bl	80004e8 <__aeabi_dmul>
 8002884:	a35c      	add	r3, pc, #368	; (adr r3, 80029f8 <__ieee754_pow+0x9f8>)
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f7fd fc75 	bl	8000178 <__aeabi_dsub>
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	f7fd fe29 	bl	80004e8 <__aeabi_dmul>
 8002896:	a35a      	add	r3, pc, #360	; (adr r3, 8002a00 <__ieee754_pow+0xa00>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd fc6e 	bl	800017c <__adddf3>
 80028a0:	4622      	mov	r2, r4
 80028a2:	462b      	mov	r3, r5
 80028a4:	f7fd fe20 	bl	80004e8 <__aeabi_dmul>
 80028a8:	a357      	add	r3, pc, #348	; (adr r3, 8002a08 <__ieee754_pow+0xa08>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd fc63 	bl	8000178 <__aeabi_dsub>
 80028b2:	4622      	mov	r2, r4
 80028b4:	462b      	mov	r3, r5
 80028b6:	f7fd fe17 	bl	80004e8 <__aeabi_dmul>
 80028ba:	a355      	add	r3, pc, #340	; (adr r3, 8002a10 <__ieee754_pow+0xa10>)
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	f7fd fc5c 	bl	800017c <__adddf3>
 80028c4:	4622      	mov	r2, r4
 80028c6:	462b      	mov	r3, r5
 80028c8:	f7fd fe0e 	bl	80004e8 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4640      	mov	r0, r8
 80028d2:	4649      	mov	r1, r9
 80028d4:	f7fd fc50 	bl	8000178 <__aeabi_dsub>
 80028d8:	4604      	mov	r4, r0
 80028da:	460d      	mov	r5, r1
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4640      	mov	r0, r8
 80028e2:	4649      	mov	r1, r9
 80028e4:	f7fd fe00 	bl	80004e8 <__aeabi_dmul>
 80028e8:	2200      	movs	r2, #0
 80028ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028f2:	4620      	mov	r0, r4
 80028f4:	4629      	mov	r1, r5
 80028f6:	f7fd fc3f 	bl	8000178 <__aeabi_dsub>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002902:	f7fd ff1b 	bl	800073c <__aeabi_ddiv>
 8002906:	4632      	mov	r2, r6
 8002908:	4604      	mov	r4, r0
 800290a:	460d      	mov	r5, r1
 800290c:	463b      	mov	r3, r7
 800290e:	4640      	mov	r0, r8
 8002910:	4649      	mov	r1, r9
 8002912:	f7fd fde9 	bl	80004e8 <__aeabi_dmul>
 8002916:	4632      	mov	r2, r6
 8002918:	463b      	mov	r3, r7
 800291a:	f7fd fc2f 	bl	800017c <__adddf3>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4620      	mov	r0, r4
 8002924:	4629      	mov	r1, r5
 8002926:	f7fd fc27 	bl	8000178 <__aeabi_dsub>
 800292a:	4642      	mov	r2, r8
 800292c:	464b      	mov	r3, r9
 800292e:	f7fd fc23 	bl	8000178 <__aeabi_dsub>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	2000      	movs	r0, #0
 8002938:	4939      	ldr	r1, [pc, #228]	; (8002a20 <__ieee754_pow+0xa20>)
 800293a:	f7fd fc1d 	bl	8000178 <__aeabi_dsub>
 800293e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8002942:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8002946:	da29      	bge.n	800299c <__ieee754_pow+0x99c>
 8002948:	4652      	mov	r2, sl
 800294a:	f000 f955 	bl	8002bf8 <scalbn>
 800294e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002952:	f7ff bbfe 	b.w	8002152 <__ieee754_pow+0x152>
 8002956:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <__ieee754_pow+0xa24>)
 8002958:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800295c:	429f      	cmp	r7, r3
 800295e:	f77f af13 	ble.w	8002788 <__ieee754_pow+0x788>
 8002962:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <__ieee754_pow+0xa28>)
 8002964:	440b      	add	r3, r1
 8002966:	4303      	orrs	r3, r0
 8002968:	d009      	beq.n	800297e <__ieee754_pow+0x97e>
 800296a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800296e:	2200      	movs	r2, #0
 8002970:	2300      	movs	r3, #0
 8002972:	f7fe f82b 	bl	80009cc <__aeabi_dcmplt>
 8002976:	3800      	subs	r0, #0
 8002978:	bf18      	it	ne
 800297a:	2001      	movne	r0, #1
 800297c:	e453      	b.n	8002226 <__ieee754_pow+0x226>
 800297e:	4622      	mov	r2, r4
 8002980:	462b      	mov	r3, r5
 8002982:	f7fd fbf9 	bl	8000178 <__aeabi_dsub>
 8002986:	4642      	mov	r2, r8
 8002988:	464b      	mov	r3, r9
 800298a:	f7fe f833 	bl	80009f4 <__aeabi_dcmpge>
 800298e:	2800      	cmp	r0, #0
 8002990:	f43f aefa 	beq.w	8002788 <__ieee754_pow+0x788>
 8002994:	e7e9      	b.n	800296a <__ieee754_pow+0x96a>
 8002996:	f04f 0a00 	mov.w	sl, #0
 800299a:	e720      	b.n	80027de <__ieee754_pow+0x7de>
 800299c:	4621      	mov	r1, r4
 800299e:	e7d6      	b.n	800294e <__ieee754_pow+0x94e>
 80029a0:	f04f 0b00 	mov.w	fp, #0
 80029a4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8002a20 <__ieee754_pow+0xa20>
 80029a8:	f7ff bbba 	b.w	8002120 <__ieee754_pow+0x120>
 80029ac:	f04f 0b00 	mov.w	fp, #0
 80029b0:	f04f 0c00 	mov.w	ip, #0
 80029b4:	f7ff bbb4 	b.w	8002120 <__ieee754_pow+0x120>
 80029b8:	4640      	mov	r0, r8
 80029ba:	4649      	mov	r1, r9
 80029bc:	f7ff bb3d 	b.w	800203a <__ieee754_pow+0x3a>
 80029c0:	9200      	str	r2, [sp, #0]
 80029c2:	f7ff bb89 	b.w	80020d8 <__ieee754_pow+0xd8>
 80029c6:	2300      	movs	r3, #0
 80029c8:	f7ff bb73 	b.w	80020b2 <__ieee754_pow+0xb2>
 80029cc:	f3af 8000 	nop.w
 80029d0:	652b82fe 	.word	0x652b82fe
 80029d4:	3c971547 	.word	0x3c971547
 80029d8:	00000000 	.word	0x00000000
 80029dc:	3fe62e43 	.word	0x3fe62e43
 80029e0:	fefa39ef 	.word	0xfefa39ef
 80029e4:	3fe62e42 	.word	0x3fe62e42
 80029e8:	0ca86c39 	.word	0x0ca86c39
 80029ec:	be205c61 	.word	0xbe205c61
 80029f0:	72bea4d0 	.word	0x72bea4d0
 80029f4:	3e663769 	.word	0x3e663769
 80029f8:	c5d26bf1 	.word	0xc5d26bf1
 80029fc:	3ebbbd41 	.word	0x3ebbbd41
 8002a00:	af25de2c 	.word	0xaf25de2c
 8002a04:	3f11566a 	.word	0x3f11566a
 8002a08:	16bebd93 	.word	0x16bebd93
 8002a0c:	3f66c16c 	.word	0x3f66c16c
 8002a10:	5555553e 	.word	0x5555553e
 8002a14:	3fc55555 	.word	0x3fc55555
 8002a18:	3fe00000 	.word	0x3fe00000
 8002a1c:	000fffff 	.word	0x000fffff
 8002a20:	3ff00000 	.word	0x3ff00000
 8002a24:	4090cbff 	.word	0x4090cbff
 8002a28:	3f6f3400 	.word	0x3f6f3400

08002a2c <__ieee754_sqrt>:
 8002a2c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8002b88 <__ieee754_sqrt+0x15c>
 8002a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a34:	ea3c 0c01 	bics.w	ip, ip, r1
 8002a38:	4606      	mov	r6, r0
 8002a3a:	460d      	mov	r5, r1
 8002a3c:	460c      	mov	r4, r1
 8002a3e:	460a      	mov	r2, r1
 8002a40:	4607      	mov	r7, r0
 8002a42:	4603      	mov	r3, r0
 8002a44:	d10f      	bne.n	8002a66 <__ieee754_sqrt+0x3a>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	f7fd fd4d 	bl	80004e8 <__aeabi_dmul>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4630      	mov	r0, r6
 8002a54:	4629      	mov	r1, r5
 8002a56:	f7fd fb91 	bl	800017c <__adddf3>
 8002a5a:	4606      	mov	r6, r0
 8002a5c:	460d      	mov	r5, r1
 8002a5e:	4630      	mov	r0, r6
 8002a60:	4629      	mov	r1, r5
 8002a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a66:	2900      	cmp	r1, #0
 8002a68:	dc0e      	bgt.n	8002a88 <__ieee754_sqrt+0x5c>
 8002a6a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8002a6e:	ea5c 0707 	orrs.w	r7, ip, r7
 8002a72:	d0f4      	beq.n	8002a5e <__ieee754_sqrt+0x32>
 8002a74:	b141      	cbz	r1, 8002a88 <__ieee754_sqrt+0x5c>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	f7fd fb7d 	bl	8000178 <__aeabi_dsub>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	f7fd fe5b 	bl	800073c <__aeabi_ddiv>
 8002a86:	e7e8      	b.n	8002a5a <__ieee754_sqrt+0x2e>
 8002a88:	1521      	asrs	r1, r4, #20
 8002a8a:	d075      	beq.n	8002b78 <__ieee754_sqrt+0x14c>
 8002a8c:	07cc      	lsls	r4, r1, #31
 8002a8e:	f04f 0400 	mov.w	r4, #0
 8002a92:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8002a96:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8002a9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a9e:	bf5e      	ittt	pl
 8002aa0:	0fd9      	lsrpl	r1, r3, #31
 8002aa2:	005b      	lslpl	r3, r3, #1
 8002aa4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8002aa8:	0fd9      	lsrs	r1, r3, #31
 8002aaa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8002aae:	2516      	movs	r5, #22
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ab6:	107f      	asrs	r7, r7, #1
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	1846      	adds	r6, r0, r1
 8002abc:	4296      	cmp	r6, r2
 8002abe:	bfde      	ittt	le
 8002ac0:	1b92      	suble	r2, r2, r6
 8002ac2:	1870      	addle	r0, r6, r1
 8002ac4:	1864      	addle	r4, r4, r1
 8002ac6:	0052      	lsls	r2, r2, #1
 8002ac8:	3d01      	subs	r5, #1
 8002aca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002ace:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002ad2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002ad6:	d1f0      	bne.n	8002aba <__ieee754_sqrt+0x8e>
 8002ad8:	4629      	mov	r1, r5
 8002ada:	f04f 0e20 	mov.w	lr, #32
 8002ade:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8002ae2:	4282      	cmp	r2, r0
 8002ae4:	eb06 0c05 	add.w	ip, r6, r5
 8002ae8:	dc02      	bgt.n	8002af0 <__ieee754_sqrt+0xc4>
 8002aea:	d113      	bne.n	8002b14 <__ieee754_sqrt+0xe8>
 8002aec:	459c      	cmp	ip, r3
 8002aee:	d811      	bhi.n	8002b14 <__ieee754_sqrt+0xe8>
 8002af0:	f1bc 0f00 	cmp.w	ip, #0
 8002af4:	eb0c 0506 	add.w	r5, ip, r6
 8002af8:	da43      	bge.n	8002b82 <__ieee754_sqrt+0x156>
 8002afa:	2d00      	cmp	r5, #0
 8002afc:	db41      	blt.n	8002b82 <__ieee754_sqrt+0x156>
 8002afe:	f100 0801 	add.w	r8, r0, #1
 8002b02:	1a12      	subs	r2, r2, r0
 8002b04:	4640      	mov	r0, r8
 8002b06:	459c      	cmp	ip, r3
 8002b08:	bf88      	it	hi
 8002b0a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8002b0e:	eba3 030c 	sub.w	r3, r3, ip
 8002b12:	4431      	add	r1, r6
 8002b14:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8002b18:	f1be 0e01 	subs.w	lr, lr, #1
 8002b1c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8002b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002b24:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8002b28:	d1db      	bne.n	8002ae2 <__ieee754_sqrt+0xb6>
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	d006      	beq.n	8002b3c <__ieee754_sqrt+0x110>
 8002b2e:	1c48      	adds	r0, r1, #1
 8002b30:	bf0b      	itete	eq
 8002b32:	4671      	moveq	r1, lr
 8002b34:	3101      	addne	r1, #1
 8002b36:	3401      	addeq	r4, #1
 8002b38:	f021 0101 	bicne.w	r1, r1, #1
 8002b3c:	1063      	asrs	r3, r4, #1
 8002b3e:	0849      	lsrs	r1, r1, #1
 8002b40:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002b44:	07e2      	lsls	r2, r4, #31
 8002b46:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002b4a:	bf48      	it	mi
 8002b4c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8002b50:	460e      	mov	r6, r1
 8002b52:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8002b56:	e782      	b.n	8002a5e <__ieee754_sqrt+0x32>
 8002b58:	0ada      	lsrs	r2, r3, #11
 8002b5a:	3815      	subs	r0, #21
 8002b5c:	055b      	lsls	r3, r3, #21
 8002b5e:	2a00      	cmp	r2, #0
 8002b60:	d0fa      	beq.n	8002b58 <__ieee754_sqrt+0x12c>
 8002b62:	02d5      	lsls	r5, r2, #11
 8002b64:	d50a      	bpl.n	8002b7c <__ieee754_sqrt+0x150>
 8002b66:	f1c1 0420 	rsb	r4, r1, #32
 8002b6a:	fa23 f404 	lsr.w	r4, r3, r4
 8002b6e:	1e4d      	subs	r5, r1, #1
 8002b70:	408b      	lsls	r3, r1
 8002b72:	4322      	orrs	r2, r4
 8002b74:	1b41      	subs	r1, r0, r5
 8002b76:	e789      	b.n	8002a8c <__ieee754_sqrt+0x60>
 8002b78:	4608      	mov	r0, r1
 8002b7a:	e7f0      	b.n	8002b5e <__ieee754_sqrt+0x132>
 8002b7c:	0052      	lsls	r2, r2, #1
 8002b7e:	3101      	adds	r1, #1
 8002b80:	e7ef      	b.n	8002b62 <__ieee754_sqrt+0x136>
 8002b82:	4680      	mov	r8, r0
 8002b84:	e7bd      	b.n	8002b02 <__ieee754_sqrt+0xd6>
 8002b86:	bf00      	nop
 8002b88:	7ff00000 	.word	0x7ff00000

08002b8c <with_errno>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	4604      	mov	r4, r0
 8002b90:	460d      	mov	r5, r1
 8002b92:	4616      	mov	r6, r2
 8002b94:	f7ff f9a0 	bl	8001ed8 <__errno>
 8002b98:	4629      	mov	r1, r5
 8002b9a:	6006      	str	r6, [r0, #0]
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}

08002ba0 <xflow>:
 8002ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ba2:	4615      	mov	r5, r2
 8002ba4:	461c      	mov	r4, r3
 8002ba6:	b180      	cbz	r0, 8002bca <xflow+0x2a>
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002bae:	e9cd 0100 	strd	r0, r1, [sp]
 8002bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	4621      	mov	r1, r4
 8002bba:	f7fd fc95 	bl	80004e8 <__aeabi_dmul>
 8002bbe:	2222      	movs	r2, #34	; 0x22
 8002bc0:	b003      	add	sp, #12
 8002bc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bc6:	f7ff bfe1 	b.w	8002b8c <with_errno>
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	e7ee      	b.n	8002bae <xflow+0xe>

08002bd0 <__math_uflow>:
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002bd6:	f7ff bfe3 	b.w	8002ba0 <xflow>

08002bda <__math_oflow>:
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002be0:	f7ff bfde 	b.w	8002ba0 <xflow>

08002be4 <fabs>:
 8002be4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002be8:	4770      	bx	lr

08002bea <finite>:
 8002bea:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8002bee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002bf2:	0fc0      	lsrs	r0, r0, #31
 8002bf4:	4770      	bx	lr
	...

08002bf8 <scalbn>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8002bfe:	4604      	mov	r4, r0
 8002c00:	460d      	mov	r5, r1
 8002c02:	4617      	mov	r7, r2
 8002c04:	460b      	mov	r3, r1
 8002c06:	b996      	cbnz	r6, 8002c2e <scalbn+0x36>
 8002c08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002c0c:	4303      	orrs	r3, r0
 8002c0e:	d039      	beq.n	8002c84 <scalbn+0x8c>
 8002c10:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <scalbn+0xe8>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	f7fd fc68 	bl	80004e8 <__aeabi_dmul>
 8002c18:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <scalbn+0xec>)
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	429f      	cmp	r7, r3
 8002c1e:	460d      	mov	r5, r1
 8002c20:	da0f      	bge.n	8002c42 <scalbn+0x4a>
 8002c22:	a32b      	add	r3, pc, #172	; (adr r3, 8002cd0 <scalbn+0xd8>)
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	f7fd fc5e 	bl	80004e8 <__aeabi_dmul>
 8002c2c:	e006      	b.n	8002c3c <scalbn+0x44>
 8002c2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c32:	4296      	cmp	r6, r2
 8002c34:	d10a      	bne.n	8002c4c <scalbn+0x54>
 8002c36:	4602      	mov	r2, r0
 8002c38:	f7fd faa0 	bl	800017c <__adddf3>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	460d      	mov	r5, r1
 8002c40:	e020      	b.n	8002c84 <scalbn+0x8c>
 8002c42:	460b      	mov	r3, r1
 8002c44:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8002c48:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8002c4c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8002c50:	19b9      	adds	r1, r7, r6
 8002c52:	4291      	cmp	r1, r2
 8002c54:	dd0e      	ble.n	8002c74 <scalbn+0x7c>
 8002c56:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8002c5a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8002c5e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8002c62:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8002c66:	4820      	ldr	r0, [pc, #128]	; (8002ce8 <scalbn+0xf0>)
 8002c68:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8002c6c:	a31a      	add	r3, pc, #104	; (adr r3, 8002cd8 <scalbn+0xe0>)
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	e7d9      	b.n	8002c28 <scalbn+0x30>
 8002c74:	2900      	cmp	r1, #0
 8002c76:	dd08      	ble.n	8002c8a <scalbn+0x92>
 8002c78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002c7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8002c84:	4620      	mov	r0, r4
 8002c86:	4629      	mov	r1, r5
 8002c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c8a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8002c8e:	da12      	bge.n	8002cb6 <scalbn+0xbe>
 8002c90:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002c94:	429f      	cmp	r7, r3
 8002c96:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8002c9a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8002c9e:	dcdc      	bgt.n	8002c5a <scalbn+0x62>
 8002ca0:	a30b      	add	r3, pc, #44	; (adr r3, 8002cd0 <scalbn+0xd8>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8002caa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8002cae:	480f      	ldr	r0, [pc, #60]	; (8002cec <scalbn+0xf4>)
 8002cb0:	f041 011f 	orr.w	r1, r1, #31
 8002cb4:	e7b8      	b.n	8002c28 <scalbn+0x30>
 8002cb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002cba:	3136      	adds	r1, #54	; 0x36
 8002cbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002cc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <scalbn+0xf8>)
 8002ccc:	e7ac      	b.n	8002c28 <scalbn+0x30>
 8002cce:	bf00      	nop
 8002cd0:	c2f8f359 	.word	0xc2f8f359
 8002cd4:	01a56e1f 	.word	0x01a56e1f
 8002cd8:	8800759c 	.word	0x8800759c
 8002cdc:	7e37e43c 	.word	0x7e37e43c
 8002ce0:	43500000 	.word	0x43500000
 8002ce4:	ffff3cb0 	.word	0xffff3cb0
 8002ce8:	8800759c 	.word	0x8800759c
 8002cec:	c2f8f359 	.word	0xc2f8f359
 8002cf0:	3c900000 	.word	0x3c900000

08002cf4 <_init>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	bf00      	nop
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr

08002d00 <_fini>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	bf00      	nop
 8002d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d06:	bc08      	pop	{r3}
 8002d08:	469e      	mov	lr, r3
 8002d0a:	4770      	bx	lr
